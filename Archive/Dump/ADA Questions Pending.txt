Show that multiplication of two matrices of order n can be reduced to squaring a matrix of order 2n. Find a tight lower-bound class for the problem of finding two closest numbers among n real numbers x1, x2, . . . , xn. Find a tight lower-bound class for the number placement problem (Problem 9 in Exercises 6.1). Prove by mathematical induction that a. h log2 l for any binary tree with height h and the number of leaves l. b. h log3 l for any ternary tree with height h and the number of leaves l. Consider the problem of finding the median of a three-element set {a, b, c} of orderable items. a. What is the information-theoretic lower bound for comparison-based algorithms solving this problem? b. Draw a decision tree for an algorithm solving this problem. c. If the worst-case number of comparisons in your algorithm is greater than the information-theoretic lower bound, do you think an algorithm matching the lower bound exists? (Either find such an algorithm or prove its impossibility.) Draw a decision tree and find the number of key comparisons in the worst and average cases for a. the three-element basic bubble sort. b. the three-element enhanced bubble sort (which stops if no swaps have been made on its last pass). Design a comparison-based algorithm for sorting a four-element array with the smallest number of element comparisons possible. Design a comparison-based algorithm for sorting a five-element array with seven comparisons in the worst case. Draw a binary decision tree for searching a four-element sorted list by sequential search. Compare the two lower bounds for searching a sorted array-log3(2n + 1) and log2(n + 1) --to show that a. log3(2n + 1)log2(n + 1) for every positive integer n. b. log3(2n + 1) < log2(n + 1) for every positive integer n n0. What is the information-theoretic lower bound for finding the maximum of n numbers by comparison-based algorithms? Is this bound tight? A tournament tree is a complete binary tree reflecting results of a knockout tournament: its leaves represent n players entering the tournament, and each internal node represents a winner of a match played by the players represented by the node's children. Hence, the winner of the tournament is represented by the root of the tree. a. What is the total number of games played in such a tournament? b. How many rounds are there in such a tournament? c. Design an efficient algorithm to determine the second-best player using the information produced by the tournament. How many extra games does your algorithm require? Advanced fake-coin problem There are n 3 coins identical in appearance; either all are genuine or exactly one of them is fake. It is unknown whether the fake coin is lighter or heavier than the genuine one. You have a balance scale with which you can compare any two sets of coins. That is, by tipping to the left, to the right, or staying even, the balance scale will tell whether the sets weigh the same or which of the sets is heavier than the other, but not by how much. The problem is to find whether all the coins are genuine and, if not, to find the fake coin and establish whether it is lighter or heavier than the genuine ones. a. Prove that any algorithm for this problem must make at least log3(2n + 1) weighings in the worst case. b. Draw a decision tree for an algorithm that solves the problem for n = 3 coins in two weighings. c. Prove that there exists no algorithm that solves the problem for n = 4 coins in two weighings. d. Draw a decision tree for an algorithm that solves the problem for n = 4 coins in two weighings by using an extra coin known to be genuine. e. Draw a decision tree for an algorithm that solves the classic version of the problem--that for n = 12 coins in three weighings (with no extra coins being used). Jigsaw puzzle A jigsaw puzzle contains n pieces. A section of the puzzle is a set of one or more pieces that have been connected to each other. A move consists of connecting two sections. What algorithm will minimize the number of moves required to complete the puzzle? A game of chess can be posed as the following decision problem: given a legal positioning of chess pieces and information about which side is to move, determine whether that side can win. Is this decision problem decidable? A certain problem can be solved by an algorithm whose running time is in O(nlog2 n). Which of the following assertions is true? a. The problem is tractable. b. The problem is intractable. c. Impossible to tell. Give examples of the following graphs or explain why such examples cannot exist. a. graph with a Hamiltonian circuit but without an Eulerian circuit b. graph with an Eulerian circuit but without a Hamiltonian circuit c. graph with both a Hamiltonian circuit and an Eulerian circuit d. graph with a cycle that includes all the vertices but with neither a Hamiltonian circuit nor an Eulerian circuit In 2000, The Clay Mathematics Institute (CMI) of Cambridge, Massachusetts, designated a $1 million prize for the solution to this problem. For each of the following graphs, find its chromatic number. a. a e b.a c. af e bd b f bg d c e c g ch d h Design a polynomial-time algorithm for the graph 2-coloring problem: determine whether vertices of a given graph can be colored in no more than two colors so that no two adjacent vertices are colored the same color. Consider the following brute-force algorithm for solving the composite number problem: Check successive integers from 2 ton/2 as possible divisors of
n. If one of them divides n evenly, return yes (i.e., the number is composite); if none of them does, return no. Why does this algorithm not put the problem in class P ? State the decision version for each of the following problems and outline a polynomial-time algorithm that verifies whether or not a proposed solution solves the problem. (You may assume that a proposed solution represents a legitimate input to your verification algorithm.) a. knapsack problem b. bin packing problem Show that the partition problem is polynomially reducible to the decision version of the knapsack problem. Show that the following three problems are polynomially reducible to each other.
(i) Determine, for a given graph G = V, E and a positive integer m |V |, whether G contains a clique of size m or more. (A clique of size k in a graph is its complete subgraph of k vertices.)
(ii) Determine, for a given graph G =V, E and a positive integer m |V |, whether there is a vertex cover of size m or less for G. (A vertex cover of size k for a graph G = V, E is a subset VV such that |V | = k and, for each edge (u, v) E, at least one of u and v belongs to V .)
(iii) Determine, for a given graph G = V, E and a positive integer m |V |, whether G contains an independent set of size m or more. (An independent set of size k for a graph G = V, E is a subset V V such that |V | = k and for all u, v V , vertices u and v are not adjacent in G.) Determine whether the following problem is NP-complete. Given several sequences of uppercase and lowercase letters, is it possible to select a letter from each sequence without selecting both the upper and lowercase versions of any letter? For example, if the sequences are Abc, BC, aB, and ac, it is possible to choose A from the first sequence, B from the second and third, and c from the fourth. An example where there is no way to make the required selections is given by the four sequences AB, Ab, aB, and ab. Which of the following diagrams do not contradict the current state of our knowledge about the complexity classes P, NP, and NPC (NP-complete problems)? a. b. P = NP P = NP = NPC NPC
c.NP d. NP P NPC P NPC
e.NP P NPC King Arthur expects 150 knights for an annual dinner at Camelot. Unfortunately, some of the knights quarrel with each other, and Arthur knows who quarrels with whom. Arthur wants to seat his guests around a table so that no two quarreling knights sit next to each other. a. Which standard problem can be used to model King Arthur's task? b. As a research project, find a proof that Arthur's problem has a solution if each knight does not quarrel with at least 75 other knights. Some textbooks define the number of significant digits in the approximation of number by number as the largest nonnegative integer k for which
| | < 5 . 10-k.
|| According to this definition, how many significant digits are there in the approximation of by a. 3.1415? b. 3.1417? If = 5 is known to approximate some number with the absolute error not exceeding 10-2, find a. the range of possible values of . b. the range of the relative errors of these approximations. Find the approximate value of e = 648721 . . . obtained by the fifth-degree Taylor's polynomial about 0 and compute the truncation error of this approximation. Does the result agree with the theoretical prediction made in the section? Derive formula (17) of the composite trapezoidal rule. Use the composite trapezoidal rule with n = 4 to approximate the following definite integrals. Find the truncation error of each approximation and compare it with the one given by formula (19).
a.1 x2d x b.3 x-1d x
01 If 1 e sin xdx is to be computed by the composite trapezoidal rule, how large
0 should the number of subintervals be to guarantee a truncation error smaller than 10-4? Smaller than 10-6? Solve the two systems of linear equations and indicate whether they are ill conditioned.
a.2x + 5y = 7b. 2x + 5y = 7
2x + 5.000001y = 7.0000012x + 4.999999y = 7.000002 Write a computer program to solve the equation ax2 + bx + c = 0. a. Prove that for any nonnegative number D, the sequence of Newton's method for computing D is strictly decreasing and converges to D for any value of the initial approximation x0 >D. b. Prove that if 0.25 D < 1 and x0 = (1 + D)/2, no more than four iterations of Newton's method are needed to guarantee that |xn D| 4 . 10-15.
< Apply four iterations of Newton's method to compute 3 and estimate the absolute and relative errors of this approximation. a. Continue the backtracking search for a solution to the four-queens problem, which was started in this section, to find the second solution to the problem. b. Explain how the board's symmetry can be used to find the second solution to the four-queens problem. a. Which is the last solution to the five-queens problem found by the backtracking algorithm? b. Use the board's symmetry to find at least four other solutions to the problem. a. Implement the backtracking algorithm for the n-queens problem in the language of your choice. Run your program for a sample of n values to get the numbers of nodes in the algorithm's state-space trees. Compare these numbers with the numbers of candidate solutions generated by the exhaustive search algorithm for this problem (see Problem 9 in Exercises 3.4). b. For each value of n for which you run your program in part (a), estimate the size of the state-space tree by the method described in Section 12.1 and compare the estimate with the actual number of nodes you obtained. Design a linear-time algorithm that finds a solution to the n-queens problem for any n 4. Apply backtracking to the problem of finding a Hamiltonian circuit in the following graph. a b cd e f g Apply backtracking to solve the 3-coloring problem for the graph in Figure 12.3a. Generate all permutations of {1, 2, 3, 4} by backtracking. a. Apply backtracking to solve the following instance of the subset sum problem: A = {1, 3, 4, 5} and d = 1 b. Will the backtracking algorithm work correctly if we use just one of the two inequalities to terminate a node as non promising? The general template for backtracking algorithms, which is given in the section, works correctly only if no solution is a prefix to another solution to the problem. Change the template's pseudocode to work correctly without this restriction. Write a program implementing a backtracking algorithm for a. the Hamiltonian circuit problem. b. the m-coloring problem. Puzzle pegsThis puzzle-like game is played on a board with 15 small holes arranged in an equilateral triangle. In an initial position, all but one of the holes are occupied by pegs, as in the example shown below. A legal move is a jump of a peg over its immediate neighbor into an empty square opposite; the jump removes the jumped-over neighbor from the board. Design and implement a backtracking algorithm for solving the following versions of this puzzle. a. Starting with a given location of the empty hole, find a shortest sequence of moves that eliminates 14 pegs with no limitations on the final position of the remaining peg. b. Starting with a given location of the empty hole, find a shortest sequence of moves that eliminates 14 pegs with the remaining peg at the empty hole of the initial board. What data structure would you use to keep track of live nodes in a best-first branch-and-bound algorithm? Solve the same instance of the assignment problem as the one solved in the section by the best-first branch-and-bound algorithm with the bounding function based on matrix columns rather than rows. a. Give an example of the best-case input for the branch-and-bound algorithm for the assignment problem. b. In the best case, how many nodes will be in the state-space tree of the branch-and-bound algorithm for the assignment problem? Write a program for solving the assignment problem by the branch-and-bound algorithm. Experiment with your program to determine the average size of the cost matrices for which the problem is solved in a given amount of time, say, 1 minute on your computer. Solve the following instance of the knapsack problem by the branch and bound algorithm: item weight value
a. Suggest a more sophisticated bounding function for solving the knapsack problem than the one used in the section. b. Use your bounding function in the branch-and-bound algorithm applied to the instance of Problem 5. Write a program to solve the knapsack problem with the branch-and-bound algorithm. a. Prove the validity of the lower bound given by formula (12.2) for instances of the traveling salesman problem with symmetric matrices of integer intercity distances. b. How would you modify lower bound (12.2) for non symmetric distance matrices? Apply the branch-and-bound algorithm to solve the traveling salesman problem for the following graph: a 2 b
(We solved this problem by exhaustive search in Section 3.4.) As a research project, write a report on how state-space trees are used for programming such games as chess, checkers, and tic-tac-toe. The two principal algorithms you should read about are the minimax algorithm and alpha-beta pruning. a. Apply the nearest-neighbor algorithm to the instance defined by the intercity distance matrix below. Start the algorithm at the first city, assuming that the cities are numbered from 1 to 5.
b. Compute the accuracy ratio of this approximate solution. a. Write pseudocode for the nearest-neighbor algorithm. Assume that its input is given by an n × n intercity distance matrix. b. What is the time efficiency of the nearest-neighbor algorithm? Apply the twice-around-the-tree algorithm to the graph in Figure 12.11a with a walk around the minimum spanning tree that starts at the same vertex a but differs from the walk in Figure 12.11b. Is the length of the obtained tour the same as the length of the tour in Figure 12.11b? Prove that making a shortcut of the kind used by the twice-around-the-tree algorithm cannot increase the tour's length in a Euclidean graph. What is the time efficiency class of the greedy algorithm for the knapsack problem? Prove that the performance ratio RA of the enhanced greedy algorithm for the knapsack problem is equal to 2. Consider the greedy algorithm for the bin-packing problem, which is called the first-fit (FF) algorithm: place each of the items in the order given into the first bin the item fits in; when there are no such bins, place the item in a new bin and add this bin to the end of the bin list. a. Apply FF to the instance s1 = 0.4, s2 = 0.7,s3 = 0.2, s4 = 0.1, s5 = 0.5 and determine whether the solution obtained is optimal. b. Determine the worst-case time efficiency of FF. c. Prove that FF is a 2-approximation algorithm. The first-fit decreasing (FFD) approximation algorithm for the bin-packing problem starts by sorting the items in non increasing order of their sizes and then acts as the first-fit algorithm. a. Apply FFD to the instance s1 = 0.4, s2 = 0.7,s3 = 0.2, s4 = 0.1, s5 = 0.5 and determine whether the solution obtained is optimal. b. Does FFD always yield an optimal solution? Justify your answer. c. Prove that FFD is a 5-approximation algorithm. d. Run an experiment to determine which of the two algorithms--FFor FFD--yields more accurate approximations on a random sample of the problem's instances. a. Design a simple 2-approximation algorithm for finding a minimum vertex cover (a vertex cover with the smallest number of vertices) in a given graph. b. Consider the following approximation algorithm for finding a maximum independent set (an independent set with the largest number of vertices) in a given graph. Apply the 2-approximation algorithm of part (a) and output all the vertices that are not in the obtained vertex cover. Can we claim that this algorithm is a 2-approximation algorithm, too? a. Design a polynomial-time greedy algorithm for the graph-coloring problem. b. Show that the performance ratio of your approximation algorithm is infinitely large.
