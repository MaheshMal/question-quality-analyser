plutarch says that sertorius in order to teach his soldiers that perseverance and wit are better than brute force had two horses brought before them and set two men to pull out their tails. one of the men was a burly hercules who tugged and tugged but all to no purpose the other was a sharp weaselfaced tailor who plucked one hair at a time amidst roars of laughter and soon left the tail quite bare. e. cobham brewer dictionary of phrase and fable the decrease and conquer technique is based on exploiting the relationship between a solution to a given instance of a problem and a solution to its smaller instance. once such a relationship is established it can be exploited either top down or bottom up. the former leads naturally to a recursive implementation although as one can see from several examples in this chapter an ultimate implementation may well be nonrecursive. the bottom up variation is usually implemented iteratively starting with a solution to the smallest instance of the problem it is called sometimes the incremental approach. there are three major variations of decrease and conquer decrease by a constant decrease by a constant factor variable size decrease in the decrease by a constant variation the size of an instance is reduced by the same constant on each iteration of the algorithm. typically this constant is equal to one figure . although other constant size reductions do happen occasionally. consider as an example the exponentiation problem of computing an where a and n is a nonnegative integer. the relationship between a solution to an instance of size n and an instance of size n is obtained by the obvious formula an an . a. so the function f n an can be computed either top down by using its recursive definition problem of size n subproblem of size n solution to the subproblem solution to the original problem figure . decrease by one and conquer technique. f n f n . a if n . if n or bottom up by multiplying by a n times. yes it is the same as the brute force algorithm but we have come to it by a different thought process. more interesting examples of decrease by one algorithms appear in sections . . . the decrease by a constant factor technique suggests reducing a problem instance by the same constant factor on each iteration of the algorithm. in most applications this constant factor is equal to two. can you give an example of such an algorithm? the decrease by half idea is illustrated in figure . . for an example let us revisit the exponentiation problem. if the instance of size n is to compute an the instance of half its size is to compute an with the obvious relationship between the two an an . but since we consider here instances with integer exponents only the former does not work for odd n. if n is odd we have to compute an by using the rule for even valued exponents and then multiply the result by a. to summarize we have the following formula problem of size n subproblem of size n solution to the subproblem solution to the original problem figure . decrease by half and conquer technique. an an a n . a if n is even and positive if n is odd . if n . if we compute an recursively according to formula . and measure the algorithm's efficiency by the number of multiplications we should expect the algorithm to be in log n because on each iteration the size is reduced by about a half at the expense of one or two multiplications. a few other examples of decrease by a constant factor algorithms are given in section . and its exercises. such algorithms are so efficient however that there are few examples of this kind. finally in the variable size decrease variety of decrease and conquer the size reduction pattern varies from one iteration of an algorithm to another. euclid's algorithm for computing the greatest common divisor provides a good example of such a situation. recall that this algorithm is based on the formula gcd m n gcd n m mod n . though the value of the second argument is always smaller on the right hand side than on the left hand side it decreases neither by a constant nor by a constant factor. a few other examples of such algorithms appear in section . . 