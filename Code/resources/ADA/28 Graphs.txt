as we mentioned in the previous section a graph is informally thought of as a collection of points in the plane called vertices or nodes some of them connected by line segments called edges or arcs. formally a graph g v e is defined by a pair of two sets a finite nonempty set v of items called vertices and a set e of pairs of these items called edges. if these pairs of vertices are unordered i.e. a pair of vertices u v is the same as the pair v u we say that the vertices u and v are adjacent to each other and that they are connected by the undirected edge u v . we call the vertices u and v endpoints of the edge u v and say that u and v are incident to this edge we also say that the edge u v is incident to its endpoints u and v. a graph g is called undirected if every edge in it is undirected. if a pair of vertices u v is not the same as the pair v u we say that the edge u v is directed from the vertex u called the edge's tail to the vertex v called the edge's head. we also say that the edge u v leaves u and enters v. a graph whose every edge is directed is called directed. directed graphs are also called digraphs. it is normally convenient to label vertices of a graph or a digraph with letters integer numbers or if an application calls for it character strings figure . . the graph depicted in figure . a has six vertices and seven undirected edges v a b c d e f e a c a d b c b f c e d e e f . the digraph depicted in figure . b has six vertices and eight directed edges v a b c d e f e a c b c b f c e d a d e e c e f . a c b a c b d e f d e f a b figure . a undirected graph. b digraph. our definition of a graph does not forbid loops or edges connecting vertices to themselves. unless explicitly stated otherwise we will consider graphs without loops. since our definition disallows multiple edges between the same vertices of an undirected graph we have the following inequality for the number of edges e possible in an undirected graph with v vertices and no loops e v v . we get the largest number of edges in a graph if there is an edge connecting each of its v vertices with all v other vertices. we have to divide product v v by however because it includes every edge twice. a graph with every pair of its vertices connected by an edge is called complete. a standard notation for the complete graph with v vertices is k v . a graph with relatively few possible edges missing is called dense a graph with few edges relative to the number of its vertices is called sparse. whether we are dealing with a dense or sparse graph may influence how we choose to represent the graph and consequently the running time of an algorithm being designed or used. graph representations graphs for computer algorithms are usually represented in one of two ways the adjacency matrix and adjacency lists. the adjacency matrix of a graph with n vertices is an n n boolean matrix with one row and one column for each of the graph's vertices in which the element in the ith row and the j th column is equal to if there is an edge from the ith vertex to the j th vertex and equal to if there is no such edge. for example the adjacency matrix for the graph of figure . a is given in figure . a. note that the adjacency matrix of an undirected graph is always symmetric i.e. a i j a j i for every i j n why? . the adjacency lists of a graph or a digraph is a collection of linked lists one for each vertex that contain all the vertices adjacent to the list's vertex i.e. all the vertices connected to it by an edge . usually such lists start with a header identifying a vertex for which the list is compiled. for example figure . b represents the graph in figure . a via its adjacency lists. to put it another way a b c d e f a a c d b b c f c c a b e d d a e e e c d f f f b e a b figure . a adjacency matrix and b adjacency lists of the graph in figure . a. adjacency lists indicate columns of the adjacency matrix that for a given vertex contain 's. if a graph is sparse the adjacency list representation may use less space than the corresponding adjacency matrix despite the extra storage consumed by pointers of the linked lists the situation is exactly opposite for dense graphs. in general which of the two representations is more convenient depends on the nature of the problem on the algorithm used for solving it and possibly on the type of input graph sparse or dense . weighted graphs a weighted graph or weighted digraph is a graph or digraph with numbers assigned to its edges. these numbers are called weights or costs. an interest in such graphs is motivated by numerous real world applications such as finding the shortest path between two points in a transportation or communication network or the traveling salesman problem mentioned earlier. both principal representations of a graph can be easily adopted to accommodate weighted graphs. if a weighted graph is represented by its adjacency matrix then its element a i j will simply contain the weight of the edge from the ith to the j th vertex if there is such an edge and a special symbol e.g. if there is no such edge. such a matrix is called the weight matrix or cost matrix. this approach is illustrated in figure . b for the weighted graph in figure . a. for some applications it is more convenient to put 's on the main diagonal of the adjacency matrix. adjacency lists for a weighted graph have to include in their nodes not only the name of an adjacent vertex but also the weight of the corresponding edge figure . c . paths and cycles among the many properties of graphs two are important for a great number of applications connectivity and acyclicity. both are based on the notion of a path. a path from vertex u to vertex v of a graph g can be defined as a sequence of adjacent connected by an edge vertices that starts with u and ends with v. if all vertices of a path are distinct the path is said to be simple. the length of a path is the total number of vertices in the vertex sequence defining the path minus which is the same as the number of edges in the path. for example a c b f is a simple path of length from a to f in the graph in figure . a whereas a c e c b f is a path not simple of length from a to f. a b c d a b a a b c b b a c d c c a b d c d d d b c a b c figure . a weighted graph. b its weight matrix. c its adjacency lists. a f b c e g h d i figure . graph that is not connected. in the case of a directed graph we are usually interested in directed paths. a directed path is a sequence of vertices in which every consecutive pair of the vertices is connected by an edge directed from the vertex listed first to the vertex listed next. for example a c e f is a directed path from a to f in the graph in figure . b. a graph is said to be connected if for every pair of its vertices u and v there is a path from u to v. if we make a model of a connected graph by connecting some balls representing the graph's vertices with strings representing the edges it will be a single piece. if a graph is not connected such a model will consist of several connected pieces that are called connected components of the graph. formally a connected component is a maximal not expandable by including another vertex and an edge connected subgraph of a given graph. for example the graphs in figures . a and . a are connected whereas the graph in figure . is not because there is no path for example from a to f. the graph in figure . has two connected components with vertices a b c d e and f g h i respectively. graphs with several connected components do happen in real world applications. a graph representing the interstate highway system of the united states would be an example why? . it is important to know for many applications whether or not a graph under consideration has cycles. a cycle is a path of a positive length that starts and ends at the same vertex and does not traverse the same edge more than once. for example f h i g f is a cycle in the graph in figure . . a graph with no cycles is said to be acyclic. we discuss acyclic graphs in the next subsection. 