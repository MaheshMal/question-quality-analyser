in sections . . and . we discussed the binary search tree one of the principal data structures for implementing dictionaries. it is a binary tree whose nodes contain elements of a set of orderable items one element per node so that all elements in the left subtree are smaller than the element in the subtree's root and all the elements in the right subtree are greater than it. note that this transformation from a set to a binary search tree is an example of the representation change technique. what do we gain by such transformation compared to the straightforward implementation of a dictionary by say an array? we gain in the time efficiency of searching insertion and deletion which are all in log n but only in the average case. in the worst case these operations are in n because the tree can degenerate into a severely unbalanced one with its height equal to n . computer scientists have expended a lot of effort in trying to find a structure that preserves the good properties of the classical binary search tree principally the logarithmic efficiency of the dictionary operations and having the set's elements sorted but avoids its worst case degeneracy. they have come up with two approaches. the first approach is of the instance simplification variety an unbalanced binary search tree is transformed into a balanced one. because of this such trees are called self balancing. specific implementations of this idea differ by their definition of balance. an avl tree requires the difference between the heights of the left and right subtrees of every node never exceed . a red black tree tolerates the height of one subtree being twice as large as the other subtree of the same node. if an insertion or deletion of a new node creates a tree with a violated balance requirement the tree is restructured by one of a family of special transformations called rotations that restore the balance required. in this section we will discuss only avl trees. information about other types of binary search trees that utilize the idea of rebalancing via rotations including red black trees and splay trees can be found in the references cor sed and tar . the second approach is of the representation change variety allow more than one element in a node of a search tree. specific cases of such trees are trees trees and more general and important b trees. they differ in the number of elements admissible in a single node of a search tree but all are perfectly balanced. we discuss the simplest case of such trees the tree in this section leaving the discussion of b trees for chapter . 