keep on the lookout for novel ideas that others have used successfully. your idea has to be original only in its adaptation to the problem you're working on. thomas edison as we saw in the previous chapter there are problems that are difficult to solve algorithmically. at the same time some of them are so important that we cannot just sigh in resignation and do nothing. this chapter outlines several ways of dealing with such difficult problems. sections . and . introduce two algorithm design techniques backtracking and branch and bound that often make it possible to solve at least some large instances of difficult combinatorial problems. both strategies can be considered an improvement over exhaustive search discussed in section . . unlike exhaustive search they construct candidate solutions one component at a time and evaluate the partially constructed solutions if no potential values of the remaining components can lead to a solution the remaining components are not generated at all. this approach makes it possible to solve some large instances of difficult combinatorial problems though in the worst case we still face the same curse of exponential explosion encountered in exhaustive search. both backtracking and branch and bound are based on the construction of a state space tree whose nodes reflect specific choices made for a solution's components. both techniques terminate a node as soon as it can be guaranteed that no solution to the problem can be obtained by considering choices that correspond to the node's descendants. the techniques differ in the nature of problems they can be applied to. branch and bound is applicable only to optimization problems because it is based on computing a bound on possible values of the problem's objective function. 