recall that in section . we examined the knapsack problem which asks to find the most valuable subset of items that fits a knapsack of a given capacity. the exhaustive search approach to solving this problem discussed there was based on generating all subsets of a given set of items. in this section we discuss algorithms for generating all n subsets of an abstract set a a . . . an . mathematicians call the set of all subsets of a set its power set. the decrease by one idea is immediately applicable to this problem too. all subsets of a a . . . an can be divided into two groups those that do not contain an and those that do. the former group is nothing but all the subsets of a . . . an while each and every element of the latter can be obtained by adding an to a subset of a . . . an . thus once we have a list of all subsets of a . . . an we can get all the subsets of a . . . an by adding to the list all its elements with an put into each of them. an application of this algorithm to generate all subsets of a a a is illustrated in figure . . similarly to generating permutations we do not have to generate power sets of smaller sets. a convenient way of solving the problem directly is based on a one toone correspondence between all n subsets of an n element set a a . . . an n subsets a a a a a a a a a a a a a a a a a figure . generating subsets bottom up. and all n bit strings b . . . bn of length n. the easiest way to establish such a correspondence is to assign to a subset the bit string in which bi if ai belongs to the subset and bi if ai does not belong to it. we mentioned this idea of bit vectors in section . . for example the bit string will correspond to the empty subset of a three element set will correspond to the set itself i.e. a a a and will represent a a . with this correspondence in place we can generate all the bit strings of length n by generating successive binary numbers from to n padded when necessary with an appropriate number of leading 's. for example for the case of n we obtain bit strings subsets a a a a a a a a a a a a note that although the bit strings are generated by this algorithm in lexicographic order in the two symbol alphabet of and the order of the subsets looks anything but natural. for example we might want to have the so called squashed order in which any subset involving aj can be listed only after all the subsets involving a . . . aj as was the case for the list of the three element set in figure . . it is easy to adjust the bit string based algorithm above to yield a squashed ordering of the subsets involved see problem in this section's exercises . a more challenging question is whether there exists a minimal change algorithm for generating bit strings so that every one of them differs from its immediate predecessor by only a single bit. in the language of subsets we want every subset to differ from its immediate predecessor by either an addition or a deletion but not both of a single element. the answer to this question is yes. for example for n we can get . such a sequence of bit strings is called the binary reflected gray code. frank gray a researcher at at t bell laboratories reinvented it in the s to minimize the effect of errors in transmitting digital signals see e.g. ros pp. . seventy years earlier the french engineer e mile baudot used such codes in telegraphy. here is pseudocode that generates the binary reflected gray code recursively. algorithm brgc n generates recursively the binary reflected gray code of order n input a positive integer n output a list of all bit strings of length n composing the gray code if n make list l containing bit strings and in this order else generate list l of bit strings of size n by calling brgc n copy list l to list l in reversed order add in front of each bit string in list l add in front of each bit string in list l append l to l to get list l return l the correctness of the algorithm stems from the fact that it generates n bit strings and all of them are distinct. both these assertions are easy to check by mathematical induction. note that the binary reflected gray code is cyclic its last bit string differs from the first one by a single bit. for a nonrecursive algorithm for generating the binary reflected gray code see problem in this section's exercises. exercises . . is it realistic to implement an algorithm that requires generating all permutations of a element set on your computer? what about all the subsets of such a set? . generate all permutations of by a. the bottom up minimal change algorithm. b. the johnson trotter algorithm. c. the lexicographic order algorithm. . apply lexicographicpermute to multiset . does it generate correctly all the permutations in lexicographic order? . consider the following implementation of the algorithm for generating permutations discovered by b. heap hea . algorithm heappermute n implements heap's algorithm for generating permutations input a positive integer n and a global array a ..n output all permutations of elements of a if n write a else for i to n do heappermute n if n is odd swap a and a n else swap a i and a n a. trace the algorithm by hand for n and . b. prove the correctness of heap's algorithm. c. what is the time efficiency of heappermute? . generate all the subsets of a four element set a a a a a by each of the two algorithms outlined in this section. . what simple trick would make the bit string based algorithm generate subsets in squashed order? . write pseudocode for a recursive algorithm for generating all n bit strings of length n. . write a nonrecursive algorithm for generating n bit strings of length n that implements bit strings as arrays and does not use binary additions. . a. generate the binary reflexive gray code of order . b. trace the following nonrecursive algorithm to generate the binary reflexive gray code of order . start with the n bit string of all 's. for i . . . n generate the ith bit string by flipping bit b in the previous bit string where b is the position of the least significant in the binary representation of i. . design a decrease and conquer algorithm for generating all combinations of k items chosen from n i.e. all k element subsets of a given n element set. is your algorithm a minimal change algorithm? . gray code and the tower of hanoi a. show that the disk moves made in the classic recursive algorithm for the tower of hanoi puzzle can be used for generating the binary reflected gray code. b. show how the binary reflected gray code can be used for solving the tower of hanoi puzzle. . fair attraction in olden days one could encounter the following attraction at a fair. a light bulb was connected to several switches in such a way that it lighted up only when all the switches were closed. each switch was controlled by a push button pressing the button toggled the switch but there was no way to know the state of the switch. the object was to turn the light bulb on. design an algorithm to turn on the light bulb with the minimum number of button pushes needed in the worst case for n switches. 