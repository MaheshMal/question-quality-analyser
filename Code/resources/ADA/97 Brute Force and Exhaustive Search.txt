science is as far removed from brute force as this sword from a crowbar. edward lytton leila book ii chapter i doing a thing well is often a waste of time. robert byrne a master pool and billiards player and a writer after introducing the framework and methods for algorithm analysis in the preceding chapter we are ready to embark on a discussion of algorithm design strategies. each of the next eight chapters is devoted to a particular design strategy. the subject of this chapter is brute force and its important special case exhaustive search. brute force can be described as follows brute force is a straightforward approach to solving a problem usually directly based on the problem statement and definitions of the concepts involved. the force implied by the strategy's definition is that of a computer and not that of one's intellect. just do it! would be another way to describe the prescription of the brute force approach. and often the brute force strategy is indeed the one that is easiest to apply. as an example consider the exponentiation problem compute an for a nonzero number a and a nonnegative integer n. although this problem might seem trivial it provides a useful vehicle for illustrating several algorithm design strategies including the brute force. also note that computing an mod m for some large integers is a principal component of a leading encryption algorithm. by the definition of exponentiation an a . . . a . n times this suggests simply computing an by multiplying by a n times. we have already encountered at least two brute force algorithms in the book the consecutive integer checking algorithm for computing gcd m n in section . and the definition based algorithm for matrix multiplication in section . . many other examples are given later in this chapter. can you identify a few algorithms you already know as being based on the brute force approach? though rarely a source of clever or efficient algorithms the brute force approach should not be overlooked as an important algorithm design strategy. first unlike some of the other strategies brute force is applicable to a very wide variety of problems. in fact it seems to be the only general approach for which it is more difficult to point out problems it cannot tackle. second for some important problems e.g. sorting searching matrix multiplication string matching the brute force approach yields reasonable algorithms of at least some practical value with no limitation on instance size. third the expense of designing a more efficient algorithm may be unjustifiable if only a few instances of a problem need to be solved and a brute force algorithm can solve those instances with acceptable speed. fourth even if too inefficient in general a brute force algorithm can still be useful for solving small size instances of a problem. finally a brute force algorithm can serve an important theoretical or educational purpose as a yardstick with which to judge more efficient alternatives for solving a problem. 