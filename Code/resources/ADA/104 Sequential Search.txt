we have already encountered a brute force algorithm for the general searching problem it is called sequential search see section . . to repeat the algorithm simply compares successive elements of a given list with a given search key until either a match is encountered successful search or the list is exhausted without finding a match unsuccessful search . a simple extra trick is often employed in implementing sequential search if we append the search key to the end of the list the search for the key will have to be successful and therefore we can eliminate the end of list check altogether. here is pseudocode of this enhanced version. algorithm sequentialsearch a ..n k implements sequential search with a search key as a sentinel input an array a of n elements and a search key k output the index of the first element in a ..n whose value is equal to k or if no such element is found a n k i while a i k do ii if i n return i else return another straightforward improvement can be incorporated in sequential search if a given list is known to be sorted searching in such a list can be stopped as soon as an element greater than or equal to the search key is encountered. sequential search provides an excellent illustration of the brute force approach with its characteristic strength simplicity and weakness inferior efficiency . the efficiency results obtained in section . for the standard version of sequential search change for the enhanced version only very slightly so that the algorithm remains linear in both the worst and average cases. we discuss later in the book several searching algorithms with a better time efficiency. 