let us illustrate the branch and bound approach by applying it to the problem of assigning n people to n jobs so that the total cost of the assignment is as small as possible. we introduced this problem in section . where we solved it by exhaustive search. recall that an instance of the assignment problem is specified by an n n cost matrix c so that we can state the problem as follows select one element in each row of the matrix so that no two selected elements are in the same column and their sum is the smallest possible. we will demonstrate how this problem can be solved using the branch and bound technique by considering the same small instance of the problem that we investigated in section . job job job job person a c person b person c person d how can we find a lower bound on the cost of an optimal selection without actually solving the problem? we can do this by several methods. for example it is clear that the cost of any solution including an optimal one cannot be smaller than the sum of the smallest elements in each of the matrix's rows. for the instance here this sum is . it is important to stress that this is not the cost of any legitimate selection and came from the same column of the matrix it is just a lower bound on the cost of any legitimate selection. we can and will apply the same thinking to partially constructed solutions. for example for any legitimate selection that selects from the first row the lower bound will be . one more comment is in order before we embark on constructing the problem's state space tree. it deals with the order in which the tree nodes will be generated. rather than generating a single child of the last promising node as we did in backtracking we will generate all the children of the most promising node among nonterminated leaves in the current tree. nonterminated i.e. still promising leaves are also called live. how can we tell which of the nodes is most promising? we can do this by comparing the lower bounds of the live nodes. it is sensible to consider a node with the best bound as most promising although this does not of course preclude the possibility that an optimal solution will ultimately belong to a different branch of the state space tree. this variation of the strategy is called the best first branch and bound. so returning to the instance of the assignment problem given earlier we start with the root that corresponds to no elements selected from the cost matrix. as we already discussed the lower bound value for the root denoted lb is . the nodes on the first level of the tree correspond to selections of an element in the first row of the matrix i.e. a job for person a figure . . so we have four live leaves nodes through that may contain an optimal solution. the most promising of them is node because it has the smallest lowerbound value. following our best first search strategy we branch out from that node first by considering the three different ways of selecting an element from the second row and not in the second column the three different jobs that can be assigned to person b figure . . of the six live leaves nodes and that may contain an optimal solution we again choose the one with the smallest lower bound node . first we consider selecting the third column's element from c's row i.e. assigning person c to job this leaves us with no choice but to select the element from the fourth column of d's row assigning person d to job . this yields leaf figure . which corresponds to the feasible solution a b c d with the total cost of . its sibling node corresponds to the feasible solution a b c d with the total cost of . since its cost is larger than the cost of the solution represented by leaf node is simply terminated. of course if start lb a a a a lb lb lb lb figure . levels and of the state space tree for the instance of the assignment problem being solved with the best first branch and bound algorithm. the number above a node shows the order in which the node was generated. a node's fields indicate the job number assigned to person a and the lower bound value lb for this node. start lb a a a a lb lb lb lb b b b lb lb lb figure . levels and of the state space tree for the instance of the assignment problem being solved with the best first branch and bound algorithm. start lb a a a a lb lb lb lb x x x b b b lb lb lb x x c c d d cost cost solution inferior solution figure . complete state space tree for the instance of the assignment problem solved with the best first branch and bound algorithm. its cost were smaller than we would have to replace the information about the best solution seen so far with the data provided by this node. now as we inspect each of the live leaves of the last state space tree nodes and in figure . we discover that their lower bound values are not smaller than the value of the best selection seen so far leaf . hence we terminate all of them and recognize the solution represented by leaf as the optimal solution to the problem. before we leave the assignment problem we have to remind ourselves again that unlike for our next examples there is a polynomial time algorithm for this problem called the hungarian method e.g. pap . in the light of this efficient algorithm solving the assignment problem by branch and bound should be considered a convenient educational device rather than a practical recommendation. 