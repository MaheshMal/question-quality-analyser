throughout the book see in particular sections . and . we have encountered problems that require finding an element with a special property in a domain that grows exponentially fast or faster with the size of the problem's input a hamiltonian circuit among all permutations of a graph's vertices the most valuable subset of items for an instance of the knapsack problem and the like. we addressed in section . the reasons for believing that many such problems might not be solvable in polynomial time. also recall that we discussed in section . how such problems can be solved at least in principle by exhaustive search. the exhaustive search technique suggests generating all candidate solutions and then identifying the one or the ones with a desired property. backtracking is a more intelligent variation of this approach. the principal idea is to construct solutions one component at a time and evaluate such partially constructed candidates as follows. if a partially constructed solution can be developed further without violating the problem's constraints it is done by taking the first remaining legitimate option for the next component. if there is no legitimate option for the next component no alternatives for any remaining component need to be considered. in this case the algorithm backtracks to replace the last component of the partially constructed solution with its next option. it is convenient to implement this kind of processing by constructing a tree of choices being made called the state space tree. its root represents an initial state before the search for a solution begins. the nodes of the first level in the tree represent the choices made for the first component of a solution the nodes of the second level represent the choices for the second component and so on. a node in a state space tree is said to be promising if it corresponds to a partially constructed solution that may still lead to a complete solution otherwise it is called nonpromising. leaves represent either nonpromising dead ends or complete solutions found by the algorithm. in the majority of cases a statespace tree for a backtracking algorithm is constructed in the manner of depthfirst search. if the current node is promising its child is generated by adding the first remaining legitimate option for the next component of a solution and the processing moves to this child. if the current node turns out to be nonpromising the algorithm backtracks to the node's parent to consider the next possible option for its last component if there is no such option it backtracks one more level up the tree and so on. finally if the algorithm reaches a complete solution to the problem it either stops if just one solution is required or continues searching for other possible solutions. 