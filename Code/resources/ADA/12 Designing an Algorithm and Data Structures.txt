while the algorithm design techniques do provide a powerful set of general approaches to algorithmic problem solving designing an algorithm for a particular problem may still be a challenging task. some design techniques can be simply inapplicable to the problem in question. sometimes several techniques need to be combined and there are algorithms that are hard to pinpoint as applications of the known design techniques. even when a particular design technique is applicable getting an algorithm often requires a nontrivial ingenuity on the part of the algorithm designer. with practice both tasks choosing among the general techniques and applying them get easier but they are rarely easy. of course one should pay close attention to choosing data structures appropriate for the operations performed by the algorithm. for example the sieve of eratosthenes introduced in section . would run longer if we used a linked list instead of an array in its implementation why? . also note that some of the algorithm design techniques discussed in chapters and depend intimately on structuring or restructuring data specifying a problem's instance. many years ago an influential textbook proclaimed the fundamental importance of both algorithms and data structures for computer programming by its very title algorithms data structures programs wir . in the new world of object oriented programming data structures remain crucially important for both design and analysis of algorithms. we review basic data structures in section . . 