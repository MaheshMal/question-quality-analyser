now that we have seen that the divide and conquer approach can reduce the number of one digit multiplications in multiplying two integers we should not be surprised that a similar feat can be accomplished for multiplying matrices. such an algorithm was published by v. strassen in str . the principal insight of the algorithm lies in the discovery that we can find the product c of two matrices a and b with just seven multiplications as opposed to the eight required by the brute force algorithm see example in section . . this is accomplished by using the following formulas c c a a b b c c a a b b m m m m m m m m m m m m where m a a b b m a a b m a b b m a b b m a a b m a a b b m a a b b . thus to multiply two matrices strassen's algorithm makes seven multiplications and additions subtractions whereas the brute force algorithm requires eight multiplications and four additions. these numbers should not lead us to multiplying matrices by strassen's algorithm. its importance stems from its asymptotic superiority as matrix order n goes to infinity. let a and b be two n n matrices where n is a power of . if n is not a power of matrices can be padded with rows and columns of zeros. we can divide a b and their product c into four n n submatrices each as follows c c a a b b . c c a a b b it is not difficult to verify that one can treat these submatrices as numbers to get the correct product. for example c can be computed either as a b a b or as m m m m where m m m and m are found by strassen's formulas with the numbers replaced by the corresponding submatrices. if the seven products of n n matrices are computed recursively by the same method we have strassen's algorithm for matrix multiplication. let us evaluate the asymptotic efficiency of this algorithm. if m n is the number of multiplications made by strassen's algorithm in multiplying two n n matrices where n is a power of we get the following recurrence relation for it m n m n for n m . since n k m k m k m k m k . . . im k i . . . km k k k. since k log n m n log n nlog n . which is smaller than n required by the brute force algorithm. since this savings in the number of multiplications was achieved at the expense of making extra additions we must check the number of additions a n made by strassen's algorithm. to multiply two matrices of order n the algorithm needs to multiply seven matrices of order n and make additions subtractions of matrices of size n when n no additions are made since two numbers are simply multiplied. these observations yield the following recurrence relation a n a n n for n a . though one can obtain a closed form solution to this recurrence see problem in this section's exercises here we simply establish the solution's order of growth. according to the master theorem a n nlog . in other words the number of additions has the same order of growth as the number of multiplications. this puts strassen's algorithm in nlog which is a better efficiency class than n of the brute force method. since the time of strassen's discovery several other algorithms for multiplying two n n matrices of real numbers in o n time with progressively smaller constants have been invented. the fastest algorithm so far is that of coopersmith and winograd coo with its efficiency in o n . . the decreasing values of the exponents have been obtained at the expense of the increasing complexity of these algorithms. because of large multiplicative constants none of them is of practical value. however they are interesting from a theoretical point of view. on one hand they get closer and closer to the best theoretical lower bound known for matrix multiplication which is n multiplications though the gap between this bound and the best available algorithm remains unresolved. on the other hand matrix multiplication is known to be computationally equivalent to some other important problems such as solving systems of linear equations discussed in the next chapter . exercises . . what are the smallest and largest numbers of digits the product of two decimal n digit integers can have? . compute by applying the divide and conquer algorithm outlined in the text. . a. prove the equality alogb c clogb a which was used in section . . b. why is nlog better than log n as a closed form formula for m n ? . a. why did we not include multiplications by n in the multiplication count m n of the large integer multiplication algorithm? b. in addition to assuming that n is a power of we made for the sake of simplicity another more subtle assumption in setting up the recurrences for m n and a n which is not always true it does not change the final answers however . what is this assumption? . how many one digit additions are made by the pen and pencil algorithm in multiplying two n digit integers? you may disregard potential carries. . verify the formulas underlying strassen's algorithm for multiplying matrices. . apply strassen's algorithm to compute exiting the recursion when n i.e. computing the products of matrices by the brute force algorithm. . solve the recurrence for the number of additions required by strassen's algorithm. assume that n is a power of . . v. pan pan has discovered a divide and conquer matrix multiplication algorithm that is based on multiplying two matrices using multiplications. find the asymptotic efficiency of pan's algorithm you may ignore additions and compare it with that of strassen's algorithm. . practical implementations of strassen's algorithm usually switch to the bruteforce method after matrix sizes become smaller than some crossover point. run an experiment to determine such a crossover point on your computer system. 