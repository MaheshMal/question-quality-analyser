the two most important elementary data structures are the array and the linked list. a one dimensional array is a sequence of n items of the same data type that are stored contiguously in computer memory and made accessible by specifying a value of the array's index figure . . in the majority of cases the index is an integer either between and n as shown in figure . or between and n. some computer languages allow an array index to range between any two integer bounds low and high and some even permit nonnumerical indices to specify for example data items corresponding to the months of the year by the month names. each and every element of an array can be accessed in the same constant amount of time regardless of where in the array the element in question is located. this feature positively distinguishes arrays from linked lists discussed below. arrays are used for implementing a variety of other data structures. prominent among them is the string a sequence of characters from an alphabet terminated by a special character indicating the string's end. strings composed of zeros and ones are called binary strings or bit strings. strings are indispensable for processing textual data defining computer languages and compiling programs written in them and studying abstract computational models. operations we usually perform on strings differ from those we typically perform on other arrays say arrays of numbers . they include computing the string length comparing two strings to determine which one precedes the other in lexicographic i.e. alphabetical order and concatenating two strings forming one string from two given strings by appending the second to the end of the first . a linked list is a sequence of zero or more elements called nodes each containing two kinds of information some data and one or more links called pointers to other nodes of the linked list. a special pointer called null is used to indicate the absence of a node's successor. in a singly linked list each node except the last one contains a single pointer to the next element figure . . to access a particular node of a linked list one starts with the list's first node and traverses the pointer chain until the particular node is reached. thus the time needed to access an element of a singly linked list unlike that of an array depends on where in the list the element is located. on the positive side linked lists do item item item n figure . array of n elements. item item item n null figure . singly linked list of n elements. null item item item n null figure . doubly linked list of n elements. not require any preliminary reservation of the computer memory and insertions and deletions can be made quite efficiently in a linked list by reconnecting a few appropriate pointers. we can exploit flexibility of the linked list structure in a variety of ways. for example it is often convenient to start a linked list with a special node called the header. this node may contain information about the linked list itself such as its current length it may also contain in addition to a pointer to the first element a pointer to the linked list's last element. another extension is the structure called the doubly linked list in which every node except the first and the last contains pointers to both its successor and its predecessor figure . . the array and linked list are two principal choices in representing a more abstract data structure called a linear list or simply a list. a list is a finite sequence of data items i.e. a collection of data items arranged in a certain linear order. the basic operations performed on this data structure are searching for inserting and deleting an element. two special types of lists stacks and queues are particularly important. a stack is a list in which insertions and deletions can be done only at the end. this end is called the top because a stack is usually visualized not horizontally but vertically akin to a stack of plates whose operations it mimics very closely. as a result when elements are added to pushed onto a stack and deleted from popped off it the structure operates in a last in first out lifo fashion exactly like a stack of plates if we can add or remove a plate only from the top. stacks have a multitude of applications in particular they are indispensable for implementing recursive algorithms. a queue on the other hand is a list from which elements are deleted from one end of the structure called the front this operation is called dequeue and new elements are added to the other end called the rear this operation is called enqueue . consequently a queue operates in a first in first out fifo fashion akin to a queue of customers served by a single teller in a bank. queues also have many important applications including several algorithms for graph problems. many important applications require selection of an item of the highest priority among a dynamically changing set of candidates. a data structure that seeks to satisfy the needs of such applications is called a priority queue. a priority queue is a collection of data items from a totally ordered universe most often integer or real numbers . the principal operations on a priority queue are finding its largest element deleting its largest element and adding a new element. of course a priority queue must be implemented so that the last two operations yield another priority queue. straightforward implementations of this data structure can be based on either an array or a sorted array but neither of these options yields the most efficient solution possible. a better implementation of a priority queue is based on an ingenious data structure called the heap. we discuss heaps and an important sorting algorithm based on them in section . . 