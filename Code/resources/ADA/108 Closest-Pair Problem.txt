the closest pair problem calls for finding the two closest points in a set of n points. it is the simplest of a variety of problems in computational geometry that deals with proximity of points in the plane or higher dimensional spaces. points in question can represent such physical objects as airplanes or post offices as well as database records statistical samples dna sequences and so on. an air traffic controller might be interested in two closest planes as the most probable collision candidates. a regional postal service manager might need a solution to the closestpair problem to find candidate post office locations to be closed. one of the important applications of the closest pair problem is cluster analysis in statistics. based on n data points hierarchical cluster analysis seeks to organize them in a hierarchy of clusters based on some similarity metric. for numerical data this metric is usually the euclidean distance for text and other nonnumerical data metrics such as the hamming distance see problem in this section's exercises are used. a bottom up algorithm begins with each element as a separate cluster and merges them into successively larger clusters by combining the closest pair of clusters. for simplicity we consider the two dimensional case of the closest pair problem. we assume that the points in question are specified in a standard fashion by their x y cartesian coordinates and that the distance between two points pi xi yi and pj xj yj is the standard euclidean distance d pi pj xi xj yi yj . the brute force approach to solving this problem leads to the following obvious algorithm compute the distance between each pair of distinct points and find a pair with the smallest distance. of course we do not want to compute the distance between the same pair of points twice. to avoid doing so we consider only the pairs of points pi pj for which i j . pseudocode below computes the distance between the two closest points getting the closest points themselves requires just a trivial modification. algorithm bruteforceclosestpair p finds distance between two closest points in the plane by brute force input a list p of n n points p x y . . . pn xn yn output the distance between the closest pair of points d for i to n do for j i to n do d min d sqrt xi xj yi yj sqrt is square root return d the basic operation of the algorithm is computing the square root. in the age of electronic calculators with a square root button one might be led to believe that computing the square root is as simple an operation as say addition or multiplication. of course it is not. for starters even for most integers square roots are irrational numbers that therefore can be found only approximately. moreover computing such approximations is not a trivial matter. but in fact computing square roots in the loop can be avoided! can you think how? the trick is to realize that we can simply ignore the square root function and compare the values xi xj yi yj themselves. we can do this because the smaller a number of which we take the square root the smaller its square root or as mathematicians say the square root function is strictly increasing. then the basic operation of the algorithm will be squaring a number. the number of times it will be executed can be computed as follows n n n c n n i i j i i n n . . . n n n . of course speeding up the innermost loop of the algorithm could only decrease the algorithm's running time by a constant factor see problem in this section's exercises but it cannot improve its asymptotic efficiency class. in chapter we discuss a linearithmic algorithm for this problem which is based on a more sophisticated design technique. 