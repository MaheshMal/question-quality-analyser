in this section we consider the single source shortest paths problem for a given vertex called the source in a weighted connected graph find shortest paths to all its other vertices. it is important to stress that we are not interested here in a single shortest path that starts at the source and visits all the other vertices. this would have been a much more difficult problem actually a version of the traveling salesman problem introduced in section . and discussed again later in the book . the single source shortest paths problem asks for a family of paths each leading from the source to a different vertex in the graph though some paths may of course have edges in common. a variety of practical applications of the shortest paths problem have made the problem a very popular object of study. the obvious but probably most widely used applications are transportation planning and packet routing in communication networks including the internet. multitudes of less obvious applications include finding shortest paths in social networks speech recognition document formatting robotics compilers and airline crew scheduling. in the world of entertainment one can mention pathfinding in video games and finding best solutions to puzzles using their state space graphs see section . for a very simple example of the latter . there are several well known algorithms for finding shortest paths including floyd's algorithm for the more general all pairs shortest paths problem discussed in chapter . here we consider the best known algorithm for the single source shortest paths problem called dijkstra's algorithm. this algorithm is applicable to undirected and directed graphs with nonnegative weights only. since in most applications this condition is satisfied the limitation has not impaired the popularity of dijkstra's algorithm. dijkstra's algorithm finds the shortest paths to a graph's vertices in order of their distance from a given source. first it finds the shortest path from the source . edsger w. dijkstra a noted dutch pioneer of the science and industry of computing discovered this algorithm in the mid s. dijkstra said about his algorithm this was the first graph problem i ever posed myself and solved. the amazing thing was that i didn't publish it. it was not amazing at the time. at the time algorithms were hardly considered a scientific topic. u v v figure . idea of dijkstra's algorithm. the subtree of the shortest paths already found is shown in bold. the next nearest to the source v vertex u is selected by comparing the lengths of the subtree's paths increased by the distances to vertices adjacent to the subtree's vertices. to a vertex nearest to it then to a second nearest and so on. in general before its ith iteration commences the algorithm has already identified the shortest paths to i other vertices nearest to the source. these vertices the source and the edges of the shortest paths leading to them from the source form a subtree ti of the given graph figure . . since all the edge weights are nonnegative the next vertex nearest to the source can be found among the vertices adjacent to the vertices of ti. the set of vertices adjacent to the vertices in ti can be referred to as fringe vertices they are the candidates from which dijkstra's algorithm selects the next vertex nearest to the source. actually all the other vertices can be treated as fringe vertices connected to tree vertices by edges of infinitely large weights. to identify the ith nearest vertex the algorithm computes for every fringe vertex u the sum of the distance to the nearest tree vertex v given by the weight of the edge v u and the length dv of the shortest path from the source to v previously determined by the algorithm and then selects the vertex with the smallest such sum. the fact that it suffices to compare the lengths of such special paths is the central insight of dijkstra's algorithm. to facilitate the algorithm's operations we label each vertex with two labels. the numeric label d indicates the length of the shortest path from the source to this vertex found by the algorithm so far when a vertex is added to the tree d indicates the length of the shortest path from the source to that vertex. the other label indicates the name of the next to last vertex on such a path i.e. the parent of the vertex in the tree being constructed. it can be left unspecified for the source s and vertices that are adjacent to none of the current tree vertices. with such labeling finding the next nearest vertex u becomes a simple task of finding a fringe vertex with the smallest d value. ties can be broken arbitrarily. after we have identified a vertex u to be added to the tree we need to perform two operations move u from the fringe to the set of tree vertices. for each remaining fringe vertex u that is connected to u by an edge of weight w u u such that du w u u du update the labels of u by u and du w u u respectively. figure . demonstrates the application of dijkstra's algorithm to a specific graph. the labeling and mechanics of dijkstra's algorithm are quite similar to those used by prim's algorithm see section . . both of them construct an expanding subtree of vertices by selecting the next vertex from the priority queue of the remaining vertices. it is important not to mix them up however. they solve different problems and therefore operate with priorities computed in a different manner dijkstra's algorithm compares path lengths and therefore must add edge weights while prim's algorithm compares the edge weights as given. now we can give pseudocode of dijkstra's algorithm. it is spelled out in more detail than prim's algorithm was in section . in terms of explicit operations on two sets of labeled vertices the set vt of vertices for which a shortest path has already been found and the priority queue q of the fringe vertices. note that in the following pseudocode vt contains a given source vertex and the fringe contains the vertices adjacent to it after iteration is completed. algorithm dijkstra g s dijkstra's algorithm for single source shortest paths input a weighted connected graph g v e with nonnegative weights and its vertex s output the length dv of a shortest path from s to v and its penultimate vertex pv for every vertex v in v initialize q initialize priority queue to empty for every vertex v in v dv pv null insert q v dv initialize vertex priority in the priority queue ds decrease q s ds update priority of s with ds vt for i to v do u deletemin q delete the minimum priority element vt vt u for every vertex u in v vt that is adjacent to u do if du w u u du du du w u u pu u decrease q u du the time efficiency of dijkstra's algorithm depends on the data structures used for implementing the priority queue and for representing an input graph itself. for the reasons explained in the analysis of prim's algorithm in section . it is b c a d e tree vertices remaining vertices illustration a b a c d a e b c a d e b a c b d b e b c a d e d b c b e d b c a d e c b e d b c a d e e d the shortest paths identified by following nonnumeric labels backward from a destination vertex in the left column to the source and their lengths given by numeric labels of the tree vertices are as follows from a to b a b of length from a to d a b d of length from a to c a b c of length from a to e a b d e of length figure . application of dijkstra's algorithm. the next closest vertex is shown in bold. in v for graphs represented by their weight matrix and the priority queue implemented as an unordered array. for graphs represented by their adjacency lists and the priority queue implemented as a min heap it is in o e log v . a still better upper bound can be achieved for both prim's and dijkstra's algorithms if the priority queue is implemented using a sophisticated data structure called the fibonacci heap e.g. cor . however its complexity and a considerable overhead make such an improvement primarily of theoretical value. exercises . . explain what adjustments if any need to be made in dijkstra's algorithm and or in an underlying graph to solve the following problems. a. solve the single source shortest paths problem for directed weighted graphs. b. find a shortest path between two given vertices of a weighted graph or digraph. this variation is called the single pair shortest path problem. c. find the shortest paths to a given vertex from each other vertex of a weighted graph or digraph. this variation is called the single destination shortest paths problem. d. solve the single source shortest paths problem in a graph with nonnegative numbers assigned to its vertices and the length of a path defined as the sum of the vertex numbers on the path . . solve the following instances of the single source shortest paths problem with vertex a as the source a. b c a d e b. a b c d e f g h i j k l . give a counterexample that shows that dijkstra's algorithm may not work for a weighted connected graph with negative weights. . let t be a tree constructed by dijkstra's algorithm in the process of solving the single source shortest paths problem for a weighted connected graph g. a. true or false t is a spanning tree of g? b. true or false t is a minimum spanning tree of g? . write pseudocode for a simpler version of dijkstra's algorithm that finds only the distances i.e. the lengths of shortest paths but not shortest paths themselves from a given vertex to all other vertices of a graph represented by its weight matrix. . prove the correctness of dijkstra's algorithm for graphs with positive weights. . design a linear time algorithm for solving the single source shortest paths problem for dags directed acyclic graphs represented by their adjacency lists. . explain how the minimum sum descent problem problem in exercises . can be solved by dijkstra's algorithm. . shortest path modeling assume you have a model of a weighted connected graph made of balls representing the vertices connected by strings of appropriate lengths representing the edges . a. describe how you can solve the single pair shortest path problem with this model. b. describe how you can solve the single source shortest paths problem with this model. . revisit the exercise from section . about determining the best route for a subway passenger to take from one designated station to another in a welldeveloped subway system like those in washington dc or london uk. write a program for this task. 