the notion of a set plays a central role in mathematics. a set can be described as an unordered collection possibly empty of distinct items called elements of the a null a b null d e null b c null g null null f null c d null h null i null h g e i f a b figure . a first child next sibling representation of the tree in figure . b. b its binary tree representation. set. a specific set is defined either by an explicit listing of its elements e.g. s or by specifying a property that all the set's elements and only they must satisfy e.g. s n n is a prime number smaller than . the most important set operations are checking membership of a given item in a given set finding the union of two sets which comprises all the elements in either or both of them and finding the intersection of two sets which comprises all the common elements in the sets. sets can be implemented in computer applications in two ways. the first considers only sets that are subsets of some large set u called the universal set. if set u has n elements then any subset s of u can be represented by a bit string of size n called a bit vector in which the ith element is if and only if the ith element of u is included in set s. thus to continue with our example if u then s is represented by the bit string . this way of representing sets makes it possible to implement the standard set operations very fast but at the expense of potentially using a large amount of storage. the second and more common way to represent a set for computing purposes is to use the list structure to indicate the set's elements. of course this option too is feasible only for finite sets fortunately unlike mathematics this is the kind of sets most computer applications need. note however the two principal points of distinction between sets and lists. first a set cannot contain identical elements a list can. this requirement for uniqueness is sometimes circumvented by the introduction of a multiset or bag an unordered collection of items that are not necessarily distinct. second a set is an unordered collection of items therefore changing the order of its elements does not change the set. a list defined as an ordered collection of items is exactly the opposite. this is an important theoretical distinction but fortunately it is not important for many applications. it is also worth mentioning that if a set is represented by a list depending on the application at hand it might be worth maintaining the list in a sorted order. in computing the operations we need to perform for a set or a multiset most often are searching for a given item adding a new item and deleting an item from the collection. a data structure that implements these three operations is called the dictionary. note the relationship between this data structure and the problem of searching mentioned in section . obviously we are dealing here with searching in a dynamic context. consequently an efficient implementation of a dictionary has to strike a compromise between the efficiency of searching and the efficiencies of the other two operations. there are quite a few ways a dictionary can be implemented. they range from an unsophisticated use of arrays sorted or not to much more sophisticated techniques such as hashing and balanced search trees which we discuss later in the book. a number of applications in computing require a dynamic partition of some n element set into a collection of disjoint subsets. after being initialized as a collection of n one element subsets the collection is subjected to a sequence of intermixed union and search operations. this problem is called the set union problem. we discuss efficient algorithmic solutions to this problem in section . in conjunction with one of its important applications. you may have noticed that in our review of basic data structures we almost always mentioned specific operations that are typically performed for the structure in question. this intimate relationship between the data and operations has been recognized by computer scientists for a long time. it has led them in particular to the idea of an abstract data type adt a set of abstract objects representing data items with a collection of operations that can be performed on them. as illustrations of this notion reread say our definitions of the priority queue and dictionary. although abstract data types could be implemented in older procedural languages such as pascal see e.g. aho it is much more convenient to do this in object oriented languages such as c and java which support abstract data types by means of classes. exercises . . describe how one can implement each of the following operations on an array so that the time it takes does not depend on the array's size n. a. delete the ith element of an array i n . b. delete the ith element of a sorted array the remaining array has to stay sorted of course . . if you have to solve the searching problem for a list of n numbers how can you take advantage of the fact that the list is known to be sorted? give separate answers for a. lists represented as arrays. b. lists represented as linked lists. . a. show the stack after each operation of the following sequence that starts with the empty stack push a push b pop push c push d pop b. show the queue after each operation of the following sequence that starts with the empty queue enqueue a enqueue b dequeue enqueue c enqueue d dequeue . a. let a be the adjacency matrix of an undirected graph. explain what property of the matrix indicates that i. the graph is complete. ii. the graph has a loop i.e. an edge connecting a vertex to itself. iii. the graph has an isolated vertex i.e. a vertex with no edges incident to it. b. answer the same questions for the adjacency list representation. . give a detailed description of an algorithm for transforming a free tree into a tree rooted at a given vertex of the free tree. . prove the inequalities that bracket the height of a binary tree with n vertices log n h n . . indicate how the adt priority queue can be implemented as a. an unsorted array. b. a sorted array. c. a binary search tree. . how would you implement a dictionary of a reasonably small size n if you knew that all its elements are distinct e.g. names of the states of the united states ? specify an implementation of each dictionary operation. . for each of the following applications indicate the most appropriate data structure a. answering telephone calls in the order of their known priorities b. sending backlog orders to customers in the order they have been received c. implementing a calculator for computing simple arithmetical expressions . anagram checking design an algorithm for checking whether two given words are anagrams i.e. whether one word can be obtained by permuting the letters of the other. for example the words tea and eat are anagrams. summary an algorithm is a sequence of nonambiguous instructions for solving a problem in a finite amount of time. an input to an algorithm specifies an instance of the problem the algorithm solves. algorithms can be specified in a natural language or pseudocode they can also be implemented as computer programs. among several ways to classify algorithms the two principal alternatives are . to group algorithms according to types of problems they solve . to group algorithms according to underlying design techniques they are based upon the important problem types are sorting searching string processing graph problems combinatorial problems geometric problems and numerical problems. algorithm design techniques or strategies or paradigms are general approaches to solving problems algorithmically applicable to a variety of problems from different areas of computing. although designing an algorithm is undoubtedly a creative activity one can identify a sequence of interrelated actions involved in such a process. they are summarized in figure . . a good algorithm is usually the result of repeated efforts and rework. the same problem can often be solved by several algorithms. for example three algorithms were given for computing the greatest common divisor of two integers euclid's algorithm the consecutive integer checking algorithm and the middle school method enhanced by the sieve of eratosthenes for generating a list of primes. algorithms operate on data. this makes the issue of data structuring critical for efficient algorithmic problem solving. the most important elementary data structures are the array and the linked list. they are used for representing more abstract data structures such as the list the stack the queue the graph via its adjacency matrix or adjacency lists the binary tree and the set. an abstract collection of objects with several operations that can be performed on them is called an abstract data type adt . the list the stack the queue the priority queue and the dictionary are important examples of abstract data types. modern object oriented languages support implementation of adts by means of classes. 