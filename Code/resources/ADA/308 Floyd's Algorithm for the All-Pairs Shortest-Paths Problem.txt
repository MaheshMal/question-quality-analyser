given a weighted connected graph undirected or directed the all pairs shortestpaths problem asks to find the distances i.e. the lengths of the shortest paths from each vertex to all other vertices. this is one of several variations of the problem involving shortest paths in graphs. because of its important applications to communications transportation networks and operations research it has been thoroughly studied over the years. among recent applications of the all pairs shortest path problem is precomputing distances for motion planning in computer games. it is convenient to record the lengths of shortest paths in an n n matrix d called the distance matrix the element dij in the ith row and the j th column of this matrix indicates the length of the shortest path from the ith vertex to the j th vertex. for an example see figure . . we can generate the distance matrix with an algorithm that is very similar to warshall's algorithm. it is called floyd's algorithm after its co inventor robert w. floyd. it is applicable to both undirected and directed weighted graphs provided . floyd explicitly referenced warshall's paper in presenting his algorithm flo . three years earlier bernard roy published essentially the same algorithm in the proceedings of the french academy of sciences roy . that they do not contain a cycle of a negative length. the distance between any two vertices in such a cycle can be made arbitrarily small by repeating the cycle enough times. the algorithm can be enhanced to find not only the lengths of the shortest paths for all vertex pairs but also the shortest paths themselves problem in this section's exercises . floyd's algorithm computes the distance matrix of a weighted graph with n vertices through a series of n n matrices d . . . d k d k . . . d n . . each of these matrices contains the lengths of shortest paths with certain constraints on the paths considered for the matrix in question. specifically the element di jk in the ith row and the j th column of matrix d k i j . . . n k . . . n is equal to the length of the shortest path among all paths from the ith vertex to the j th vertex with each intermediate vertex if any numbered not higher than k. in particular the series starts with d which does not allow any intermediate vertices in its paths hence d is simply the weight matrix of the graph. the last matrix in the series d n contains the lengths of the shortest paths among all paths that can use all n vertices as intermediate and hence is nothing other than the distance matrix being sought. as in warshall's algorithm we can compute all the elements of each matrix d k from its immediate predecessor d k in series . . let di jk be the element in the ith row and the j th column of matrix d k . this means that di jk is equal to the length of the shortest path among all paths from the ith vertex vi to the j th vertex vj with their intermediate vertices numbered not higher than k vi a list of intermediate vertices each numbered not higher than k vj . . we can partition all such paths into two disjoint subsets those that do not use the kth vertex vk as intermediate and those that do. since the paths of the first subset have their intermediate vertices numbered not higher than k the shortest of them is by definition of our matrices of length di jk . what is the length of the shortest path in the second subset? if the graph does not contain a cycle of a negative length we can limit our attention only to the paths in the second subset that use vertex vk as their intermediate vertex exactly once because visiting vk more than once can only increase the path's length . all such paths have the following form vi vertices numbered k vk vertices numbered k vj . in other words each of the paths is made up of a path from vi to vk with each intermediate vertex numbered not higher than k and a path from vk to vj with each intermediate vertex numbered not higher than k . the situation is depicted symbolically in figure . . since the length of the shortest path from vi to vk among the paths that use intermediate vertices numbered not higher than k is equal to di kk and the length of the shortest path from vk to vj among the paths that use intermediate d k ij vi vj di kk dk kj vk figure . underlying idea of floyd's algorithm. vertices numbered not higher than k is equal to dk jk the length of the shortest path among the paths that use the kth vertex is equal to di kk dk jk . taking into account the lengths of the shortest paths in both subsets leads to the following recurrence di jk min di jk di kk dk jk for k di j wij . . to put it another way the element in row i and column j of the current distance matrix d k is replaced by the sum of the elements in the same row i and the column k and in the same column j and the row k if and only if the latter sum is smaller than its current value. the application of floyd's algorithm to the graph in figure . is illustrated in figure . . here is pseudocode of floyd's algorithm. it takes advantage of the fact that the next matrix in sequence . can be written over its predecessor. algorithm floyd w ..n ..n implements floyd's algorithm for the all pairs shortest paths problem input the weight matrix w of a graph with no negative length cycle output the distance matrix of the shortest paths' lengths dw is not necessary if w can be overwritten for k to n do for i to n do for j to n do d i j min d i j d i k d k j return d obviously the time efficiency of floyd's algorithm is cubic as is the time efficiency of warshall's algorithm. in the next chapter we examine dijkstra's algorithm another method for finding shortest paths. a b a b c d a lengths of the shortest paths d b with no intermediate vertices c d is simply the weight matrix . c d d a b c d a lengths of the shortest paths b with intermediate vertices numbered d c not higher than i.e. just a d note two new shortest paths from b to c and from d to c . a b c d a lengths of the shortest paths d b with intermediate vertices numbered c not higher than i.e. a and b d note a new shortest path from c to a . a b c d a lengths of the shortest paths b with intermediate vertices numbered d c not higher than i.e. a b and c d note four new shortest paths from a to b from a to d from b to d and from d to b . a b c d a lengths of the shortest paths b with intermediate vertices numbered d c not higher than i.e. a b c and d d note a new shortest path from c to a . figure . application of floyd's algorithm to the digraph shown. updated elements are shown in bold. exercises . . apply warshall's algorithm to find the transitive closure of the digraph defined by the following adjacency matrix . a. prove that the time efficiency of warshall's algorithm is cubic. b. explain why the time efficiency class of warshall's algorithm is inferior to that of the traversal based algorithm for sparse graphs represented by their adjacency lists. . explain how to implement warshall's algorithm without using extra memory for storing elements of the algorithm's intermediate matrices. . explain how to restructure the innermost loop of the algorithm warshall to make it run faster at least on some inputs. . rewrite pseudocode of warshall's algorithm assuming that the matrix rows are represented by bit strings on which the bitwise or operation can be performed. . a. explain how warshall's algorithm can be used to determine whether a given digraph is a dag directed acyclic graph . is it a good algorithm for this problem? b. is it a good idea to apply warshall's algorithm to find the transitive closure of an undirected graph? . solve the all pairs shortest path problem for the digraph with the following weight matrix . prove that the next matrix in sequence . of floyd's algorithm can be written over its predecessor. . give an example of a graph or a digraph with negative weights for which floyd's algorithm does not yield the correct result. . enhance floyd's algorithm so that shortest paths themselves not just their lengths can be found. . jack straws in the game of jack straws a number of plastic or wooden straws are dumped on the table and players try to remove them one by one without disturbing the other straws. here we are only concerned with whether various pairs of straws are connected by a path of touching straws. given a list of the endpoints for n straws as if they were dumped on a large piece of graph paper determine all the pairs of straws that are connected. note that touching is connecting but also that two straws can be connected indirectly via other connected straws. east central regionals of the acm international collegiate programming contest summary dynamic programming is a technique for solving problems with overlapping subproblems. typically these subproblems arise from a recurrence relating a solution to a given problem with solutions to its smaller subproblems of the same type. dynamic programming suggests solving each smaller subproblem once and recording the results in a table from which a solution to the original problem can be then obtained. applicability of dynamic programming to an optimization problem requires the problem to satisfy the principle of optimality an optimal solution to any of its instances must be made up of optimal solutions to its subinstances. among many other problems the change making problem with arbitrary coin denominations can be solved by dynamic programming. solving a knapsack problem by a dynamic programming algorithm exemplifies an application of this technique to difficult problems of combinatorial optimization. the memory function technique seeks to combine the strengths of the topdown and bottom up approaches to solving problems with overlapping subproblems. it does this by solving in the top down fashion but only once just the necessary subproblems of a given problem and recording their solutions in a table. dynamic programming can be used for constructing an optimal binary search tree for a given set of keys and known probabilities of searching for them. warshall's algorithm for finding the transitive closure and floyd's algorithm for the all pairs shortest paths problem are based on the idea that can be interpreted as an application of the dynamic programming technique. 