as our last example we consider the subset sum problem find a subset of a given set a a . . . an of n positive integers whose sum is equal to a given positive integer d. for example for a and d there are two solutions and . of course some instances of this problem may have no solutions. it is convenient to sort the set's elements in increasing order. so we will assume that a a . . . an. with w o with w o with w o with w o with w o with w o with w o solution figure . complete state space tree of the backtracking algorithm applied to the instance a and d of the subset sum problem. the number inside a node is the sum of the elements already included in the subsets represented by the node. the inequality below a leaf indicates the reason for its termination. the state space tree can be constructed as a binary tree like that in figure . for the instance a and d . the root of the tree represents the starting point with no decisions about the given elements made as yet. its left and right children represent respectively inclusion and exclusion of a in a set being sought. similarly going to the left from a node of the first level corresponds to inclusion of a while going to the right corresponds to its exclusion and so on. thus a path from the root to a node on the ith level of the tree indicates which of the first i numbers have been included in the subsets represented by that node. we record the value of s the sum of these numbers in the node. if s is equal to d we have a solution to the problem. we can either report this result and stop or if all the solutions need to be found continue by backtracking to the node's parent. if s is not equal to d we can terminate the node as nonpromising if either of the following two inequalities holds s ai d the sum s is too large n s aj d the sum s is too small . j i 