in this section we see how the technique of input enhancement can be applied to the problem of string matching. recall that the problem of string matching requires finding an occurrence of a given string of m characters called the pattern in a longer string of n characters called the text. we discussed the brute force algorithm for this problem in section . it simply matches corresponding pairs of characters in the pattern and the text left to right and if a mismatch occurs shifts the pattern one position to the right for the next trial. since the maximum number of such trials is n m and in the worst case m comparisons need to be made on each of them the worst case efficiency of the brute force algorithm is in the o nm class. on average however we should expect just a few comparisons before a pattern's shift and for random natural language texts the average case efficiency indeed turns out to be in o n m . several faster algorithms have been discovered. most of them exploit the input enhancement idea preprocess the pattern to get some information about it store this information in a table and then use this information during an actual search for the pattern in a given text. this is exactly the idea behind the two bestknown algorithms of this type the knuth morris pratt algorithm knu and the boyer moore algorithm boy . the principal difference between these two algorithms lies in the way they compare characters of a pattern with their counterparts in a text the knuthmorris pratt algorithm does it left to right whereas the boyer moore algorithm does it right to left. since the latter idea leads to simpler algorithms it is the only one that we will pursue here. note that the boyer moore algorithm starts by aligning the pattern against the beginning characters of the text if the first trial fails it shifts the pattern to the right. it is comparisons within a trial that the algorithm does right to left starting with the last character in the pattern. although the underlying idea of the boyer moore algorithm is simple its actual implementation in a working method is less so. therefore we start our discussion with a simplified version of the boyer moore algorithm suggested by r. horspool hor . in addition to being simpler horspool's algorithm is not necessarily less efficient than the boyer moore algorithm on random strings. 