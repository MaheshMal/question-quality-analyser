we solved the traveling salesman problem by exhaustive search in section . mentioned its decision version as one of the most well known np complete problems in section . and saw how its instances can be solved by a branchand bound algorithm in section . . here we consider several approximation algorithms a small sample of dozens of such algorithms suggested over the years for this famous problem. for a much more detailed discussion of the topic see law hoc app and gut . but first let us answer the question of whether we should hope to find a polynomial time approximation algorithm with a finite performance ratio on all instances of the traveling salesman problem. as the following theorem sah shows the answer turns out to be no unless p n p . theorem if p np there exists no c approximation algorithm for the traveling salesman problem i.e. there exists no polynomial time approximation algorithm for this problem so that for all instances f sa cf s for some constant c. proof by way of contradiction suppose that such an approximation algorithm a and a constant c exist. without loss of generality we can assume that c is a positive integer. we will show that this algorithm could then be used for solving the hamiltonian circuit problem in polynomial time. we will take advantage of a variation of the transformation used in section . to reduce the hamiltonian circuit problem to the traveling salesman problem. let g be an arbitrary graph with n vertices. we map g to a complete weighted graph g by assigning weight to each edge in g and adding an edge of weight cn between each pair of vertices not adjacent in g. if g has a hamiltonian circuit its length in g is n hence it is the exact solution s to the traveling salesman problem for g . note that if sa is an approximate solution obtained for g by algorithm a then f sa cn by the assumption. if g does not have a hamiltonian circuit in g the shortest tour in g will contain at least one edge of weight cn and hence f sa f s cn. taking into account the two derived inequalities we could solve the hamiltonian circuit problem for graph g in polynomial time by mapping g to g applying algorithm a to get tour sa in g and comparing its length with cn. since the hamiltonian circuit problem is np complete we have a contradiction unless p np. greedy algorithms for the tsp the simplest approximation algorithms for the traveling salesman problem are based on the greedy technique. we will discuss here two such algorithms. nearest neighbor algorithm the following well known greedy algorithm is based on the nearest neighbor heuristic always go next to the nearest unvisited city. step choose an arbitrary city as the start. step repeat the following operation until all the cities have been visited go to the unvisited city nearest the one visited last ties can be broken arbitrarily . step return to the starting city. example for the instance represented by the graph in figure . with a as the starting vertex the nearest neighbor algorithm yields the tour hamiltonian circuit sa a b c d a of length . a b d c figure . instance of the traveling salesman problem. the optimal solution as can be easily checked by exhaustive search is the tour s a b d c a of length . thus the accuracy ratio of this approximation is r sa f sa . f s i.e. tour sa is longer than the optimal tour s . unfortunately except for its simplicity not many good things can be said about the nearest neighbor algorithm. in particular nothing can be said in general about the accuracy of solutions obtained by this algorithm because it can force us to traverse a very long edge on the last leg of the tour. indeed if we change the weight of edge a d from to an arbitrary large number w in example the algorithm will still yield the tour a b c d a of length w and the optimal solution will still be a b d c a of length . hence r sa f sa w f s which can be made as large as we wish by choosing an appropriately large value of w. hence ra for this algorithm as it should be according to theorem . multifragment heuristic algorithm another natural greedy algorithm for the traveling salesman problem considers it as the problem of finding a minimum weight collection of edges in a given complete weighted graph so that all the vertices have degree . with this emphasis on edges rather than vertices what other greedy algorithm does it remind you of? an application of the greedy technique to this problem leads to the following algorithm ben . step sort the edges in increasing order of their weights. ties can be broken arbitrarily. initialize the set of tour edges to be constructed to the empty set. step repeat this step n times where n is the number of cities in the instance being solved add the next edge on the sorted edge list to the set of tour edges provided this addition does not create a vertex of degree or a cycle of length less than n otherwise skip the edge. step return the set of tour edges. as an example applying the algorithm to the graph in figure . yields a b c d b c a d . this set of edges forms the same tour as the one produced by the nearest neighbor algorithm. in general the multifragment heuristic algorithm tends to produce significantly better tours than the nearest neighbor algorithm as we are going to see from the experimental data quoted at the end of this section. but the performance ratio of the multifragment heuristic algorithm is also unbounded of course. there is however a very important subset of instances called euclidean for which we can make a nontrivial assertion about the accuracy of both the nearestneighbor and multifragment heuristic algorithms. these are the instances in which intercity distances satisfy the following natural conditions triangle inequality d i j d i k d k j for any triple of cities i j and k the distance between cities i and j cannot exceed the length of a two leg path from i to some intermediate city k to j symmetry d i j d j i for any pair of cities i and j the distance from i to j is the same as the distance from j to i a substantial majority of practical applications of the traveling salesman problem are its euclidean instances. they include in particular geometric ones where cities correspond to points in the plane and distances are computed by the standard euclidean formula. although the performance ratios of the nearest neighbor and multifragment heuristic algorithms remain unbounded for euclidean instances their accuracy ratios satisfy the following inequality for any such instance with n cities f sa log n f s where f sa and f s are the lengths of the heuristic tour and shortest tour respectively see ros and ong . minimum spanning tree based algorithms there are approximation algorithms for the traveling salesman problem that exploit a connection between hamiltonian circuits and spanning trees of the same graph. since removing an edge from a hamiltonian circuit yields a spanning tree we can expect that the structure of a minimum spanning tree provides a good basis for constructing a shortest tour approximation. here is an algorithm that implements this idea in a rather straightforward fashion. twice around the tree algorithm step construct a minimum spanning tree of the graph corresponding to a given instance of the traveling salesman problem. step starting at an arbitrary vertex perform a walk around the minimum spanning tree recording all the vertices passed by. this can be done by a dfs traversal. step scan the vertex list obtained in step and eliminate from it all repeated occurrences of the same vertex except the starting one at the end of the list. this step is equivalent to making shortcuts in the walk. the vertices remaining on the list will form a hamiltonian circuit which is the output of the algorithm. example let us apply this algorithm to the graph in figure . a. the minimum spanning tree of this graph is made up of edges a b b c b d and d e figure . b . a twice around the tree walk that starts and ends at a is a e a e b d b d c c a b figure . illustration of the twice around the tree algorithm. a graph. b walk around the minimum spanning tree with the shortcuts. a b c b d e d b a. eliminating the second b a shortcut from c to d the second d and the third b a shortcut from e to a yields the hamiltonian circuit a b c d e a of length . the tour obtained in example is not optimal. although that instance is small enough to find an optimal solution by either exhaustive search or branch andbound we refrained from doing so to reiterate a general point. as a rule we do not know what the length of an optimal tour actually is and therefore we cannot compute the accuracy ratio f sa f s . for the twice around the tree algorithm we can at least estimate it above provided the graph is euclidean. theorem the twice around the tree algorithm is a approximation algorithm for the traveling salesman problem with euclidean distances. proof obviously the twice around the tree algorithm is polynomial time if we use a reasonable algorithm such as prim's or kruskal's in step . we need to show that for any euclidean instance of the traveling salesman problem the length of a tour sa obtained by the twice around the tree algorithm is at most twice the length of the optimal tour s i.e. f sa f s . since removing any edge from s yields a spanning tree t of weight w t which must be greater than or equal to the weight of the graph's minimum spanning tree w t we get the inequality f s w t w t . this inequality implies that f s w t the length of the walk obtained in step of the algorithm. the possible shortcuts outlined in step of the algorithm to obtain sa cannot increase the total length of the walk in a euclidean graph i.e. the length of the walk obtained in step the length of the tour sa. combining the last two inequalities we get the inequality f s f sa which is in fact a slightly stronger assertion than the one we needed to prove. christofides algorithm there is an approximation algorithm with a better performance ratio for the euclidean traveling salesman problem the well known christofides algorithm chr . it also uses a minimum spanning tree but does this in a more sophisticated way than the twice around the tree algorithm. note that a twice around the tree walk generated by the latter algorithm is an eulerian circuit in the multigraph obtained by doubling every edge in the graph given. recall that an eulerian circuit exists in a connected multigraph if and only if all its vertices have even degrees. the christofides algorithm obtains such a multigraph by adding to the graph the edges of a minimum weight matching of all the odd degree vertices in its minimum spanning tree. the number of such vertices is always even and hence this can always be done. then the algorithm finds an eulerian circuit in the multigraph and transforms it into a hamiltonian circuit by shortcuts exactly the same way it is done in the last step of the twice around thetree algorithm. example let us trace the christofides algorithm in figure . on the same instance figure . a used for tracing the twice around the tree algorithm in figure . . the graph's minimum spanning tree is shown in figure . b. it has four odd degree vertices a b c and e. the minimum weight matching of these four vertices consists of edges a b and c e . for this tiny instance it can be found easily by comparing the total weights of just three alternatives a b and c e a c and b e a e and b c . the traversal of the multigraph starting at vertex a produces the eulerian circuit a b c e d b a which after one shortcut yields the tour a b c e d a of length . the performance ratio of the christofides algorithm on euclidean instances is . see e.g. pap . it tends to produce significantly better approximations to optimal tours than the twice around the tree algorithm does in empirical tests. we quote some results of such tests at the end of this subsection. the quality of a tour obtained by this heuristic can be further improved by optimizing shortcuts made on the last step of the algorithm as follows examine the multiply visited cities in some arbitrary order and for each make the best possible shortcut. this a e b d c a a e a e b d b d c c b c figure . application of the christofides algorithm. a graph. b minimum spanning tree with added edges in dash of a minimum weight matching of all odd degree vertices. c hamiltonian circuit obtained. enhancement would have not improved the tour a b c e d a obtained in example from a b c e d b a because shortcutting the second occurrence of b happens to be better than shortcutting its first occurrence. in general however this enhancement tends to decrease the gap between the heuristic and optimal tour lengths from about to about at least for randomly generated euclidean instances joh a . local search heuristics for euclidean instances surprisingly good approximations to optimal tours can be obtained by iterative improvement algorithms which are also called local search heuristics. the best known of these are the opt opt and lin kernighan algorithms. these algorithms start with some initial tour e.g. constructed randomly or by some simpler approximation algorithm such as the nearest neighbor. on each iteration the algorithm explores a neighborhood around the current tour by replacing a few edges in the current tour by other edges. if the changes produce a shorter tour the algorithm makes it the current c c c c c c c c a b figure . change a original tour. b new tour. tour and continues by exploring its neighborhood in the same manner otherwise the current tour is returned as the algorithm's output and the algorithm stops. the opt algorithm works by deleting a pair of nonadjacent edges in a tour and reconnecting their endpoints by the different pair of edges to obtain another tour see figure . . this operation is called the change. note that there is only one way to reconnect the endpoints because the alternative produces two disjoint fragments. example if we start with the nearest neighbor tour a b c d e a in the graph of figure . whose length lnn is equal to the opt algorithm will move to the next tour as shown in figure . . to generalize the notion of the change one can consider the k change for any k . this operation replaces up to k edges in a current tour. in addition to changes only the changes have proved to be of practical interest. the two principal possibilities of changes are shown in figure . . there are several other local search algorithms for the traveling salesman problem. the most prominent of them is the lin kernighan algorithm lin which for two decades after its publication in was considered the best algorithm to obtain high quality approximations of optimal tours. the lin kernighan algorithm is a variable opt algorithm its move can be viewed as a opt move followed by a sequence of opt moves. because of its complexity we have to refrain from discussing this algorithm here. the excellent survey by johnson and mcgeoch joh a contains an outline of the algorithm and its modern extensions as well as methods for its efficient implementation. this survey also contain results from the important empirical studies about performance of many heuristics for the traveling salesman problem including of course the lin kernighan algorithm. we conclude our discussion by quoting some of these data. empirical results the traveling salesman problem has been the subject of intense study for the last years. this interest was driven by a combination of pure a e a e l lnn b d b d c c a e a e l lnn b d b d c c a e a e l lnn b d b d c c a e a e l lnn new tour b d b d c c figure . changes from the nearest neighbor tour of the graph in figure . . c c c c c c c c c c c c c c c c c c a b c figure . change a original tour. b c new tours. theoretical interest and serious practical needs stemming from such newer applications as circuit board and vlsi chip fabrication x ray crystallography and genetic engineering. progress in developing effective heuristics their efficient implementation by using sophisticated data structures and the ever increasing power of computers have led to a situation that differs drastically from a pessimistic picture painted by the worst case theoretical results. this is especially true for the most important applications class of instances of the traveling salesman problem points in the two dimensional plane with the standard euclidean distances between them. nowadays euclidean instances with up to cities can be solved exactly in quite a reasonable amount of time typically in minutes or faster on a good workstation by such optimization packages as concord app . in fact according to the information on the web site maintained by the authors of that package the largest instance of the traveling salesman problem solved exactly as of january was a tour through points in a vlsi application. it significantly exceeded the previous record of the shortest tour through all cities in sweden. there should be little doubt that the latest record will also be eventually superseded and our ability to solve ever larger instances exactly will continue to expand. this remarkable progress does not eliminate the usefulness of approximation algorithms for such problems however. first some applications lead to instances that are still too large to be solved exactly in a reasonable amount of time. second one may well prefer spending seconds to find a tour that is within a few percent of optimum than to spend many hours or even days of computing time to find the shortest tour exactly. but how can one tell how good or bad the approximate solution is if we do not know the length of an optimal tour? a convenient way to overcome this difficulty is to solve the linear programming problem describing the instance in question by ignoring the integrality constraints. this provides a lower bound called the heldkarp bound on the length of the shortest tour. the held karp bound is typically very close less than to the length of an optimal tour and this bound can be computed in seconds or minutes unless the instance is truly huge. thus for a tour table . average tour quality and running times for various heuristics on the city random uniform euclidean instances joh a excess over the running time heuristic held karp bound seconds nearest neighbor . . multifragment . . christofides . . opt . . opt . . lin kernighan . . sa obtained by some heuristic we estimate the accuracy ratio r sa f sa f s from above by the ratio f sa h k s where f sa is the length of the heuristic tour sa and h k s is the held karp lower bound on the shortest tour length. the results see table . from a large empirical study joh a indicate the average tour quality and running times for the discussed heuristics. the instances in the reported sample have cities generated randomly and uniformly as integral coordinate points in the plane with the euclidean distances rounded to the nearest integer. the quality of tours generated by the heuristics remain about the same for much larger instances up to a million cities as long as they belong to the same type of instances. the running times quoted are for expert implementations run on a compaq es with mhz alpha processors and gigabytes of main memory or its equivalents. asymmetric instances of the traveling salesman problem i.e. those with a nonsymmetic matrix of intercity distances have proved to be significantly harder to solve both exactly and approximately than euclidean instances. in particular exact optimal solutions for many city asymmetric instances remained unknown at the time of the state of the art survey by johnson et al. joh b . 