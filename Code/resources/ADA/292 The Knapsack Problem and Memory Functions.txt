we start this section with designing a dynamic programming algorithm for the knapsack problem given n items of known weights w . . . wn and values v . . . vn and a knapsack of capacity w find the most valuable subset of the items that fit into the knapsack. this problem was introduced in section . where we discussed solving it by exhaustive search. we assume here that all the weights and the knapsack capacity are positive integers the item values do not have to be integers. to design a dynamic programming algorithm we need to derive a recurrence relation that expresses a solution to an instance of the knapsack problem in terms of solutions to its smaller subinstances. let us consider an instance defined by the first i items i n with weights w . . . wi values v . . . vi and knapsack capacity j j w. let f i j be the value of an optimal solution to this instance i.e. the value of the most valuable subset of the first i items that fit into the knapsack of capacity j. we can divide all the subsets of the first i items that fit the knapsack of capacity j into two categories those that do not include the ith item and those that do. note the following . among the subsets that do not include the ith item the value of an optimal subset is by definition f i j . . among the subsets that do include the ith item hence j wi an optimal subset is made up of this item and an optimal subset of the first i items that fits into the knapsack of capacity j wi. the value of such an optimal subset is vi f i j wi . thus the value of an optimal solution among all feasible subsets of the first i items is the maximum of these two values. of course if the ith item does not fit into the knapsack the value of an optimal subset selected from the first i items is the same as the value of an optimal subset selected from the first i items. these observations lead to the following recurrence f i j max f i j vi f i j wi if j wi . f i j if j wi . it is convenient to define the initial conditions as follows f j for j and f i for i . . our goal is to find f n w the maximal value of a subset of the n given items that fit into the knapsack of capacity w and an optimal subset itself. figure . illustrates the values involved in equations . and . . for i j to compute the entry in the ith row and the j th column f i j we compute the maximum of the entry in the previous row and the same column and the sum of vi and the entry in the previous row and wi columns to the left. the table can be filled either row by row or column by column. j wi j w i f i j wi f i j wi vi i f i j n goal figure . table for solving the knapsack problem by dynamic programming. capacity j i w v w v w v w v figure . example of solving an instance of the knapsack problem by the dynamic programming algorithm. example let us consider the instance given by the following data item weight value capacity w . the dynamic programming table filled by applying formulas . and . is shown in figure . . thus the maximal value is f . we can find the composition of an optimal subset by backtracing the computations of this entry in the table. since f f item has to be included in an optimal solution along with an optimal subset for filling remaining units of the knapsack capacity. the value of the latter is f . since f f item need not be in an optimal subset. since f f item is a part of an optimal selection which leaves element f to specify its remaining composition. similarly since f f item is the final part of the optimal solution item item item . the time efficiency and space efficiency of this algorithm are both in nw . the time needed to find the composition of an optimal solution is in o n . you are asked to prove these assertions in the exercises. 