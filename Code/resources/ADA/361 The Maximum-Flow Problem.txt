in this section we consider the important problem of maximizing the flow of a material through a transportation network pipeline system communication system electrical distribution system and so on . we will assume that the transportation network in question can be represented by a connected weighted digraph with n vertices numbered from to n and a set of edges e with the following properties it contains exactly one vertex with no entering edges this vertex is called the source and assumed to be numbered . it contains exactly one vertex with no leaving edges this vertex is called the sink and assumed to be numbered n. the weight uij of each directed edge i j is a positive integer called the edge capacity. this number represents the upper bound on the amount of the material that can be sent from i to j through a link represented by this edge. a digraph satisfying these properties is called a flow network or simply a network. a small instance of a network is given in figure . . it is assumed that the source and the sink are the only source and destination of the material respectively all the other vertices can serve only as points where a flow can be redirected without consuming or adding any amount of the material. in other words the total amount of the material entering an intermediate vertex must be equal to the total amount of the material leaving the vertex. this condition is called the flow conservation requirement. if we denote the amount sent through edge i j by xij then for any intermediate vertex i the flow conservation requirement can be expressed by the following equality constraint xji xij for i . . . n . j j i e j i j e . in a slightly more general model one can consider a network with several sources and sinks and allow capacities uij to be infinitely large. figure . example of a network graph. the vertex numbers are vertex names the edge numbers are edge capacities. where the sums in the left and right hand sides express the total inflow and outflow entering and leaving vertex i respectively. since no amount of the material can change by going through intermediate vertices of the network it stands to reason that the total amount of the material leaving the source must end up at the sink. this observation can also be derived formally from equalities . a task you will be asked to do in the exercises. thus we have the following equality x j xj n. . j j e j j n e this quantity the total outflow from the source or equivalently the total inflow into the sink is called the value of the flow. we denote it by v. it is this quantity that we will want to maximize over all possible flows in a network. thus a feasible flow is an assignment of real numbers xij to edges i j of a given network that satisfy flow conservation constraints . and the capacity constraints xij uij for every edge i j e. . the maximum flow problem can be stated formally as the following optimization problem maximize v x j j j e subject to xji xij for i . . . n . j j i e j i j e xij uij for every edge i j e. we can solve linear programming problem . by the simplex method or by another algorithm for general linear programming problems see section . . however the special structure of problem . can be exploited to design faster algorithms. in particular it is quite natural to employ the iterative improvement idea as follows. we can always start with the zero flow i.e. set xij for every edge i j in the network . then on each iteration we can try to find a path from source to sink along which some additional flow can be sent. such a path is called flow augmenting. if a flow augmenting path is found we adjust the flow along the edges of this path to get a flow of an increased value and try to find an augmenting path for the new flow. if no flow augmenting path can be found we conclude that the current flow is optimal. this general template for solving the maximum flow problem is called the augmenting path method also known as the ford fulkerson method after l. r. ford jr. and d. r. fulkerson who discovered it see for . an actual implementation of the augmenting path idea is however not quite straightforward. to see this let us consider the network in figure . . we start with the zero flow shown in figure . a. in that figure the zero amounts sent through each edge are separated from the edge capacities by the slashes we will use this notation in the other examples as well. it is natural to search for a flowaugmenting path from source to sink by following directed edges i j for which the current flow xij is less than the edge capacity uij . among several possibilities let us assume that we identify the augmenting path first. we can increase the flow along this path by a maximum of units which is the smallest unused capacity of its edges. the new flow is shown in figure . b. this is as far as our simpleminded idea about flow augmenting paths will be able to take us. unfortunately the flow shown in figure . b is not optimal its value can still be increased along the path by increasing the flow by on edges and and decreasing it by on edge . the flow obtained as the result of this augmentation is shown in figure . c. it is indeed maximal. can you tell why? thus to find a flow augmenting path for a flow x we need to consider paths from source to sink in the underlying undirected graph in which any two consecutive vertices i j are either i. connected by a directed edge from i to j with some positive unused capacity rij uij xij so that we can increase the flow through that edge by up to rij units or ii. connected by a directed edge from j to i with some positive flow xji so that we can decrease the flow through that edge by up to xji units . edges of the first kind are called forward edges because their tail is listed before their head in the vertex list . . . i j . . . n defining the path edges of the second kind are called backward edges because their tail is listed after their head in the path list . . . i j . . . n. to illustrate for the path of the last example and are the forward edges and is the backward edge. for a given flow augmenting path let r be the minimum of all the unused capacities rij of its forward edges and all the flows xji of its backward edges. it is easy to see that if we increase the current flow by r on each forward edge and decrease it by this amount on each backward edge we will obtain a feasible a b c figure . illustration of the augmenting path method. flow augmenting paths are shown in bold. the flow amounts and edge capacities are indicated by the numbers before and after the slash respectively. flow whose value is r units greater than the value of its predecessor. indeed let i be an intermediate vertex on a flow augmenting path. there are four possible combinations of forward and backward edges incident to vertex i r i r r i r r i r r i r . for each of them the flow conservation requirement for vertex i will still hold after the flow adjustments indicated above the edge arrows. further since r is the minimum among all the positive unused capacities on the forward edges and all the positive flows on the backward edges of the flow augmenting path the new flow will satisfy the capacity constraints as well. finally adding r to the flow on the first edge of the augmenting path will increase the value of the flow by r. under the assumption that all the edge capacities are integers r will be a positive integer too. hence the flow value increases at least by on each iteration of the augmenting path method. since the value of a maximum flow is bounded above e.g. by the sum of the capacities of the source edges the augmenting path method has to stop after a finite number of iterations. surprisingly the final flow always turns out to be maximal irrespective of a sequence of augmenting paths. this remarkable result stems from the proof of the max flow min cut theorem see e.g. for which we replicate later in this section. the augmenting path method as described above in its general form does not indicate a specific way for generating flow augmenting paths. a bad sequence of such paths may however have a dramatic impact on the method's efficiency. consider for example the network in figure . a in which u stands for some large positive integer. if we augment the zero flow along the path we shall obtain the flow of value shown in figure . b. augmenting that flow along the path will increase the flow value to figure . c . if we continue selecting this pair of flow augmenting paths we will need a total of u iterations to reach the maximum flow of value u figure . d . of course we can obtain the maximum flow in just two iterations by augmenting the initial zero flow along the path followed by augmenting the new flow along the path . the dramatic difference between u and iterations makes the point. fortunately there are several ways to generate flow augmenting paths efficiently and avoid the degradation in performance illustrated by the previous example. the simplest of them uses breadth first search to generate augmenting paths with the least number of edges see section . . this version of the augmenting path method called shortest augmenting path or first labeled firstscanned algorithm was suggested by j. edmonds and r. m. karp edm . the labeling refers to marking a new unlabeled vertex with two labels. the first label indicates the amount of additional flow that can be brought from the source to the vertex being labeled. the second label is the name of the vertex from which the vertex being labeled was reached. it can be left undefined for the source. it is also convenient to add the or sign to the second label to indicate whether the vertex was reached via a forward or backward edge respectively. the source can be always labeled with . for the other vertices the labels are computed as follows. . if capacity upper bounds are irrational numbers the augmenting path method may not terminate see e.g. chv pp. for a cleverly devised example demonstrating such a situation . this limitation is only of theoretical interest because we cannot store irrational numbers in a computer and rational numbers can be transformed into integers by changing the capacity measurement unit. u u u u u u u u a b u u u u u u u u u u u u c d figure . efficiency degradation of the augmenting path method. if unlabeled vertex j is connected to the front vertex i of the traversal queue by a directed edge from i to j with positive unused capacity rij uij xij then vertex j is labeled with lj i where lj min li rij . if unlabeled vertex j is connected to the front vertex i of the traversal queue by a directed edge from j to i with positive flow xji then vertex j is labeled with lj i where lj min li xji . if this labeling enhanced traversal ends up labeling the sink the current flow can be augmented by the amount indicated by the sink's first label. the augmentation is performed along the augmenting path traced by following the vertex second labels from sink to source the current flow quantities are increased on the forward edges and decreased on the backward edges of this path. if on the other hand the sink remains unlabeled after the traversal queue becomes empty the algorithm returns the current flow as maximum and stops. algorithm shortestaugmentingpath g implements the shortest augmenting path algorithm input a network with single source single sink n and positive integer capacities uij on its edges i j output a maximum flow x assign xij to every edge i j in the network label the source with and add the source to the empty queue q while not empty q do i front q dequeue q for every edge from i to j do forward edges if j is unlabeled rij uij xij if rij lj min li rij label j with lj i enqueue q j for every edge from j to i do backward edges if j is unlabeled if xji lj min li xji label j with lj ienqueue q j if the sink has been labeled augment along the augmenting path found j n start at the sink and move backwards using second labels while j the source hasn't been reached if the second label of vertex j is i xij xij ln else the second label of vertex j is ixji xji ln j i i the vertex indicated by i's second label erase all vertex labels except the ones of the source reinitialize q with the source return x the current flow is maximum an application of this algorithm to the network in figure . is illustrated in figure . . the optimality of a final flow obtained by the augmenting path method stems from a theorem that relates network flows to network cuts. a cut induced by partitioning vertices of a network into some subset x containing the source and x the complement of x containing the sink is the set of all the edges with a tail in x and a head in x . we denote a cut c x x or simply c. for example for the network in figure . if x and hence x c x x if x and hence x c x x if x and hence x c x x . the name cut stems from the following property if all the edges of a cut were deleted from the network there would be no directed path from source to sink. indeed let c x x be a cut. consider a directed path from source to sink. if vi is the first vertex of that path which belongs to x the set of such vertices is not queue augment the flow by the sink's first label along the path . queue augment the flow by the sink's first label along the path . queue no augmenting path the sink is unlabeled the current flow is maximal. figure . illustration of the shortest augmenting path algorithm. the diagrams on the left show the current flow before the next iteration begins the diagrams on the right show the results of the vertex labeling on that iteration the augmenting path found in bold and the flow before its augmentation. vertices deleted from the queue are indicated by the symbol. empty because it contains the sink then vi is not the source and its immediate predecessor vi on that path belongs to x. hence the edge from vi to vi must be an element of the cut c x x . this proves the property in question. the capacity of a cut c x x denoted c x x is defined as the sum of capacities of the edges that compose the cut. for the three examples of cuts given above the capacities are equal to and respectively. since the number of different cuts in a network is nonempty and finite why? there always exists a minimum cut i.e. a cut with the smallest capacity. what is a minimum cut in the network of figure . ? the following theorem establishes an important relationship between the notions of maximum flow and minimum cut. theorem max flow min cut theorem the value of a maximum flow in a network is equal to the capacity of its minimum cut. proof first let x be a feasible flow of value v and let c x x be a cut of capacity c in the same network. consider the flow across this cut defined as the difference between the sum of the flows on the edges from x to x and the sum of the flows on the edges from x to x. it is intuitively clear and can be formally derived from the equations expressing the flow conservation requirement and the definition of the flow value problem b in this section's exercises that the flow across the cut c x x is equal to v the value of the flow v xij xj i . . ix j x j x ix since the second sum is nonnegative and the flow xij on any edge i j cannot exceed the edge capacity uij equality . implies that v xij uij ix j x ix j x i.e. v c. . thus the value of any feasible flow in a network cannot exceed the capacity of any cut in that network. let v be the value of a final flow x obtained by the augmenting path method. if we now find a cut whose capacity is equal to v we will have to conclude in view of inequality . that i the value v of the final flow is maximal among all feasible flows ii the cut's capacity is minimal among all cuts in the network and iii the maximum flow value is equal to the minimum cut capacity. to find such a cut consider the set of vertices x that can be reached from the source by following an undirected path composed of forward edges with positive unused capacities with respect to the final flow x and backward edges with positive flows on them. this set contains the source but does not contain the sink if it did we would have an augmenting path for the flow x which would contradict the assumption that the flow x is final. consider the cut c x x . by the definition of set x each edge i j from x to x has zero unused capacity i.e. xij uij and each edge j i from x to x has the zero flow on it otherwise j would be in x . applying equality . to the final flow x and the set x defined above we obtain v xij xji uij c x x ix j x j x ix ix j x which proves the theorem. the proof outlined above accomplishes more than proving the equality of the maximum flow value and the minimum cut capacity. it also implies that when the augmenting path method terminates it yields both a maximum flow and a minimum cut. if labeling of the kind utilized in the shortest augmenting path algorithm is used a minimum cut is formed by the edges from the labeled to unlabeled vertices on the last iteration of the method. finally the proof implies that all such edges must be full i.e. the flows must be equal to the edge capacities and all the edges from unlabeled vertices to labeled if any must be empty i.e. have zero flows on them . in particular for the network in figure . the algorithm finds the cut of minimum capacity both edges of which are full as required. edmonds and karp proved in their paper edm that the number of augmenting paths needed by the shortest augmenting path algorithm never exceeds nm where n and m are the number of vertices and edges respectively. since the time required to find a shortest augmenting path by breadth first search is in o n m o m for networks represented by their adjacency lists the time efficiency of the shortest augmenting path algorithm is in o nm . more efficient algorithms for the maximum flow problem are known see the monograph ahu as well as appropriate chapters in such books as cor and kle . some of them implement the augmenting path idea in a more efficient manner. others are based on the concept of preflows. a preflow is a flow that satisfies the capacity constraints but not the flow conservation requirement. any vertex is allowed to have more flow entering the vertex than leaving it. a preflowpush algorithm moves the excess flow toward the sink until the flow conservation requirement is reestablished for all intermediate vertices of the network. faster algorithms of this kind have worst case efficiency close to o nm . note that preflowpush algorithms fall outside the iterative improvement paradigm because they do not generate a sequence of improving solutions that satisfy all the constraints of the problem. to conclude this section it is worth pointing out that although the initial interest in studying network flows was caused by transportation applications this model has also proved to be useful for many other areas. we discuss one of them in the next section. exercises . . since maximum flow algorithms require processing edges in both directions it is convenient to modify the adjacency matrix representation of a network as follows. if there is a directed edge from vertex i to vertex j of capacity uij then the element in the ith row and the j th column is set to uij and the element in the j th row and the ith column is set to uij if there is no edge between vertices i and j both these elements are set to zero. outline a simple algorithm for identifying a source and a sink in a network presented by such a matrix and indicate its time efficiency. . apply the shortest augmenting path algorithm to find a maximum flow and a minimum cut in the following networks. a. b. . a. does the maximum flow problem always have a unique solution? would your answer be different for networks with different capacities on all their edges? b. answer the same questions for the minimum cut problem of finding a cut of the smallest capacity in a given network. . a. explain how the maximum flow problem for a network with several sources and sinks can be transformed into the same problem for a network with a single source and a single sink. b. some networks have capacity constraints on the flow amounts that can flow through their intermediate vertices. explain how the maximum flow problem for such a network can be transformed to the maximum flow problem for a network with edge capacity constraints only. . consider a network that is a rooted tree with the root as its source the leaves as its sinks and all the edges directed along the paths from the root to the leaves. design an efficient algorithm for finding a maximum flow in such a network. what is the time efficiency of your algorithm? . a. prove equality . . b. prove that for any flow in a network and any cut in it the value of the flow is equal to the flow across the cut see equality . . explain the relationship between this property and equality . . . a. express the maximum flow problem for the network in figure . as a linear programming problem. b. solve this linear programming problem by the simplex method. . as an alternative to the shortest augmenting path algorithm edmonds and karp edm suggested the maximum capacity augmenting path algorithm in which a flow is augmented along the path that increases the flow by the largest amount. implement both these algorithms in the language of your choice and perform an empirical investigation of their relative efficiency. . write a report on a more advanced maximum flow algorithm such as i dinitz's algorithm ii karzanov's algorithm iii malhotra kamarmaheshwari algorithm or iv goldberg tarjan algorithm. . dining problem several families go out to dinner together. to increase their social interaction they would like to sit at tables so that no two members of the same family are at the same table. show how to find a seating arrangement that meets this objective or prove that no such arrangement exists by using a maximum flow problem. assume that the dinner contingent has p families and that the ith family has ai members. also assume that q tables are available and the j th table has a seating capacity of bj . ahu 