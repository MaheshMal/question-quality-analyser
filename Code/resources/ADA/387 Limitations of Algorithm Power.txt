intellect distinguishes between the possible and the impossible reason distinguishes between the sensible and the senseless. even the possible can be senseless. max born my life and my views in the preceding chapters of this book we encountered dozens of algorithms for solving a variety of different problems. a fair assessment of algorithms as problem solving tools is inescapable they are very powerful instruments especially when they are executed by modern computers. but the power of algorithms is not unlimited and its limits are the subject of this chapter. as we shall see some problems cannot be solved by any algorithm. other problems can be solved algorithmically but not in polynomial time. and even when a problem can be solved in polynomial time by some algorithms there are usually lower bounds on their efficiency. we start in section . with methods for obtaining lower bounds which are estimates on a minimum amount of work needed to solve a problem. in general obtaining a nontrivial lower bound even for a simple sounding problem is a very difficult task. as opposed to ascertaining the efficiency of a particular algorithm the task here is to establish a limit on the efficiency of any algorithm known or unknown. this also necessitates a careful description of the operations such algorithms are allowed to perform. if we fail to define carefully the rules of the game so to speak our claims may end up in the large dustbin of impossibility related statements as for example the one made by the celebrated british physicist lord kelvin in heavier than air flying machines are impossible. section . discusses decision trees. this technique allows us among other applications to establish lower bounds on the efficiency of comparison based algorithms for sorting and for searching in sorted arrays. as a result we will be able to answer such questions as whether it is possible to invent a faster sorting algorithm than mergesort and whether binary search is the fastest algorithm for searching in a sorted array. what does your intuition tell you the answers to these questions will turn out to be? incidentally decision trees are also a great vehicle for directing us to a solution of some puzzles such as the coin weighing problem discussed in section . . section . deals with the question of intractability which problems can and cannot be solved in polynomial time. this well developed area of theoretical computer science is called computational complexity theory. we present the basic elements of this theory and discuss informally such fundamental notions as p np and np complete problems including the most important unresolved question of theoretical computer science about the relationship between p and np problems. the last section of this chapter deals with numerical analysis. this branch of computer science concerns algorithms for solving problems of continuous mathematics solving equations and systems of equations evaluating such functions as sin x and ln x computing integrals and so on. the nature of such problems imposes two types of limitations. first most cannot be solved exactly. second solving them even approximately requires dealing with numbers that can be represented in a digital computer with only a limited level of precision. manipulating approximate numbers without proper care can lead to very inaccurate results. we will see that even solving a basic quadratic equation on a computer poses significant difficulties that require a modification of the canonical formula for the equation's roots. 