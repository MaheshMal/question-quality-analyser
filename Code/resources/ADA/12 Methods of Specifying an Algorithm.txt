once you have designed an algorithm you need to specify it in some fashion. in section . to give you an example euclid's algorithm is described in words in a free and also a step by step form and in pseudocode. these are the two options that are most widely used nowadays for specifying algorithms. using a natural language has an obvious appeal however the inherent ambiguity of any natural language makes a succinct and clear description of algorithms surprisingly difficult. nevertheless being able to do this is an important skill that you should strive to develop in the process of learning algorithms. pseudocode is a mixture of a natural language and programming languagelike constructs. pseudocode is usually more precise than natural language and its usage often yields more succinct algorithm descriptions. surprisingly computer scientists have never agreed on a single form of pseudocode leaving textbook authors with a need to design their own dialects. fortunately these dialects are so close to each other that anyone familiar with a modern programming language should be able to understand them all. this book's dialect was selected to cause minimal difficulty for a reader. for the sake of simplicity we omit declarations of variables and use indentation to show the scope of such statements as for if and while. as you saw in the previous section we use an arrow for the assignment operation and two slashes for comments. in the earlier days of computing the dominant vehicle for specifying algorithms was a flowchart a method of expressing an algorithm by a collection of connected geometric shapes containing descriptions of the algorithm's steps. this representation technique has proved to be inconvenient for all but very simple algorithms nowadays it can be found only in old algorithm books. the state of the art of computing has not yet reached a point where an algorithm's description be it in a natural language or pseudocode can be fed into an electronic computer directly. instead it needs to be converted into a computer program written in a particular computer language. we can look at such a program as yet another way of specifying the algorithm although it is preferable to consider it as the algorithm's implementation. 