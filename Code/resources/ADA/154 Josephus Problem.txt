our last example is the josephus problem named for flavius josephus a famous jewish historian who participated in and chronicled the jewish revolt of c.e. against the romans. josephus as a general managed to hold the fortress of jotapata for days but after the fall of the city he took refuge with diehards in a nearby cave. there the rebels voted to perish rather than surrender. josephus proposed that each man in turn should dispatch his neighbor the order to be determined by casting lots. josephus contrived to draw the last lot and as one of the two surviving men in the cave he prevailed upon his intended victim to surrender to the romans. so let n people numbered to n stand in a circle. starting the grim count with person number we eliminate every second person until only one survivor is left. the problem is to determine the survivor's number j n . for example figure . if n is people in positions and will be eliminated on the first pass through the circle and people in initial positions and will be eliminated on the second pass leaving a sole survivor in initial position thus j . to give another example if n is people in positions and will be eliminated on the first pass it is more convenient to include in the first pass and people in positions and for convenience on the second thus j . a b figure . instances of the josephus problem for a n and b n . subscript numbers indicate the pass on which the person in that position is eliminated. the solutions are j and j respectively. it is convenient to consider the cases of even and odd n's separately. if n is even i.e. n k the first pass through the circle yields an instance of exactly the same problem but half its initial size. the only difference is in position numbering for example a person in initial position will be in position for the second pass a person in initial position will be in position and so on check figure . a . it is easy to see that to get the initial position of a person we simply need to multiply his new position by and subtract . this relationship will hold in particular for the survivor i.e. j k j k . let us now consider the case of an odd n n i.e. n k . the first pass eliminates people in all even positions. if we add to this the elimination of the person in position right after that we are left with an instance of size k. here to get the initial position that corresponds to the new position numbering we have to multiply the new position number by and add check figure . b . thus for odd values of n we get j k j k . can we get a closed form solution to the two case recurrence subject to the initial condition j ? the answer is yes though getting it requires more ingenuity than just applying backward substitutions. in fact one way to find a solution is to apply forward substitutions to get say the first values of j n discern a pattern and then prove its general validity by mathematical induction. we leave the execution of this plan to the exercises alternatively you can look it up in gkp whose exposition of the josephus problem we have been following. interestingly the most elegant form of the closed form answer involves the binary representation of size n j n can be obtained by a bit cyclic shift left of n itself! for example j j and j j . exercises . . cutting a stick a stick n inches long needs to be cut into n inch pieces. outline an algorithm that performs this task with the minimum number of cuts if several pieces of the stick can be cut at the same time. also give a formula for the minimum number of cuts. . design a decrease by half algorithm for computing log n and determine its time efficiency. . a. what is the largest number of key comparisons made by binary search in searching for a key in the following array? b. list all the keys of this array that will require the largest number of key comparisons when searched for by binary search. c. find the average number of key comparisons made by binary search in a successful search in this array. assume that each key is searched for with the same probability. d. find the average number of key comparisons made by binary search in an unsuccessful search in this array. assume that searches for keys in each of the intervals formed by the array's elements are equally likely. . estimate how many times faster an average successful search will be in a sorted array of one million elements if it is done by binary search versus sequential search. . the time efficiency of sequential search does not depend on whether a list is implemented as an array or as a linked list. is it also true for searching a sorted list by binary search? . a. design a version of binary search that uses only two way comparisons such as and . implement your algorithm in the language of your choice and carefully debug it such programs are notorious for being prone to bugs. b. analyze the time efficiency of the two way comparison version designed in part a. . picture guessing a version of the popular problem solving task involves presenting people with an array of pictures seven rows of six pictures each and asking them to identify the target picture by asking questions that can be answered yes or no. further people are then required to identify the picture with as few questions as possible. suggest the most efficient algorithm for this problem and indicate the largest number of questions that may be necessary. . consider ternary search the following algorithm for searching in a sorted array a ..n . if n simply compare the search key k with the single element of the array otherwise search recursively by comparing k with a n and if k is larger compare it with a n to determine in which third of the array to continue the search. a. what design technique is this algorithm based on? b. set up a recurrence for the number of key comparisons in the worst case. you may assume that n k. c. solve the recurrence for n k. d. compare this algorithm's efficiency with that of binary search. . an array a ..n contains n integers from to n in increasing order. thus one integer in this range is missing. design the most efficient algorithm you can to find the missing integer and indicate its time efficiency. . a. write pseudocode for the divide into three algorithm for the fake coin problem. make sure that your algorithm handles properly all values of n not only those that are multiples of . b. set up a recurrence relation for the number of weighings in the divide intothree algorithm for the fake coin problem and solve it for n k. c. for large values of n about how many times faster is this algorithm than the one based on dividing coins into two piles? your answer should not depend on n. . a. apply the russian peasant algorithm to compute . . b. from the standpoint of time efficiency does it matter whether we multiply n by m or m by n by the russian peasant algorithm? . a. write pseudocode for the russian peasant multiplication algorithm. b. what is the time efficiency class of russian peasant multiplication? . find j the solution to the josephus problem for n . . prove that the solution to the josephus problem is for every n that is a power of . . for the josephus problem a. compute j n for n . . . . b. discern a pattern in the solutions for the first fifteen values of n and prove its general validity. c. prove the validity of getting j n by a bit cyclic shift left of the binary representation of n. 