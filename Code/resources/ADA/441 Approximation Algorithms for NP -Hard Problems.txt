in this section we discuss a different approach to handling difficult problems of combinatorial optimization such as the traveling salesman problem and the knapsack problem. as we pointed out in section . the decision versions of these problems are np complete. their optimization versions fall in the class of np hard problems problems that are at least as hard as np complete problems. hence there are no known polynomial time algorithms for these problems and there are serious theoretical reasons to believe that such algorithms do not exist. what then are our options for handling such problems many of which are of significant practical importance? . the notion of an np hard problem can be defined more formally by extending the notion of polynomial reducibility to problems that are not necessarily in class np including optimization problems of the type discussed in this section see gar chapter . if an instance of the problem in question is very small we might be able to solve it by an exhaustive search algorithm section . . some such problems can be solved by the dynamic programming technique we demonstrated in section . . but even when this approach works in principle its practicality is limited by dependence on the instance parameters being relatively small. the discovery of the branch and bound technique has proved to be an important breakthrough because this technique makes it possible to solve many large instances of difficult optimization problems in an acceptable amount of time. however such good performance cannot usually be guaranteed. there is a radically different way of dealing with difficult optimization problems solve them approximately by a fast algorithm. this approach is particularly appealing for applications where a good but not necessarily optimal solution will suffice. besides in real life applications we often have to operate with inaccurate data to begin with. under such circumstances going for an approximate solution can be a particularly sensible choice. although approximation algorithms run a gamut in level of sophistication most of them are based on some problem specific heuristic. a heuristic is a common sense rule drawn from experience rather than from a mathematically proved assertion. for example going to the nearest unvisited city in the traveling salesman problem is a good illustration of this notion. we discuss an algorithm based on this heuristic later in this section. of course if we use an algorithm whose output is just an approximation of the actual optimal solution we would like to know how accurate this approximation is. we can quantify the accuracy of an approximate solution sa to a problem of minimizing some function f by the size of the relative error of this approximation r e sa f sa f s f s where s is an exact solution to the problem. alternatively since re sa f sa f s we can simply use the accuracy ratio r sa f sa f s as a measure of accuracy of sa. note that for the sake of scale uniformity the accuracy ratio of approximate solutions to maximization problems is usually computed as r sa f s f sa to make this ratio greater than or equal to as it is for minimization problems. obviously the closer r sa is to the better the approximate solution is. for most instances however we cannot compute the accuracy ratio because we typically do not know f s the true optimal value of the objective function. therefore our hope should lie in obtaining a good upper bound on the values of r sa . this leads to the following definitions. definition a polynomial time approximation algorithm is said to be a capproximation algorithm where c if the accuracy ratio of the approximation it produces does not exceed c for any instance of the problem in question r sa c. . the best i.e. the smallest value of c for which inequality . holds for all instances of the problem is called the performance ratio of the algorithm and denoted ra. the performance ratio serves as the principal metric indicating the quality of the approximation algorithm. we would like to have approximation algorithms with ra as close to as possible. unfortunately as we shall see some approximation algorithms have infinitely large performance ratios ra . this does not necessarily rule out using such algorithms but it does call for a cautious treatment of their outputs. there are two important facts about difficult combinatorial optimization problems worth keeping in mind. first although the difficulty level of solving most such problems exactly is the same to within a polynomial time transformation of one problem to another this equivalence does not translate into the realm of approximation algorithms. finding good approximate solutions is much easier for some of these problems than for others. second some of the problems have special classes of instances that are both particularly important for real life applications and easier to solve than their general counterparts. the traveling salesman problem is a prime example of this situation. 