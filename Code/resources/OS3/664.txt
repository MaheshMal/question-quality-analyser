Revocation of Access Rights
      In a dynamic protection system, we may sometimes need to revoke access
      rights to objects shared by different users. Various questions about revocation
      may arise:
      ·  Immediate versus delayed. Does revocation occur immediately, or is it
         delayed? If revocation is delayed, can we find out when it will take place?
      ·  Selective versus general. When an access right to an object is revoked,
         does it affect all the users who have an access right to that object, or can
         we specify a select group of users whose access rights should be revoked?
      ·  Partial versus total. Can a subset of the rights associated with an object be
         revoked, or must we revoke all access rights for this object?
      ·  Temporary versus permanent. Can access be revoked permanently (that
         is, the revoked access right will never again be available), or can access be
         revoked and later be obtained again?
         With an access-list scheme, revocation is easy. The access list is searched for
      any access rights to be revoked, and they are deleted from the list. Revocation
      is immediate and can be general or selective, total or partial, and permanent
      or temporary.
         Capabilities, however, present a much more difficult revocation problem,
      as mentioned earlier. Since the capabilities are distributed throughout the
      system, we must find them before we can revoke them. Schemes that implement
      revocation for capabilities include the following:
      ·  Reacquisition. Periodically, capabilities are deleted from each domain. If
         a process wants to use a capability, it may find that that capability has been
         deleted. The process may then try to reacquire the capability. If access has
         been revoked, the process will not be able to reacquire the capability.
      ·  Back-pointers. A list of pointers is maintained with each object, pointing
         to all capabilities associated with that object. When revocation is required,
         we can follow these pointers, changing the capabilities as necessary. This
         scheme was adopted in the MULTICS system. It is quite general, but its
         implementation is costly.
      ·  Indirection. The capabilities point indirectly, not directly, to the objects.
         Each capability points to a unique entry in a global table, which in turn
         points to the object. We implement revocation by searching the global table
         for the desired entry and deleting it. Then, when an access is attempted,
         the capability is found to point to an illegal table entry. Table entries can
         be reused for other capabilities without difficulty, since both the capability
         and the table entry contain the unique name of the object. The object for a
