System Programs
     Another aspect of a modern system is its collection of system programs. Recall
     Figure 1.1, which depicted the logical computer hierarchy. At the lowest level is
     hardware. Next is the operating system, then the system programs, and finally
     the application programs. System programs, also known as system utilities,
     provide a convenient environment for program development and execution.
     Some of them are simply user interfaces to system calls. Others are considerably
     more complex. They can be divided into these categories:
     ·  File management. These programs create, delete, copy, rename, print,
        dump, list, and generally manipulate files and directories.
     ·  Status information. Some programs simply ask the system for the date,
        time, amount of available memory or disk space, number of users, or
        similar status information. Others are more complex, providing detailed
        performance, logging, and debugging information. Typically, these pro-
        grams format and print the output to the terminal or other output devices
        or files or display it in a window of the GUI. Some systems also support a
        registry, which is used to store and retrieve configuration information.
     ·  File modification. Several text editors may be available to create and
        modify the content of files stored on disk or other storage devices. There
        may also be special commands to search contents of files or perform
        transformations of the text.
     ·  Programming-language support. Compilers, assemblers, debuggers, and
        interpreters for common programming languages (such as C, C++, Java,
        and PERL) are often provided with the operating system or available as a
        separate download.
     ·  Program loading and execution. Once a program is assembled or com-
        piled, it must be loaded into memory to be executed. The system may
        provide absolute loaders, relocatable loaders, linkage editors, and overlay
        loaders. Debugging systems for either higher-level languages or machine
        language are needed as well.
     ·  Communications. These programs provide the mechanism for creating
        virtual connections among processes, users, and computer systems. They
        allow users to send messages to one another's screens, to browse Web
        pages, to send e-mail messages, to log in remotely, or to transfer files from
        one machine to another.
     ·  Background  services.    All  general-purpose  systems  have  methods           for
        launching certain system-program processes at boot time. Some of these
        processes terminate after completing their tasks, while others continue
        to run until the system is halted. Constantly running system-program
        processes are known as services, subsystems, or daemons. One example is
        the network daemon discussed in Section 2.4.5. In that example, a system
        needed a service to listen for network connections in order to connect
        those requests to the correct processes. Other examples include process
        schedulers that start processes according to a specified schedule, system
        error monitoring services, and print servers. Typical systems have dozens
