Process Management
     A program does nothing unless its instructions are executed by a CPU. A
     program in execution, as mentioned, is a process. A time-shared user program
     such as a compiler is a process. A word-processing program being run by an
     individual user on a PC is a process. A system task, such as sending output
     to a printer, can also be a process (or at least part of one). For now, you can
     consider a process to be a job or a time-shared program, but later you will learn
     that the concept is more general. As we shall see in Chapter 3, it is possible
     to provide system calls that allow processes to create subprocesses to execute
     concurrently.
     A process needs certain resources--including CPU time, memory, files,
     and I/O devices--to accomplish its task. These resources are either given to
     the process when it is created or allocated to it while it is running. In addition
     to the various physical and logical resources that a process obtains when it is
     created, various initialization data (input) may be passed along. For example,
     consider a process whose function is to display the status of a file on the screen
     of a terminal. The process will be given the name of the file as an input and will
     execute the appropriate instructions and system calls to obtain and display
     the desired information on the terminal. When the process terminates, the
     operating system will reclaim any reusable resources.
     We emphasize that a program by itself is not a process. A program is a
     passive entity, like the contents of a file stored on disk, whereas a process
