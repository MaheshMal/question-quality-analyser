Background
     The memory-management algorithms outlined in Chapter 8 are necessary
     because of one basic requirement: The instructions being executed must be
                                                                                        397



398  Chapter 9  Virtual Memory
     in physical memory. The first approach to meeting this requirement is to place
     the entire logical address space in physical memory. Dynamic loading can help
     to ease this restriction, but it generally requires special precautions and extra
     work by the programmer.
        The  requirement    that  instructions  must  be   in  physical  memory   to    be
     executed seems both necessary and reasonable; but it is also unfortunate, since
     it limits the size of a program to the size of physical memory. In fact, an
     examination of real programs shows us that, in many cases, the entire program
     is not needed. For instance, consider the following:
     ·  Programs often have code to handle unusual error conditions. Since these
        errors seldom, if ever, occur in practice, this code is almost never executed.
     ·  Arrays, lists, and tables are often allocated more memory than they actually
        need. An array may be declared 100 by 100 elements, even though it is
        seldom larger than 10 by 10 elements. An assembler symbol table may
        have room for 3,000 symbols, although the average program has less than
        200 symbols.
     ·  Certain options and features of a program may be used rarely. For instance,
        the routines on U.S. government computers that balance the budget have
        not been used in many years.
     Even in those cases where the entire program is needed, it may not all be
     needed at the same time.
        The ability to execute a program that is only partially in memory would
     confer many benefits:
     ·  A program would no longer be constrained by the amount of physical
        memory that is available. Users would be able to write programs for an
        extremely large virtual address space, simplifying the programming task.
     ·  Because  each  user    program  could   take  less     physical  memory,  more
        programs could be run at the same time, with a corresponding increase in
        CPU utilization and throughput but with no increase in response time or
        turnaround time.
     ·  Less I/O would be needed to load or swap user programs into memory, so
        each user program would run faster.
     Thus, running a program that is not entirely in memory would benefit both
     the system and the user.
        Virtual memory involves the separation of logical memory as perceived
     by users from physical memory. This separation allows an extremely large
     virtual memory to be provided for programmers when only a smaller physical
     memory is available (Figure 9.1). Virtual memory makes the task of program-
     ming much easier, because the programmer no longer needs to worry about
     the amount of physical memory available; she can concentrate instead on the
     problem to be programmed.
        The virtual address space of a process refers to the logical (or virtual) view
     of how a process is stored in memory. Typically, this view is that a process
     begins at a certain logical address--say, address 0--and exists in contiguous
     memory, as shown in Figure 9.2. Recall from Chapter 8, though, that in fact



                                                9.1     