Background
     As we saw in Chapter 1, memory is central to the operation of a modern
     computer system. Memory consists of a large array of bytes, each with its own
     address. The CPU fetches instructions from memory according to the value of
     the program counter. These instructions may cause additional loading from
     and storing to specific memory addresses.
     A typical instruction-execution cycle, for example, first fetches an instruc-
     tion from memory. The instruction is then decoded and may cause operands
     to be fetched from memory. After the instruction has been executed on the
     operands, results may be stored back in memory. The memory unit sees only
                                                                                     351



352  Chapter 8  Main Memory
     a stream of memory addresses; it does not know how they are generated (by
     the instruction counter, indexing, indirection, literal addresses, and so on) or
     what they are for (instructions or data). Accordingly, we can ignore how a
     program generates a memory address. We are interested only in the sequence
     of memory addresses generated by the running program.
         We begin our discussion by covering several issues that are pertinent
     to  managing    memory:   basic  hardware,  the   binding  of  symbolic     memory
     addresses to actual physical addresses, and the distinction between logical
     and physical addresses. We conclude the section with a discussion of dynamic
     linking and shared libraries.
     8.1.1  Basic Hardware
     Main memory and the registers built into the processor itself are the only
     general-purpose storage that the CPU can access directly. There are machine
     instructions that take memory addresses as arguments, but none that take disk
     addresses. Therefore, any instructions in execution, and any data being used
     by the instructions, must be in one of these direct-access storage devices. If the
     data are not in memory, they must be moved there before the CPU can operate
     on them.
         Registers that are built into the CPU are generally accessible within one
     cycle of the CPU clock. Most CPUs can decode instructions and perform simple
     operations on register contents at the rate of one or more operations per
     clock tick. The same cannot be said of main memory, which is accessed via
     a transaction on the memory bus. Completing a memory access may take
     many cycles of the CPU clock. In such cases, the processor normally needs to
     stall, since it does not have the data required to complete the instruction that it
     is executing. This situation is intolerable because of the frequency of memory
     accesses. The remedy is to add fast memory between the CPU and main memory,
     typically on the CPU chip for fast access. Such a cache was described in Section
     1.8.3. To manage a cache built into the CPU, the hardware automatically speeds
     up memory access without any operating-system control.
         Not only are we concerned with the relative speed of accessing physical
     memory,    but  we  also  must   ensure  correct  operation.   For  proper  system
     operation we must protect the operating system from access by user processes.
     On multiuser systems, we must additionally protect user processes from
     one another. This protection must be provided by the hardware because the
     operating system doesn't usually intervene between the CPU and its memory
     accesses (because of the resulting performance penalty). Hardware implements
     this production in several different ways, as we show throughout the chapter.
     Here, we outline one possible implementation.
         We first need to make sure that each process has a separate memory space.
     Separate per-process memory space protects the processes from each other and
     is fundamental to having multiple processes loaded in memory for concurrent
     execution. To separate memory spaces, we need the ability to determine the
     range of legal addresses that the process may access and to ensure that the
     process can access only these legal addresses. We can provide this protection
     by using two registers, usually a base and a limit, as illustrated in Figure 8.1.
     The base register holds the smallest legal physical memory address; the limit
     register specifies the size of the range. For example, if the base register holds



                                                          8.1  