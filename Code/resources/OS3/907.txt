Summary
      Microsoft designed Windows to be an extensible, portable operating system
      --one able to take advantage of new techniques and hardware. Windows
      supports multiple operating environments and symmetric multiprocessing,
      including both 32-bit and 64-bit processors and NUMA computers. The use
      of kernel objects to provide basic services, along with support for clientÂ­
      server computing, enables Windows to support a wide variety of applica-
      tion environments. Windows provides virtual memory, integrated caching,
      and preemptive scheduling. It supports elaborate security mechanisms and
      includes internationalization features. Windows runs on a wide variety of
      computers, so users can choose and upgrade hardware to match their budgets
      and performance requirements without needing to alter the applications they
      run.
Practice Exercises
      19.1  What type of operating system is Windows? Describe two of its major
            features.
      19.2  List the design goals of Windows. Describe two in detail.



884  Chapter 19  Windows 7
     19.3   Describe the booting process for a Windows system.
     19.4   Describe the three main architectural layers of the Windows kernel.
     19.5   What is the job of the object manager?
     19.6   What types of services does the process manager provide?
     19.7   What is a local procedure call?
     19.8   What are the responsibilities of the I/O manager?
     19.9   What types of networking does Windows support? How does Windows
            implement transport protocols? Describe two networking protocols.
     19.10  How is the NTFS namespace organized?
     19.11  How does NTFS handle data structures? How does NTFS recover from
            a system crash? What is guaranteed after a recovery takes place? `
     19.12  How does Windows allocate user memory?
     19.13  Describe some of the ways in which an application can use memory
            via the Win32 API.
Exercises
     19.14  Under what circumstances would one use the deferred procedure calls
            facility in Windows?
     19.15  What is a handle, and how does a process obtain a handle?
     19.16  Describe the management scheme of the virtual memory manager. How
            does the VM manager improve performance?
     19.17  Describe a useful application of the no-access page facility provided in
            Windows.
     19.18  Describe the three techniques used for communicating data in a local
            procedure call. What settings are most conducive to the application of
            the different message-passing techniques?
     19.19  What manages caching in Windows? How is the cache managed?
     19.20  How  does  the  NTFS      directory  structure  differ  from  the  directory
            structure used in UNIX operating systems?
     19.21  What is a process, and how is it managed in Windows?
     19.22  What is the fiber abstraction provided by Windows? How does it differ
            from the thread abstraction?
     19.23  How does user-mode scheduling (UMS) in Windows 7 differ from
            fibers? What are some trade-offs between fibers and UMS?
     19.24  UMS considers a thread to have two parts, a UT and a KT. How might it
            be useful to allow UTs to continue executing in parallel with their KTs?
     19.25  What is the performance trade-off of allowing KTs and UTs to execute
            on different processors?



                                                              Bibliography           885
19.26  Why does the self-map occupy large amounts of virtual address space
       but no additional virtual memory?
19.27  How does the self-map make it easy for the VM manager to move the
       page-table pages to and from disk? Where are the page-table pages
       kept on disk?
19.28  When       a  Windows     system   hibernates,   the  system     is  powered  off.
       Suppose you changed the CPU or the amount of RAM on a hibernating
       system. Do you think that would work? Why or why not?
19.29  Give an example showing how the use of a suspend count is helpful in
       suspending and resuming threads in Windows.
Bibliographical Notes
[Russinovich      and  Solomon   (2009)]  give  an  overview        of  Windows  7   and
considerable technical detail about system internals and components.
[Brown (2000)] presents details of the security architecture of Windows.
The Microsoft Developer Network Library (http://msdn.microsoft.com)
supplies a wealth of information on Windows and other Microsoft products,
including documentation of all the published APIs.
[Iseminger (2000)] provides a good reference on the Windows Active
Directory. Detailed discussions of writing programs that use the Win32 API
appear in [Richter (1997)]. [Silberschatz et al. (2010)] supply a good discussion
of B+ trees.
The source code for a 2005 WRK version of the Windows kernel, together
with a collection of slides and other CRK curriculum materials, is available from
www.microsoft.com/WindowsAcademic for use by universities.
Bibliography
[Brown (2000)]       K.  Brown,  Programming    Windows      Security,  Addison-Wesley
(2000).
[Iseminger (2000)]       D. Iseminger, Active Directory Services for Microsoft Windows
2000. Technical Reference, Microsoft Press (2000).
[Richter (1997)]       J. Richter, Advanced Windows, Microsoft Press (1997).
[Russinovich and Solomon (2009)]          M. E. Russinovich and D. A. Solomon, Win-
dows Internals: Including Windows Server 2008 and Windows Vista, Fifth Edition,
Microsoft Press (2009).
[Silberschatz et al. (2010)]     A.  Silberschatz,  H.  F.  Korth,  and     S.  Sudarshan,
Database System Concepts, Sixth Edition, McGraw-Hill (2010).



