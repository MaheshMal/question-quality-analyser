Example: The WAFL File System
      12.8.5  Remote Operations
      With the exception of opening and closing files, there is an almost one-to-one
      correspondence between the regular UNIX system calls for file operations and
      the NFS protocol RPCs. Thus, a remote file operation can be translated directly
      to the corresponding RPC. Conceptually, NFS adheres to the remote-service
      paradigm; but in practice, buffering and caching techniques are employed for
      the sake of performance. No direct correspondence exists between a remote
      operation and an RPC. Instead, file blocks and file attributes are fetched by the
      RPCs and are cached locally. Future remote operations use the cached data,
      subject to consistency constraints.
      There are two caches: the file-attribute (inode-information) cache and the
      file-blocks cache. When a file is opened, the kernel checks with the remote
      server to determine whether to fetch or revalidate the cached attributes. The
      cached file blocks are used only if the corresponding cached attributes are up
      to date. The attribute cache is updated whenever new attributes arrive from
      the server. Cached attributes are, by default, discarded after 60 seconds. Both
      read-ahead and delayed-write techniques are used between the server and the
      client. Clients do not free delayed-write blocks until the server confirms that
      the data have been written to disk. Delayed-write is retained even when a file
      is opened concurrently, in conflicting modes. Hence, UNIX semantics (Section
      11.5.3.1) are not preserved.
      Tuning the system for performance makes it difficult to characterize the
      consistency semantics of NFS. New files created on a machine may not be
      visible elsewhere for 30 seconds. Furthermore, writes to a file at one site may
      or may not be visible at other sites that have this file open for reading. New
      opens of a file observe only the changes that have already been flushed to the
      server. Thus, NFS provides neither strict emulation of UNIX semantics nor the
      session semantics of Andrew (Section 11.5.3.2). In spite of these drawbacks, the
      utility and good performance of the mechanism make it the most widely used
      multi-vendor-distributed system in operation.
12.9  