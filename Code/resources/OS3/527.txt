File Concept
      Computers can store information on various storage media, such as magnetic
      disks, magnetic tapes, and optical disks. So that the computer system will
      be convenient to use, the operating system provides a uniform logical view
      of  stored  information.  The  operating        system  abstracts  from  the  physical
      properties of its storage devices to define a logical storage unit, the file. Files are
      mapped by the operating system onto physical devices. These storage devices
      are usually nonvolatile, so the contents are persistent between system reboots.
                                                                                               503



504  Chapter 11    File-System Interface
        A file is a named collection of related information that is recorded on
     secondary storage. From a user's perspective, a file is the smallest allotment
     of logical secondary storage; that is, data cannot be written to secondary
     storage unless they are within a file. Commonly, files represent programs (both
     source and object forms) and data. Data files may be numeric, alphabetic,
     alphanumeric, or binary. Files may be free form, such as text files, or may be
     formatted rigidly. In general, a file is a sequence of bits, bytes, lines, or records,
     the meaning of which is defined by the file's creator and user. The concept of
     a file is thus extremely general.
        The information in a file is defined by its creator. Many different types of
     information may be stored in a file --source or executable programs, numeric or
     text data, photos, music, video, and so on. A file has a certain defined structure,
     which depends on its type. A text file is a sequence of characters organized
     into lines (and possibly pages). A source file is a sequence of functions, each of
     which is further organized as declarations followed by executable statements.
     An executable file is a series of code sections that the loader can bring into
     memory and execute.
     11.1.1  File Attributes
     A file is named, for the convenience of its human users, and is referred to by
     its name. A name is usually a string of characters, such as example.c. Some
     systems differentiate between uppercase and lowercase characters in names,
     whereas other systems do not. When a file is named, it becomes independent
     of the process, the user, and even the system that created it. For instance, one
     user might create the file example.c, and another user might edit that file by
     specifying its name. The file's owner might write the file to a USB disk, send it
     as an e-mail attachment, or copy it across a network, and it could still be called
     example.c on the destination system.
        A file's attributes vary from one operating system to another but typically
     consist of these:
     ·  Name. The symbolic file name is the only information kept in human-
        readable form.
     ·  Identifier. This unique tag, usually a number, identifies the file within the
        file system; it is the non-human-readable name for the file.
     ·  Type. This information is needed for systems that support different types
        of files.
     ·  Location. This information is a pointer to a device and to the location of
        the file on that device.
     ·  Size. The current size of the file (in bytes, words, or blocks) and possibly
        the maximum allowed size are included in this attribute.
     ·  Protection. Access-control information determines who can do reading,
        writing, executing, and so on.
     ·  Time, date, and user identification. This information may be kept for
        creation, last modification, and last use. These data can be useful for
        protection, security, and usage monitoring.



                          11.1                             