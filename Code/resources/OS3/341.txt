Deadlock Characterization
     events with which we are mainly concerned here are resource acquisition and
     release. The resources may be either physical resources (for example, printers,
     tape drives, memory space, and CPU cycles) or logical resources (for example,
     semaphores, mutex locks, and files). However, other types of events may result
     in deadlocks (for example, the IPC facilities discussed in Chapter 3).
     To illustrate a deadlocked state, consider a system with three CD RW drives.
     Suppose each of three processes holds one of these CD RW drives. If each process
     now requests another drive, the three processes will be in a deadlocked state.
     Each is waiting for the event "CD RW is released," which can be caused only
     by one of the other waiting processes. This example illustrates a deadlock
     involving the same resource type.
     Deadlocks may also involve different resource types. For example, consider
     a system with one printer and one DVD drive. Suppose that process Pi is holding
     the DVD and process Pj is holding the printer. If Pi requests the printer and Pj
     requests the DVD drive, a deadlock occurs.
     Developers         of  multithreaded     applications     must    remain    aware  of  the
     possibility of deadlocks. The locking tools presented in Chapter 5 are designed
     to avoid race conditions. However, in using these tools, developers must pay
     careful attention to how locks are acquired and released. Otherwise, deadlock
     can occur, as illustrated in the dining-philosophers problem in Section 5.7.3.
7.2  