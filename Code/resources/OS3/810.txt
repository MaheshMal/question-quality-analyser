Design Principles
      In its overall design, Linux resembles other traditional, nonmicrokernel UNIX
      implementations. It is a multiuser, preemptively multitasking system with a
      full set of UNIX-compatible tools. Linux's file system adheres to traditional UNIX
      semantics, and the standard UNIX networking model is fully implemented. The
      internal details of Linux's design have been influenced heavily by the history
      of this operating system's development.
      Although Linux runs on a wide variety of platforms, it was originally
      developed exclusively on PC architecture. A great deal of that early devel-
      opment was carried out by individual enthusiasts rather than by well-funded
      development or research facilities, so from the start Linux attempted to squeeze
      as much functionality as possible from limited resources. Today, Linux can run
      happily on a multiprocessor machine with many gigabytes of main memory
      and many terabytes of disk space, but it is still capable of operating usefully in
      under 16 MB of RAM.
      As PCs became more powerful and as memory and hard disks became
      cheaper,  the  original,  minimalist  Linux  kernels  grew  to  implement  more
      UNIX functionality. Speed and efficiency are still important design goals, but
      much recent and current work on Linux has concentrated on a third major
      design goal: standardization. One of the prices paid for the diversity of UNIX
      implementations currently available is that source code written for one may not
      necessarily compile or run correctly on another. Even when the same system
      calls are present on two different UNIX systems, they do not necessarily behave
      in exactly the same way. The POSIX standards comprise a set of specifications
      for different aspects of operating-system behavior. There are POSIX documents
      for common operating-system functionality and for extensions such as process
      threads and real-time operations. Linux is designed to comply with the relevant
      POSIX documents, and at least two Linux distributions have achieved official
      POSIX certification.
      Because it gives standard interfaces to both the programmer and the user,
      Linux presents few surprises to anybody familiar with UNIX. We do not detail
      these interfaces here. The sections on the programmer interface (Section A.3)
      and user interface (Section A.4) of BSD apply equally well to Linux. By default,
      however, the Linux programming interface adheres to SVR4 UNIX semantics,
      rather than to BSD behavior. A separate set of libraries is available to implement
      BSD semantics in places where the two behaviors differ significantly.
      Many other standards exist in the UNIX world, but full certification of
      Linux with respect to these standards is sometimes slowed because certification
      is often available only for a fee, and the expense involved in certifying an
      operating system's compliance with most standards is substantial. However,
      supporting a wide base of applications is important for any operating system,
      so implementation of standards is a major goal for Linux development, even
      if the implementation is not formally certified. In addition to the basic POSIX



                                                     18.2       