Allocation Methods
      name in the linear list. Therefore, it can greatly decrease the directory search
      time. Insertion and deletion are also fairly straightforward, although some
      provision must be made for collisions--situations in which two file names
      hash to the same location.
      The major difficulties with a hash table are its generally fixed size and the
      dependence of the hash function on that size. For example, assume that we
      make a linear-probing hash table that holds 64 entries. The hash function
      converts file names into integers from 0 to 63 (for instance, by using the
      remainder of a division by 64). If we later try to create a 65th file, we must
      enlarge the directory hash table --say, to 128 entries. As a result, we need
      a new hash function that must map file names to the range 0 to 127, and we
      must reorganize the existing directory entries to reflect their new hash-function
      values.
      Alternatively, we can use a chained-overflow hash table. Each hash entry
      can be a linked list instead of an individual value, and we can resolve collisions
      by adding the new entry to the linked list. Lookups may be somewhat slowed,
      because searching for a name might require stepping through a linked list of
      colliding table entries. Still, this method is likely to be much faster than a linear
      search through the entire directory.
12.4  