Programmer Interface
      The Win32 API is the fundamental interface to the capabilities of Windows. This
      section describes five main aspects of the Win32 API: access to kernel objects,
      sharing of objects between processes, process management, interprocess com-
      munication, and memory management.
      19.7.1    Access to Kernel Objects
      The Windows kernel provides many services that application programs can
      use.  Application    programs  obtain  these  services  by  manipulating  kernel
      objects. A process gains access to a kernel object named XXX by calling the
      CreateXXX function to open a handle to an instance of XXX. This handle is
      unique to the process. Depending on which object is being opened, if the
      Create() function fails, it may return 0, or it may return a special constant
      named INVALID HANDLE VALUE. A process can close any handle by calling the
      CloseHandle() function, and the system may delete the object if the count of
      handles referencing the object in all processes drops to zero.
      19.7.2    Sharing Objects between Processes
      Windows provides three ways to share objects between processes. The first
      way is for a child process to inherit a handle to the object. When the parent
      calls the CreateXXX function, the parent supplies a SECURITIES ATTRIBUTES
      structure with the bInheritHandle field set to TRUE. This field creates an
      inheritable handle. Next, the child process is created, passing a value of TRUE
      to the CreateProcess() function's bInheritHandle argument. Figure 19.8
      shows a code sample that creates a semaphore handle inherited by a child
      process.
            Assuming the child process knows which handles are shared, the parent
      and child can achieve interprocess communication through the shared objects.
      In the example in Figure 19.8, the child process gets the value of the handle
      from the first command-line argument and then shares the semaphore with
      the parent process.
            The second way to share objects is for one process to give the object a
      name when the object is created and for the second process to open the name.
      This method has two drawbacks: Windows does not provide a way to check
      whether an object with the chosen name already exists, and the object name
      space is global, without regard to the object type. For instance, two applications



                                             19.7  