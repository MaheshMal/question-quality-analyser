Summary
     #include     <stdio.h>
     #include     <windows.h>
     #define      BUFFER SIZE 25
     int  main(VOID)
     {
     HANDLE       Readhandle;
     CHAR     buffer[BUFFER SIZE];
     DWORD    read;
          /*  get  the  read      handle  of  the  pipe      */
          ReadHandle    =    GetStdHandle(STD INPUT HANDLE);
          /*  the  child     reads  from      the  pipe  */
          if  (ReadFile(ReadHandle,           buffer,    BUFFER SIZE,  &read,   NULL))
              printf("child       read  %s",buffer);
          else
              fprintf(stderr,       "Error    reading    from    pipe");
          return   0;
     }
                   Figure 3.29    Windows anonymous pipes --child process.
          Named pipes are referred to as FIFOs in UNIX systems. Once created, they
     appear as typical files in the file system. A FIFO is created with the mkfifo()
     system call and manipulated with the ordinary open(), read(), write(),
     and close() system calls. It will continue to exist until it is explicitly deleted
     from the file system. Although FIFOs allow bidirectional communication, only
     half-duplex transmission is permitted. If data must travel in both directions,
     two FIFOs are typically used. Additionally, the communicating processes must
     reside   on  the  same  machine.     If  intermachine   communication  is  required,
     sockets (Section 3.6.1) must be used.
          Named pipes on Windows systems provide a richer communication mech-
     anism than their UNIX counterparts. Full-duplex communication is allowed,
     and the communicating processes may reside on either the same or different
     machines. Additionally, only byte-oriented data may be transmitted across a
     UNIX FIFO, whereas Windows systems allow either byte- or message-oriented
     data. Named pipes are created with the CreateNamedPipe() function, and a
     client can connect to a named pipe using ConnectNamedPipe(). Communi-
     cation over the named pipe can be accomplished using the ReadFile() and
     WriteFile() functions.
3.7  