Implementation of the Access Matrix
      How can the access matrix be implemented effectively? In general, the matrix
      will be sparse; that is, most of the entries will be empty. Although data-
      structure techniques are available for representing sparse matrices, they are
      not particularly useful for this application, because of the way in which
      the protection facility is used. Here, we first describe several methods of
      implementing the access matrix and then compare the methods.
      14.5.1      Global Table
      The simplest implementation of the access matrix is a global table consisting
      of  a  set  of  ordered     triples  <domain,     object,    rights-set>.            Whenever  an
      operation M is executed on an object Oj within domain Di , the global table
      is searched for a triple <Di , Oj , Rk>, with M  Rk. If this triple is found, the
      operation is allowed to continue; otherwise, an exception (or error) condition
      is raised.
             This implementation suffers from several drawbacks. The table is usually
      large and thus cannot be kept in main memory, so additional I/O is needed.
      Virtual memory techniques are often used for managing this table. In addition,
      it is difficult to take advantage of special groupings of objects or domains.
      For example, if everyone can read a particular object, this object must have a
      separate entry in every domain.
      14.5.2      Access Lists for Objects
      Each column in the access matrix can be implemented as an access list for
      one object, as described in Section 11.6.2. Obviously, the empty entries can be
      discarded. The resulting list for each object consists of ordered pairs <domain,
      rights-set>, which define all domains with a nonempty set of access rights
      for that object.
             This approach can be extended easily to define a list plus a default set of
      access rights. When an operation M on an object Oj is attempted in domain



                          14.5     