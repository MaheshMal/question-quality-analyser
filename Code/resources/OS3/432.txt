Copy-on-Write
     In Section 9.2, we illustrated how a process can start quickly by demand-paging
     in the page containing the first instruction. However, process creation using the
     fork() system call may initially bypass the need for demand paging by using
     a technique similar to page sharing (covered in Section 8.5.4). This technique
     provides rapid process creation and minimizes the number of new pages that
     must be allocated to the newly created process.
     Recall that the fork() system call creates a child process that is a duplicate
     of its parent. Traditionally, fork() worked by creating a copy of the parent's
     address space for the child, duplicating the pages belonging to the parent.
     However, considering that many child processes invoke the exec() system
     call immediately after creation, the copying of the parent's address space may
     be unnecessary. Instead, we can use a technique known as copy-on-write,
     which works by allowing the parent and child processes initially to share the
     same pages. These shared pages are marked as copy-on-write pages, meaning
     that if either process writes to a shared page, a copy of the shared page is
     created. Copy-on-write is illustrated in Figures 9.7 and 9.8, which show the
     contents of the physical memory before and after process 1 modifies page C.
     For example, assume that the child process attempts to modify a page
     containing portions of the stack, with the pages set to be copy-on-write. The
     operating system will create a copy of this page, mapping it to the address space
     of the child process. The child process will then modify its copied page and not
     the page belonging to the parent process. Obviously, when the copy-on-write
     technique is used, only the pages that are modified by either process are copied;
     all unmodified pages can be shared by the parent and child processes. Note, too,
     that only pages that can be modified need be marked as copy-on-write. Pages
     that cannot be modified (pages containing executable code) can be shared by
     the parent and child. Copy-on-write is a common technique used by several
     operating systems, including Windows XP, Linux, and Solaris.
     When it is determined that a page is going to be duplicated using copy-
     on-write, it is important to note the location from which the free page will
     be allocated. Many operating systems provide a pool of free pages for such
     requests. These free pages are typically allocated when the stack or heap for a
     process must expand or when there are copy-on-write pages to be managed.
                                      physical
                process1              memory                             process2
                                      page A
                                      page B
                                      page C
                          Figure 9.7  Before process 1 modifies page C.
