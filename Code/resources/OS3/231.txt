Peterson's Solution
     process has made a request to enter its critical section and before that
     request is granted.
     We assume that each process is executing at a nonzero speed. However, we can
     make no assumption concerning the relative speed of the n processes.
     At a given point in time, many kernel-mode processes may be active in
     the operating system. As a result, the code implementing an operating system
     (kernel code) is subject to several possible race conditions. Consider as an
     example a kernel data structure that maintains a list of all open files in the
     system. This list must be modified when a new file is opened or closed (adding
     the file to the list or removing it from the list). If two processes were to open files
     simultaneously, the separate updates to this list could result in a race condition.
     Other kernel data structures that are prone to possible race conditions include
     structures for maintaining memory allocation, for maintaining process lists,
     and for interrupt handling. It is up to kernel developers to ensure that the
     operating system is free from such race conditions.
     Two general approaches are used to handle critical sections in operating
     systems:  preemptive  kernels  and  nonpreemptive    kernels.  A      preemptive
     kernel allows a process to be preempted while it is running in kernel mode. A
     nonpreemptive kernel does not allow a process running in kernel mode to be
     preempted; a kernel-mode process will run until it exits kernel mode, blocks,
     or voluntarily yields control of the CPU.
     Obviously, a nonpreemptive kernel is essentially free from race conditions
     on kernel data structures, as only one process is active in the kernel at a time.
     We cannot say the same about preemptive kernels, so they must be carefully
     designed to ensure that shared kernel data are free from race conditions.
     Preemptive kernels are especially difficult to design for SMP architectures,
     since in these environments it is possible for two kernel-mode processes to run
     simultaneously on different processors.
     Why, then, would anyone favor a preemptive kernel over a nonpreemptive
     one? A preemptive kernel may be more responsive, since there is less risk that a
     kernel-mode process will run for an arbitrarily long period before relinquishing
     the processor to waiting processes. (Of course, this risk can also be minimized
     by designing kernel code that does not behave in this way.) Furthermore, a
     preemptive kernel is more suitable for real-time programming, as it will allow
     a real-time process to preempt a process currently running in the kernel. Later
     in this chapter, we explore how various operating systems manage preemption
     within the kernel.
5.3  