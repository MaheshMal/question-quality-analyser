Semaphores
                                   do  {
                                          acquire lock
                                                 critical section
                                          release lock
                                                 remainder section
                                   } while (true);
          Figure      5.8  Solution to the critical-section problem using mutex locks.
     The  definition  of release() is as follows:
                                release() {
                                   available       =  true;
                                }
          Calls to either acquire() or release() must be performed atomically.
     Thus, mutex locks are often implemented using one of the hardware mecha-
     nisms described in Section 5.4, and we leave the description of this technique
     as an exercise.
          The main disadvantage of the implementation given here is that it requires
     busy waiting. While a process is in its critical section, any other process that
     tries to enter its critical section must loop continuously in the call to acquire().
     In fact, this type of mutex lock is also called a spinlock because the process
     "spins" while waiting for the lock to become available. (We see the same issue
     with the code examples illustrating the test and set() instruction and the
     compare and swap() instruction.) This continual looping is clearly a problem
     in a real multiprogramming system, where a single CPU is shared among many
     processes. Busy waiting wastes CPU cycles that some other process might be
     able to use productively.
          Spinlocks do have an advantage, however, in that no context switch is
     required when a process must wait on a lock, and a context switch may
     take considerable time. Thus, when locks are expected to be held for short
     times, spinlocks are useful. They are often employed on multiprocessor systems
     where one thread can "spin" on one processor while another thread performs
     its critical section on another processor.
          Later in this chapter (Section 5.7), we examine how mutex locks can be
     used to solve classical synchronization problems. We also discuss how these
     locks are used in several operating systems, as well as in Pthreads.
5.6  