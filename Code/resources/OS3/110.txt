Operating-System Debugging
     We have mentioned debugging frequently in this chapter. Here, we take a closer
     look. Broadly, debugging is the activity of finding and fixing errors in a system,
     both in hardware and in software. Performance problems are considered bugs,
     so debugging can also include performance tuning, which seeks to improve
     performance by removing processing bottlenecks. In this section, we explore
     debugging process and kernel errors and performance problems. Hardware
     debugging is outside the scope of this text.
     2.8.1  Failure Analysis
     If a process fails, most operating systems write the error information to a log
     file to alert system operators or users that the problem occurred. The operating
     system can also take a core dump--a capture of the memory of the process--
     and store it in a file for later analysis. (Memory was referred to as the "core"
     in the early days of computing.) Running programs and core dumps can be
     probed by a debugger, which allows a programmer to explore the code and
     memory of a process.
     Debugging user-level process code is a challenge. Operating-system kernel
     debugging is even more complex because of the size and complexity of the
     kernel, its control of the hardware, and the lack of user-level debugging tools.
     A failure in the kernel is called a crash. When a crash occurs, error information
     is saved to a log file, and the memory state is saved to a crash dump.
     Operating-system debugging and process debugging frequently use dif-
     ferent tools and techniques due to the very different nature of these two tasks.
     Consider that a kernel failure in the file-system code would make it risky for
     the kernel to try to save its state to a file on the file system before rebooting.
     A common technique is to save the kernel's memory state to a section of disk
     set aside for this purpose that contains no file system. If the kernel detects
     an unrecoverable error, it writes the entire contents of memory, or at least the
     kernel-owned parts of the system memory, to the disk area. When the system
     reboots, a process runs to gather the data from that area and write it to a crash



                                 2.8     