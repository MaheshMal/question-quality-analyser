Process Management
      A process is the basic context in which all user-requested activity is serviced
      within the operating system. To be compatible with other UNIX systems, Linux
      must use a process model similar to those of other versions of UNIX. Linux
      operates differently from UNIX in a few key places, however. In this section,
      we review the traditional UNIX process model (Section A.3.2) and introduce
      Linux's threading model.
      18.4.1    The fork() and exec() Process Model
      The basic principle of UNIX process management is to separate into two steps
      two operations that are usually combined into one: the creation of a new
      process and the running of a new program. A new process is created by the
      fork() system call, and a new program is run after a call to exec(). These are
      two distinctly separate functions. We can create a new process with fork()
      without running a new program--the new subprocess simply continues to
      execute exactly the same program, at exactly the same point, that the first
      (parent) process was running. In the same way, running a new program does
      not require that a new process be created first. Any process may call exec() at
      any time. A new binary object is loaded into the process's address space and
      the new executable starts executing in the context of the existing process.
         This model has the advantage of great simplicity. It is not necessary to
      specify every detail of the environment of a new program in the system call that
      runs that program. The new program simply runs in its existing environment.
      If a parent process wishes to modify the environment in which a new program
      is to be run, it can fork and then, still running the original executable in a child
      process, make any system calls it requires to modify that child process before
      finally executing the new program.
         Under UNIX, then, a process encompasses all the information that the
      operating system must maintain to track the context of a single execution of a
      single program. Under Linux, we can break down this context into a number of
      specific sections. Broadly, process properties fall into three groups: the process
      identity, environment, and context.
      18.4.1.1  Process Identity
      A process identity consists mainly of the following items:
      Â·  Process ID (PID). Each process has a unique identifier. The PID is used to
         specify the process to the operating system when an application makes a



                                   18.4              