Implicit Threading
             Figure  4.12  shows  the  Java  version   of  a    multithreaded   program     that
     determines the summation of a non-negative integer. The Summation class
     implements the Runnable interface. Thread creation is performed by creating
     an object instance of the Thread class and passing the constructor a Runnable
     object.
             Creating a Thread object does not specifically create the new thread; rather,
     the start() method creates the new thread. Calling the start() method for
     the new object does two things:
         1.  It allocates memory and initializes a new thread in the JVM.
         2.  It calls the run() method, making the thread eligible to be run by the JVM.
             (Note again that we never call the run() method directly. Rather, we call
             the start() method, and it calls the run() method on our behalf.)
             When the summation program runs, the JVM creates two threads. The first
     is the parent thread, which starts execution in the main() method. The second
     thread is created when the start() method on the Thread object is invoked.
     This child thread begins execution in the run() method of the Summation class.
     After outputting the value of the summation, this thread terminates when it
     exits from its run() method.
             Data sharing between threads occurs easily in Windows and Pthreads, since
     shared data are simply declared globally. As a pure object-oriented language,
     Java has no such notion of global data. If two or more threads are to share
     data in a Java program, the sharing occurs by passing references to the shared
     object to the appropriate threads. In the Java program shown in Figure 4.12,
     the main thread and the summation thread share the object instance of the Sum
     class. This shared object is referenced through the appropriate getSum() and
     setSum() methods. (You might wonder why we don't use an Integer object
     rather than designing a new sum class. The reason is that the Integer class is
     immutable--that is, once its value is set, it cannot change.)
             Recall that the parent threads in the Pthreads and Windows libraries
     use     pthread  join()      and  WaitForSingleObject()          (respectively)   to  wait
     for the summation threads to finish before proceeding. The join() method
     in  Java  provides    similar     functionality.  (Notice  that  join()   can   throw  an
     InterruptedException, which we choose to ignore.) If the parent must wait
     for several threads to finish, the join() method can be enclosed in a for loop
     similar to that shown for Pthreads in Figure 4.10.
4.5  