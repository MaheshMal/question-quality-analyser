Multicore Programming
     Earlier in the history of computer design, in response to the need for more
     computing performance, single-CPU systems evolved into multi-CPU systems.
     A more recent, similar trend in system design is to place multiple computing
     cores on a single chip. Each core appears as a separate processor to the
     operating system (Section 1.3.2). Whether the cores appear across CPU chips or
     within CPU chips, we call these systems multicore or multiprocessor systems.
     Multithreaded programming provides a mechanism for more efficient use
     of these multiple computing cores and improved concurrency. Consider an
     application with four threads. On a system with a single computing core,
     concurrency merely means that the execution of the threads will be interleaved
     over time (Figure 4.3), because the processing core is capable of executing only
     one thread at a time. On a system with multiple cores, however, concurrency
     means that the threads can run in parallel, because the system can assign a
     separate thread to each core (Figure 4.4).
         Notice the distinction between parallelism and concurrency in this discus-
     sion. A system is parallel if it can perform more than one task simultaneously.
     In contrast, a concurrent system supports more than one task by allowing all
     the tasks to make progress. Thus, it is possible to have concurrency without
     parallelism. Before the advent of SMP and multicore architectures, most com-
     puter systems had only a single processor. CPU schedulers were designed to
     provide the illusion of parallelism by rapidly switching between processes in
                       core 1      T1       T3      T1        T3  T1         ...
                       core 2      T2       T4      T2        T4  T2         ...
                                                        time
                      Figure 4.4   Parallel execution on a        multicore  system.



                                              4.2  