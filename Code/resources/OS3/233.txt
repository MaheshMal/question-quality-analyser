Synchronization Hardware
     value of turn can be either 0 or 1 but cannot be both. Hence, one of the processes
     --say, Pj --must have successfully executed the while statement, whereas Pi
     had to execute at least one additional statement ("turn == j"). However, at
     that time, flag[j] == true and turn == j, and this condition will persist as
     long as Pj is in its critical section; as a result, mutual exclusion is preserved.
     To prove properties 2 and 3, we note that a process Pi can be prevented from
     entering the critical section only if it is stuck in the while loop with the condition
     flag[j] == true and turn == j; this loop is the only one possible. If Pj is not
     ready to enter the critical section, then flag[j] == false, and Pi can enter its
     critical section. If Pj has set flag[j] to true and is also executing in its while
     statement, then either turn == i or turn == j. If turn == i, then Pi will enter
     the critical section. If turn == j, then Pj will enter the critical section. However,
     once Pj exits its critical section, it will reset flag[j] to false, allowing Pi to
     enter its critical section. If Pj resets flag[j] to true, it must also set turn to i.
     Thus, since Pi does not change the value of the variable turn while executing
     the while statement, Pi will enter the critical section (progress) after at most
     one entry by Pj (bounded waiting).
5.4  