Methods for Handling Deadlocks
     Generally speaking, we can deal with the deadlock problem in one of three
     ways:
     ·  We can use a protocol to prevent or avoid deadlocks, ensuring that the
        system will never enter a deadlocked state.
     ·  We can allow the system to enter a deadlocked state, detect it, and recover.
     ·  We can ignore the problem altogether and pretend that deadlocks never
        occur in the system.
     The third solution is the one used by most operating systems, including Linux
     and Windows. It is then up to the application developer to write programs that
     handle deadlocks.
        Next, we elaborate briefly on each of the three methods for handling
     deadlocks. Then, in Sections 7.4 through 7.7, we present detailed algorithms.
     Before proceeding, we should mention that some researchers have argued that
     none of the basic approaches alone is appropriate for the entire spectrum of
     resource-allocation problems in operating systems. The basic approaches can
     be combined, however, allowing us to select an optimal approach for each class
     of resources in a system.
        To ensure that deadlocks never occur, the system can use either a deadlock-
     prevention or a deadlock-avoidance scheme. Deadlock prevention provides a
     set of methods to ensure that at least one of the necessary conditions (Section
     7.2.1) cannot hold. These methods prevent deadlocks by constraining how
     requests for resources can be made. We discuss these methods in Section 7.4.
        Deadlock avoidance requires that the operating system be given additional
     information in advance concerning which resources a process will request
     and use during its lifetime. With this additional knowledge, the operating
     system can decide for each request whether or not the process should wait.
     To decide whether the current request can be satisfied or must be delayed, the
     system must consider the resources currently available, the resources currently
     allocated to each process, and the future requests and releases of each process.
     We discuss these schemes in Section 7.5.
        If a system does not employ either a deadlock-prevention or a deadlock-
     avoidance algorithm, then a deadlock situation may arise. In this environment,
     the system can provide an algorithm that examines the state of the system to
     determine whether a deadlock has occurred and an algorithm to recover from
     the deadlock (if a deadlock has indeed occurred). We discuss these issues in
     Section 7.6 and Section 7.7.
