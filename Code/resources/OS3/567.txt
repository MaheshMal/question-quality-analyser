File-System Structure
      Disks  provide   most  of  the  secondary  storage  on    which  file  systems       are
      maintained. Two characteristics make them convenient for this purpose:
      1.     A disk can be rewritten in place; it is possible to read a block from the
             disk, modify the block, and write it back into the same place.
      2.     A disk can access directly any block of information it contains. Thus, it is
             simple to access any file either sequentially or randomly, and switching
             from one file to another requires only moving the read Â­write heads and
             waiting for the disk to rotate.
      We discuss disk structure in great detail in Chapter 10.
          To improve I/O efficiency, I/O transfers between memory and disk are
      performed in units of blocks. Each block has one or more sectors. Depending
                                                                                           543



544  Chapter 12      
     on the disk drive, sector size varies from 32 bytes to 4,096 bytes; the usual size
     is 512 bytes.
          File systems provide efficient and convenient access to the disk by allowing
     data to be stored, located, and retrieved easily. A file system poses two quite
     different design problems. The first problem is defining how the file system
     should look to the user. This task involves defining a file and its attributes,
     the operations allowed on a file, and the directory structure for organizing
     files. The second problem is creating algorithms and data structures to map the
     logical file system onto the physical secondary-storage devices.
          The file system itself is generally composed of many different levels. The
     structure shown in Figure 12.1 is an example of a layered design. Each level in
     the design uses the features of lower levels to create new features for use by
     higher levels.
          The I/O control level consists of device drivers and interrupt handlers
     to transfer information between the main memory and the disk system. A
     device driver can be thought of as a translator. Its input consists of high-
     level commands such as "retrieve block 123." Its output consists of low-level,
     hardware-specific instructions that are used by the hardware controller, which
     interfaces the I/O device to the rest of the system. The device driver usually
     writes specific bit patterns to special locations in the I/O controller's memory
     to tell the controller which device location to act on and what actions to take.
     The details of device drivers and the I/O infrastructure are covered in Chapter
     13.
          The  basic  file  system  needs  only  to     issue  generic  commands  to     the
     appropriate device driver to read and write physical blocks on the disk. Each
     physical block is identified by its numeric disk address (for example, drive 1,
     cylinder 73, track 2, sector 10). This layer also manages the memory buffers
     and caches that hold various file-system, directory, and data blocks. A block
     in the buffer is allocated before the transfer of a disk block can occur. When
     the buffer is full, the buffer manager must find more buffer memory or free
                                    application programs
                                    logical file system
                                    file-organization module
                                    basic file system
                                           I/O control
                                           devices
                            Figure 12.1    Layered file system.



                                            12.1       