Mutex Locks
     The hardware-based solutions to the critical-section problem presented in
     Section 5.4 are complicated as well as generally inaccessible to application
     programmers. Instead, operating-systems designers build software tools to
     solve the critical-section problem. The simplest of these tools is the mutex
     lock. (In fact, the term mutex is short for mutual exclusion.) We use the mutex
     lock to protect critical regions and thus prevent race conditions. That is, a
     process must acquire the lock before entering a critical section; it releases the
     lock when it exits the critical section. The acquire()function acquires the lock,
     and the release() function releases the lock, as illustrated in Figure 5.8.
     A mutex lock has a boolean variable available whose value indicates if
     the lock is available or not. If the lock is available, a call to acquire() succeeds,
     and the lock is then considered unavailable. A process that attempts to acquire
     an unavailable lock is blocked until the lock is released.
     The definition of acquire() is as follows:
                             acquire() {
                                     while (!available)
                                       ;   /*  busy    wait  */
                                     available = false;;
                             }
