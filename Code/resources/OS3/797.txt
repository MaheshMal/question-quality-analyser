Summary
       17.9.2.4  Consistency
       A client machine is sometimes faced with the problem of deciding whether a
       locally cached copy of data is consistent with the master copy (and hence can
       be used). If the client machine determines that its cached data are out of date,
       it must cache an up-to-date copy of the data before allowing further accesses.
       There are two approaches to verifying the validity of cached data:
       1.  Client-initiated approach. The client initiates a validity check, in which it
           contacts the server and checks whether the local data are consistent with
           the master copy. The frequency of the validity checking is the crux of
           this approach and determines the resulting consistency semantics. It can
           range from a check before every access to a check only on first access to
           a file (on file open, basically). Every access coupled with a validity check
           is delayed, compared with an access served immediately by the cache.
           Alternatively, checks can be initiated at fixed time intervals. Depending
           on its frequency, the validity check can load both the network and the
           server.
       2.  Server-initiated approach. The server records, for each client, the files
           (or parts of files) that it caches. When the server detects a potential
           inconsistency, it must react. A potential for inconsistency occurs when
           two different clients in conflicting modes cache a file. If UNIX semantics
           (Section 11.5.3) is implemented, we can resolve the potential inconsistency
           by having the server play an active role. The server must be notified
           whenever a file is opened, and the intended mode (read or write) must
           be indicated for every open. The server can then act when it detects that
           a file has been opened simultaneously in conflicting modes by disabling
           caching for that particular file. Actually, disabling caching results in
           switching to a remote-service mode of operation.
           Distributed file systems are in common use today, providing file sharing
       within LANs and across WANs as well. The complexity of implementing such
       a system should not be underestimated, especially considering that it must be
       operating-system independent for widespread adoption and must provide
       availability  and  good  performance  in  the  presence  of  long   distances     and
       sometimes-frail networking.
17.10  