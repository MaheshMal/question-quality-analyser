Input and Output
      inode. When data are read from one of these files, the /proc file system will
      collect the appropriate information, format it into textual form, and place it
      into the requesting process's read buffer.
      The mapping from inode number to information type splits the inode
      number into two fields. In Linux, a PID is 16 bits in size, but an inode number
      is 32 bits. The top 16 bits of the inode number are interpreted as a PID, and the
      remaining bits define what type of information is being requested about that
      process.
      A PID of zero is not valid, so a zero PID field in the inode number is
      taken to mean that this inode contains global--rather than process-specific--
      information. Separate global files exist in /proc to report information such as
      the kernel version, free memory, performance statistics, and drivers currently
      running.
      Not all the inode numbers in this range are reserved. The kernel can allocate
      new /proc inode mappings dynamically, maintaining a bitmap of allocated
      inode numbers. It also maintains a tree data structure of registered global /proc
      file-system entries. Each entry contains the file's inode number, file name, and
      access permissions, along with the special functions used to generate the file's
      contents. Drivers can register and deregister entries in this tree at any time,
      and a special section of the tree--appearing under the /proc/sys directory
      --is reserved for kernel variables. Files under this tree are managed by a set
      of common handlers that allow both reading and writing of these variables,
      so a system administrator can tune the value of kernel parameters simply by
      writing out the new desired values in ASCII decimal to the appropriate file.
      To allow efficient access to these variables from within applications, the
      /proc/sys subtree is made available through a special system call, sysctl(),
      that reads and writes the same variables in binary, rather than in text, without
      the overhead of the file system. sysctl() is not an extra facility; it simply reads
      the /proc dynamic entry tree to identify the variables to which the application
      is referring.
18.8  