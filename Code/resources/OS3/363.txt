Summary
     A deadlocked state occurs when two or more processes are waiting indefinitely
     for an event that can be caused only by one of the waiting processes. There are
     three principal methods for dealing with deadlocks:
     ·    Use some protocol to prevent or avoid deadlocks, ensuring that the system
          will never enter a deadlocked state.
     ·    Allow the system to enter a deadlocked state, detect it, and then recover.
     ·    Ignore the problem altogether and pretend that deadlocks never occur in
          the system.
     The third solution is the one used by most operating systems, including Linux
     and Windows.
          A deadlock can occur only if four necessary conditions hold simultaneously
     in the system: mutual exclusion, hold and wait, no preemption, and circular
     wait. To prevent deadlocks, we can ensure that at least one of the necessary
     conditions never holds.
          A method for avoiding deadlocks, rather than preventing them, requires
     that the operating system have a priori information about how each process
     will utilize system resources. The banker's algorithm, for example, requires
     a priori information about the maximum number of each resource class that
     each process may request. Using this information, we can define a deadlock-
     avoidance algorithm.
          If a system does not employ a protocol to ensure that deadlocks will never
     occur, then a detection-and-recovery scheme may be employed. A deadlock-
     detection  algorithm  must  be  invoked    to  determine  whether  a  deadlock
     has occurred. If a deadlock is detected, the system must recover either by
     terminating some of the deadlocked processes or by preempting resources
     from some of the deadlocked processes.
          Where preemption is used to deal with deadlocks, three issues must be
     addressed: selecting a victim, rollback, and starvation. In a system that selects
     victims for rollback primarily on the basis of cost factors, starvation may occur,
     and the selected process can never complete its designated task.
          Researchers have argued that none of the basic approaches alone is appro-
     priate for the entire spectrum of resource-allocation problems in operating
     systems. The basic approaches can be combined, however, allowing us to select
     an optimal approach for each class of resources in a system.
Practice  Exercises
     7.1  List three examples of deadlocks that are not related to a computer-
          system environment.
     7.2  Suppose that a system is in an unsafe state. Show that it is possible for
          the processes to complete their execution without entering a deadlocked
          state.



340  Chapter 7  Deadlocks
     7.3  Consider the following snapshot       of a system:
                                  Allocation    Max           Available
                                  ABCD          ABCD          ABCD
                           P0     0012          0012          1520
                           P1     1000          1750
                           P2     1354          2356
                           P3     0632          0652
                           P4     0014          0656
          Answer the following questions using the banker's algorithm:
          a.    What is the content of the matrix Need?
          b.    Is the system in a safe state?
          c.    If a request from process P1 arrives for (0,4,2,0), can the request be
                granted immediately?
     7.4  A possible method for preventing deadlocks is to have a single, higher-
          order resource that must be requested before any other resource. For
          example,  if  multiple  threads  attempt  to   access  the  synchronization
          objects A · · · E, deadlock is possible. (Such synchronization objects may
          include mutexes, semaphores, condition variables, and the like.) We can
          prevent the deadlock by adding a sixth object F . Whenever a thread
          wants to acquire the synchronization lock for any object A · · · E, it must
          first acquire the lock for object F . This solution is known as containment:
          the locks for objects A · · · E are contained within the lock for object F .
          Compare this scheme with the circular-wait scheme of Section 7.4.4.
     7.5  Prove that the safety algorithm presented in Section 7.5.3 requires an
          order of m × n2 operations.
     7.6  Consider a computer system that runs 5,000 jobs per month and has no
          deadlock-prevention or deadlock-avoidance scheme. Deadlocks occur
          about twice per month, and the operator must terminate and rerun
          about ten jobs per deadlock. Each job is worth about two dollars (in CPU
          time), and the jobs terminated tend to be about half done when they are
          aborted.
                A systems programmer has estimated that a deadlock-avoidance
          algorithm (like the banker's algorithm) could be installed in the system
          with an increase of about 10 percent in the average execution time per
          job. Since the machine currently has 30 percent idle time, all 5,000 jobs
          per month could still be run, although turnaround time would increase
          by about 20 percent on average.
          a.    What are the arguments for installing the deadlock-avoidance
                algorithm?
          b.    What are the arguments against installing the deadlock-avoidance
                algorithm?



                                                                        Exercises        341
7.7        Can a system detect that some of its processes are starving? If you answer
           "yes," explain how it can. If you answer "no," explain how the system
           can deal with the starvation problem.
7.8        Consider  the  following  resource-allocation  policy.  Requests        for  and
           releases of resources are allowed at any time. If a request for resources
           cannot be satisfied because the resources are not available, then we check
           any processes that are blocked waiting for resources. If a blocked process
           has the desired resources, then these resources are taken away from it
           and are given to the requesting process. The vector of resources for which
           the blocked process is waiting is increased to include the resources that
           were taken away.
                For example, a system has three resource types, and the vector
           Available is initialized to (4,2,2). If process P0 asks for (2,2,1), it gets
           them. If P1 asks for (1,0,1), it gets them. Then, if P0 asks for (0,0,1), it
           is blocked (resource not available). If P2 now asks for (2,0,0), it gets the
           available one (1,0,0), as well as one that was allocated to P0 (since P0 is
           blocked). P0's Allocation vector goes down to (1,2,1), and its Need vector
           goes up to (1,0,1).
           a.   Can deadlock occur? If you answer "yes," give an example. If you
                answer "no," specify which necessary condition cannot occur.
           b.   Can indefinite blocking occur? Explain your answer.
7.9        Suppose that you have coded the deadlock-avoidance safety algorithm
           and now have been asked to implement the deadlock-detection algo-
           rithm. Can you do so by simply using the safety algorithm code and
           redefining Maxi = Waitingi + Allocationi , where Waitingi is a vector
           specifying the resources for which process i is waiting and Allocationi
           is as defined in Section 7.5? Explain your answer.
7.10       Is it possible to have a deadlock involving only one single-threaded
           process? Explain your answer.
Exercises
7.11       Consider the traffic deadlock depicted in Figure 7.10.
           a.   Show that the four necessary conditions for deadlock hold in this
                example.
           b.   State a simple rule for avoiding deadlocks in this system.
7.12       Assume a multithreaded application uses only reader­writer locks for
           synchronization. Applying the four necessary conditions for deadlock,
           is deadlock still possible if multiple reader­writer locks are used?
7.13       The  program   example    shown  in  Figure  7.4    doesn't  always     lead  to
           deadlock. Describe what role the CPU scheduler plays and how it can
           contribute to deadlock in this program.



342  Chapter 7     Deadlocks
                              ·
                              ·
                              ·
                                                                           ·  ·  ·
                ·  ·  ·
                                                           ·
                                                           ·
                                                           ·
                         Figure 7.10  Traffic deadlock for Exercise 7.11.
     7.14  In Section 7.4.4, we describe a situation in which we prevent deadlock
           by ensuring that all locks are acquired in a certain order. However,
           we also point out that deadlock is possible in this situation if two
           threads simultaneously invoke the transaction() function. Fix the
           transaction() function to prevent deadlocks.
     7.15  Compare the circular-wait scheme with the various deadlock-avoidance
           schemes (like the banker's algorithm) with respect to the following
           issues:
           a.      Runtime overheads
           b.      System throughput
     7.16  In   a  real  computer  system,   neither  the  resources       available  nor  the
           demands of processes for resources are consistent over long periods
           (months). Resources break or are replaced, new processes come and go,
           and new resources are bought and added to the system. If deadlock is
           controlled by the banker's algorithm, which of the following changes
           can be made safely (without introducing the possibility of deadlock),
           and under what circumstances?
           a.      Increase Available (new resources added).
           b.      Decrease Available (resource permanently removed from system).
           c.      Increase Max for one process (the process needs or wants more
                   resources than allowed).
           d.      Decrease Max for one process (the process decides it does not need
                   that many resources).



                                                            Exercises                  343
      e.  Increase the number of processes.
      f.  Decrease the number of processes.
7.17  Consider a system consisting of four resources of the same type that are
      shared by three processes, each of which needs at most two resources.
      Show that the system is deadlock free.
7.18  Consider a system consisting of m resources of the same type being
      shared by n processes. A process can request or release only one resource
      at a time. Show that the system is deadlock free if the following two
      conditions hold:
      a.  The maximum need of each process is between one resource and
          m resources.
      b.  The sum of all maximum needs is less than m + n.
7.19  Consider the version of the dining-philosophers problem in which the
      chopsticks are placed at the center of the table and any two of them
      can be used by a philosopher. Assume that requests for chopsticks are
      made one at a time. Describe a simple rule for determining whether a
      particular request can be satisfied without causing deadlock given the
      current allocation of chopsticks to philosophers.
7.20  Consider again the setting in the preceding question. Assume now that
      each philosopher requires three chopsticks to eat. Resource requests are
      still issued one at a time. Describe some simple rules for determining
      whether a particular request can be satisfied without causing deadlock
      given the current allocation of chopsticks to philosophers.
7.21  We can obtain the banker's algorithm for a single resource type from
      the general banker's algorithm simply by reducing the dimensionality
      of the various arrays by 1. Show through an example that we cannot
      implement the multiple-resource-type banker's scheme by applying the
      single-resource-type scheme to each resource type individually.
7.22  Consider the following snapshot of a system:
                                    Allocation      Max
                                    ABCD        ABCD
                        P0          3014        5117
                        P1          2210        3211
                        P2          3121        3321
                        P3          0510        4612
                        P4          4212        6325
      Using the banker's algorithm, determine whether or not each of the
      following states is unsafe. If the state is safe, illustrate the order in which
      the processes may complete. Otherwise, illustrate why the state is unsafe.
      a.  Available = (0, 3, 0, 1)
      b.  Available = (1, 0, 0, 2)



344  Chapter 7   Deadlocks
     7.23  Consider the following snapshot of a system:
                                 Allocation          Max   Available
                                     ABCD      ABCD            ABCD
                             P0      2001      4212            3321
                             P1      3121      5252
                             P2      2103      2316
                             P3      1312      1424
                             P4      1432      3665
           Answer the following questions using the banker's algorithm:
           a.    Illustrate that the system is in a safe state by demonstrating an
                 order in which the processes may complete.
           b.    If a request from process P1 arrives for (1, 1, 0, 0), can the request
                 be granted immediately?
           c.    If a request from process P4 arrives for (0, 0, 2, 0), can the request
                 be granted immediately?
     7.24  What  is  the     optimistic  assumption  made  in  the  deadlock-detection
           algorithm? How can this assumption be violated?
     7.25  A    single-lane  bridge  connects  the   two  Vermont   villages     of  North
           Tunbridge and South Tunbridge. Farmers in the two villages use this
           bridge to deliver their produce to the neighboring town. The bridge
           can become deadlocked if a northbound and a southbound farmer get
           on the bridge at the same time. (Vermont farmers are stubborn and are
           unable to back up.) Using semaphores and/or mutex locks, design an
           algorithm in pseudocode that prevents deadlock. Initially, do not be
           concerned about starvation (the situation in which northbound farmers
           prevent southbound farmers from using the bridge, or vice versa).
     7.26  Modify your solution to Exercise 7.25 so that it is starvation-free.
Programming Problems
     7.27  Implement your solution to Exercise 7.25 using POSIX synchronization.
           In particular, represent northbound and southbound farmers as separate
           threads. Once a farmer is on the bridge, the associated thread will sleep
           for a random period of time, representing traveling across the bridge.
           Design your program so that you can create several threads representing
           the northbound and southbound farmers.



                                                          Programming Projects        345
Programming Projects
Banker's Algorithm
For this project, you will write a multithreaded program that implements the
banker's algorithm discussed in Section 7.5.3. Several customers request and
release resources from the bank. The banker will grant a request only if it leaves
the system in a safe state. A request that leaves the system in an unsafe state
will be denied. This programming assignment combines three separate topics:
(1) multithreading, (2) preventing race conditions, and (3) deadlock avoidance.
The Banker
The banker will consider requests from n customers for m resources types. as
outlined in Section 7.5.3. The banker will keep track of the resources using the
following data structures:
/*     these  may    be  any  values     >=   0   */
#define       NUMBER OF     CUSTOMERS    5
#define       NUMBER OF     RESOURCES    3
/*     the  available    amount      of  each     resource      */
int    available[NUMBER OF         RESOURCES];
/*the       maximum  demand    of    each    customer     */
int    maximum[NUMBER OF         CUSTOMERS][NUMBER        OF RESOURCES];
/*     the  amount   currently       allocated        to  each  customer  */
int    allocation[NUMBER         OF CUSTOMERS][NUMBER OF              RESOURCES];
/*     the  remaining    need    of  each     customer    */
int    need[NUMBER       OF CUSTOMERS][NUMBER OF          RESOURCES];
The Customers
Create n customer threads that request and release resources from the bank.
The customers will continually loop, requesting and then releasing random
numbers of resources. The customers' requests for resources will be bounded
by their respective values in the need array. The banker will grant a request if
it satisfies the safety algorithm outlined in Section 7.5.3.1. If a request does not
leave the system in a safe state, the banker will deny it. Function prototypes
for requesting and releasing resources are as follows:
int    request  resources(int         customer num,       int       request[]);
int    release  resources(int         customer num,       int       release[]);
These  two  functions    should  return    0  if  successful    (the  request  has  been
granted) and ­1 if unsuccessful. Multiple threads (customers) will concurrently



346  Chapter 7  Deadlocks
     access shared data through these two functions. Therefore, access must be
     controlled through mutex locks to prevent race conditions. Both the Pthreads
     and Windows APIs provide mutex locks. The use of Pthreads mutex locks is
     covered in Section 5.9.4; mutex locks for Windows systems are described in the
     project entitled "Producer­Consumer Problem" at the end of Chapter 5.
     Implementation
     You should invoke your program by passing the number of resources of each
     type on the command line. For example, if there were three resource types,
     with ten instances of the first type, five of the second type, and seven of the
     third type, you would invoke your program follows:
     ./a.out        10  5  7
     The available array would be initialized to these values. You may initialize
     the maximum array (which holds the maximum demand of each customer) using
     any method you find convenient.
Bibliographical Notes
     Most research involving deadlock was conducted many years ago. [Dijkstra
     (1965)] was one of the first and most influential contributors in the deadlock
     area. [Holt (1972)] was the first person to formalize the notion of deadlocks in
     terms of an allocation-graph model similar to the one presented in this chapter.
     Starvation was also covered by [Holt (1972)]. [Hyman (1985)] provided the
     deadlock example from the Kansas legislature. A study of deadlock handling
     is provided in [Levine (2003)].
     The various prevention algorithms were suggested by [Havender (1968)],
     who devised the resource-ordering scheme for the IBM OS/360 system. The
     banker's algorithm for avoiding deadlocks was developed for a single resource
     type by [Dijkstra (1965)] and was extended to multiple resource types by
     [Habermann (1969)].
     The deadlock-detection algorithm for multiple instances of a resource type,
     which is described in Section 7.6.2, was presented by [Coffman et al. (1971)].
     [Bach (1987)] describes how many of the algorithms in the traditional
     UNIX kernel handle deadlock. Solutions to deadlock problems in networks are
     discussed in works such as [Culler et al. (1998)] and [Rodeheffer and Schroeder
     (1991)].
     The witness lock-order verifier is presented in [Baldwin (2002)].
Bibliography
     [Bach (1987)]     M. J. Bach, The Design of the UNIX Operating System, Prentice Hall
     (1987).
     [Baldwin (2002)]   J. Baldwin, "Locking in the Multithreaded FreeBSD Kernel",
     USENIX BSD (2002).



                                                           Bibliography            347
[Coffman et al. (1971)]      E. G. Coffman, M. J. Elphick, and A. Shoshani, "System
Deadlocks", Computing Surveys, Volume 3, Number 2 (1971), pages 67­78.
[Culler et al. (1998)]   D. E. Culler, J. P. Singh, and A. Gupta, Parallel Computer
Architecture: A Hardware/Software Approach, Morgan Kaufmann Publishers Inc.
(1998).
[Dijkstra (1965)]       E. W. Dijkstra, "Cooperating Sequential Processes", Technical
report, Technological University, Eindhoven, the Netherlands (1965).
[Habermann (1969)]       A.  N.  Habermann,   "Prevention  of  System  Deadlocks",
Communications of the ACM, Volume 12, Number 7 (1969), pages 373­377, 385.
[Havender (1968)]       J. W. Havender, "Avoiding Deadlock in Multitasking Sys-
tems", IBM Systems Journal, Volume 7, Number 2 (1968), pages 74­84.
[Holt (1972)]      R. C. Holt, "Some Deadlock Properties of Computer Systems",
Computing Surveys, Volume 4, Number 3 (1972), pages 179­196.
[Hyman (1985)]     D. Hyman, The Columbus Chicken Statute and More Bonehead
Legislation, S. Greene Press (1985).
[Levine (2003)]    G. Levine, "Defining Deadlock", Operating Systems Review, Vol-
ume 37, Number 1 (2003).
[Rodeheffer and Schroeder (1991)]     T.  L.  Rodeheffer   and  M.  D.  Schroeder,
"Automatic Reconfiguration in Autonet", Proceedings of the ACM Symposium
on Operating Systems Principles (1991), pages 183­97.






             Part Three
Memory
Management
The main purpose of a computer system is to execute programs. These
programs, together with the data they access, must be at least partially
in main memory during execution.
To  improve  both  the  utilization  of  the  CPU  and  the  speed  of    its
response to users, a general-purpose computer must keep several pro-
cesses in memory. Many memory-management schemes exist, reflect-
ing various approaches, and the effectiveness of each algorithm depends
on the situation. Selection of a memory-management scheme for a sys-
tem depends on many factors, especially on the hardware design of the
system. Most algorithms require hardware support.



