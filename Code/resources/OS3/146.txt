Interprocess Communication
     Processes  executing     concurrently    in  the  operating  system  may    be  either
     independent processes or cooperating processes. A process is         independent
     if it cannot affect or be affected by the other processes executing in the system.
     Any process that does not share data with any other process is independent. A
     process is cooperating if it can affect or be affected by the other processes
     executing in the system. Clearly, any process that shares data with other
     processes is a cooperating process.
        There are several reasons for providing an environment that allows process
     cooperation:
     路  Information sharing. Since several users may be interested in the same
        piece of information (for instance, a shared file), we must provide an
        environment to allow concurrent access to such information.
     路  Computation speedup. If we want a particular task to run faster, we must
        break it into subtasks, each of which will be executing in parallel with the
        others. Notice that such a speedup can be achieved only if the computer
        has multiple processing cores.
     路  Modularity. We may want to construct the system in a modular fashion,
        dividing the system functions into separate processes or threads, as we
        discussed in Chapter 2.
     路  Convenience. Even an individual user may work on many tasks at the
        same time. For instance, a user may be editing, listening to music, and
        compiling in parallel.
        Cooperating processes require an interprocess communication (IPC) mech-
     anism that will allow them to exchange data and information. There are two
     fundamental models of interprocess communication: shared memory and mes-
     sage passing. In the shared-memory model, a region of memory that is shared
     by cooperating processes is established. Processes can then exchange informa-
     tion by reading and writing data to the shared region. In the message-passing
     model, communication takes place by means of messages exchanged between
     the cooperating processes. The two communications models are contrasted in
     Figure 3.12.
        Both of the models just mentioned are common in operating systems,
     and many systems implement both. Message passing is useful for exchanging
     smaller  amounts  of     data,  because  no  conflicts  need  be  avoided.  Message
     passing is also easier to implement in a distributed system than shared memory.
     (Although there are systems that provide distributed shared memory, we do not
     consider them in this text.) Shared memory can be faster than message passing,
     since message-passing systems are typically implemented using system calls



                              3.4           