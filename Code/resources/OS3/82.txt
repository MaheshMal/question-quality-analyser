User and Operating-System Interface
     We mentioned earlier that there are several ways for users to interface with
     the operating system. Here, we discuss two fundamental approaches. One
     provides a command-line interface, or command interpreter, that allows users
     to directly enter commands to be performed by the operating system. The
     other allows users to interface with the operating system via a graphical user
     interface, or GUI.
     2.2.1  Command Interpreters
     Some operating systems include the command interpreter in the kernel. Others,
     such as Windows and UNIX, treat the command interpreter as a special program
     that is running when a job is initiated or when a user first logs on (on interactive
     systems). On systems with multiple command interpreters to choose from, the
     interpreters are known as shells. For example, on UNIX and Linux systems, a
     user may choose among several different shells, including the Bourne shell, C
     shell, Bourne-Again shell, Korn shell, and others. Third-party shells and free
     user-written shells are also available. Most shells provide similar functionality,
     and a user's choice of which shell to use is generally based on personal
     preference. Figure 2.2 shows the Bourne shell command interpreter being used
     on Solaris 10.
     The main function of the command interpreter is to get and execute the next
     user-specified command. Many of the commands given at this level manipulate
     files: create, delete, list, print, copy, execute, and so on. The MS-DOS and UNIX
     shells operate in this way. These commands can be implemented in two general
     ways.
     In one approach, the command interpreter itself contains the code to
     execute the command. For example, a command to delete a file may cause
     the command interpreter to jump to a section of its code that sets up the
     parameters and makes the appropriate system call. In this case, the number of
     commands that can be given determines the size of the command interpreter,
     since each command requires its own implementing code.
     An alternative approach--used by UNIX, among other operating systems
     --implements most commands through system programs. In this case, the
     command interpreter does not understand the command in any way; it merely
     uses the command to identify a file to be loaded into memory and executed.
     Thus, the UNIX command to delete a file
                                     rm  file.txt
     would search for a file called rm, load the file into memory, and execute it with
     the parameter file.txt. The function associated with the rm command would



                         2.2  