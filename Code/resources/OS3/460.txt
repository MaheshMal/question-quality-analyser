Allocating Kernel Memory
     When a process running in user mode requests additional memory, pages
     are allocated from the list of free page frames maintained by the kernel.
     This list is typically populated using a page-replacement algorithm such as
     those discussed in Section 9.4 and most likely contains free pages scattered
     throughout physical memory, as explained earlier. Remember, too, that if a
     user process requests a single byte of memory, internal fragmentation will
     result, as the process will be granted an entire page frame.
         Kernel memory is often allocated from a free-memory pool different from
     the list used to satisfy ordinary user-mode processes. There are two primary
     reasons for this:
     1.  The kernel requests memory for data structures of varying sizes, some of
         which are less than a page in size. As a result, the kernel must use memory
         conservatively and attempt to minimize waste due to fragmentation. This
         is especially important because many operating systems do not subject
         kernel code or data to the paging system.
     2.  Pages allocated to user-mode processes do not necessarily have to be in
         contiguous physical memory. However, certain hardware devices interact
         directly with physical memory--without the benefit of a virtual memory
         interface--and consequently may require memory residing in physically
         contiguous pages.
     In the following sections, we examine two strategies for managing free memory
     that is assigned to kernel processes: the "buddy system" and slab allocation.
     9.8.1    Buddy System
     The buddy system allocates memory from a fixed-size segment consisting of
     physically contiguous pages. Memory is allocated from this segment using a
     power-of-2 allocator, which satisfies requests in units sized as a power of 2
     (4 KB, 8 KB, 16 KB, and so forth). A request in units not appropriately sized is
     rounded up to the next highest power of 2. For example, a request for 11 KB is
     satisfied with a 16-KB segment.
         Let's consider a simple example. Assume the size of a memory segment
     is initially 256 KB and the kernel requests 21 KB of memory. The segment is
     initially divided into two buddies--which we will call AL and AR --each 128
     KB in size. One of these buddies is further divided into two 64-KB buddies--
     BL and BR. However, the next-highest power of 2 from 21 KB is 32 KB so either
     BL or BR is again divided into two 32-KB buddies, CL and CR. One of these



                                            9.8     