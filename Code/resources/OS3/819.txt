Scheduling
      18.4.2  Processes and Threads
      Linux provides the fork() system call, which duplicates a process without
      loading a new executable image. Linux also provides the ability to create
      threads via the clone() system call. Linux does not distinguish between
      processes and threads, however. In fact, Linux generally uses the term task
      --rather than process or thread--when referring to a flow of control within a
      program. The clone() system call behaves identically to fork(), except that
      it accepts as arguments a set of flags that dictate what resources are shared
      between the parent and child (whereas a process created with fork() shares
      no resources with its parent). The flags include:
                  flag                       meaning
                  CLONE_FS             File-system information is shared.
                  CLONE_VM             The same memory space is shared.
              CLONE_SIGHAND                  Signal handlers are shared.
                  CLONE_FILES          The set of open files is shared.
      Thus, if clone() is passed the flags CLONE FS, CLONE VM, CLONE SIGHAND,
      and CLONE FILES, the parent and child tasks will share the same file-system
      information (such as the current working directory), the same memory space,
      the same signal handlers, and the same set of open files. Using clone() in this
      fashion is equivalent to creating a thread in other systems, since the parent
      task shares most of its resources with its child task. If none of these flags is set
      when clone() is invoked, however, the associated resources are not shared,
      resulting in functionality similar to that of the fork() system call.
      The lack of distinction between processes and threads is possible because
      Linux does not hold a process's entire context within the main process data
      structure. Rather, it holds the context within independent subcontexts. Thus,
      a process's file-system context, file-descriptor table, signal-handler table, and
      virtual memory context are held in separate data structures. The process data
      structure simply contains pointers to these other structures, so any number of
      processes can easily share a subcontext by pointing to the same subcontext and
      incrementing a reference count.
      The arguments to the clone() system call tell it which subcontexts to copy
      and which to share. The new process is always given a new identity and a new
      scheduling context--these are the essentials of a Linux process. According to
      the arguments passed, however, the kernel may either create new subcontext
      data structures initialized so as to be copies of the parent's or set up the new
      process to use the same subcontext data structures being used by the parent.
      The fork() system call is nothing more than a special case of clone() that
      copies all subcontexts, sharing none.
18.5  