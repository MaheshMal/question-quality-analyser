Allocation of Frames
          Another modification is to keep a pool of free frames but to remember
     which page was in each frame. Since the frame contents are not modified when
     a frame is written to the disk, the old page can be reused directly from the
     free-frame pool if it is needed before that frame is reused. No I/O is needed in
     this case. When a page fault occurs, we first check whether the desired page is
     in the free-frame pool. If it is not, we must select a free frame and read into it.
          This technique is used in the VAX/VMS system along with a FIFO replace-
     ment algorithm. When the FIFO replacement algorithm mistakenly replaces a
     page that is still in active use, that page is quickly retrieved from the free-frame
     pool, and no I/O is necessary. The free-frame buffer provides protection against
     the relatively poor, but simple, FIFO replacement algorithm. This method is
     necessary because the early versions of VAX did not implement the reference
     bit correctly.
          Some versions of the UNIX system use this method in conjunction with
     the second-chance algorithm. It can be a useful augmentation to any page-
     replacement algorithm, to reduce the penalty incurred if the wrong victim
     page is selected.
     9.4.8  Applications and Page Replacement
     In certain cases, applications accessing data through the operating system's
     virtual memory perform worse than if the operating system provided no
     buffering at all. A typical example is a database, which provides its own
     memory management and I/O buffering. Applications like this understand
     their memory use and disk use better than does an operating system that is
     implementing algorithms for general-purpose use. If the operating system is
     buffering I/O and the application is doing so as well, however, then twice the
     memory is being used for a set of I/O.
          In another example, data warehouses frequently perform massive sequen-
     tial disk reads, followed by computations and writes. The LRU algorithm would
     be removing old pages and preserving new ones, while the application would
     more likely be reading older pages than newer ones (as it starts its sequential
     reads again). Here, MFU would actually be more efficient than LRU.
          Because of such problems, some operating systems give special programs
     the ability to use a disk partition as a large sequential array of logical blocks,
     without any file-system data structures. This array is sometimes called the raw
     disk, and I/O to this array is termed raw I/O. Raw I/O bypasses all the file-
     system services, such as file I/O demand paging, file locking, prefetching, space
     allocation, file names, and directories. Note that although certain applications
     are  more  efficient  when  implementing  their  own  special-purpose  storage
     services on a raw partition, most applications perform better when they use
     the regular file-system services.
9.5  