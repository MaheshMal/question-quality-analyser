Operating-System Examples
      Lock bits are used in various situations. Frequently, some or all of the
      operating-system   kernel  is  locked  into  memory.  Many      operating  systems
      cannot tolerate a page fault caused by the kernel or by a specific kernel module,
      including the one performing memory management. User processes may also
      need to lock pages into memory. A database process may want to manage
      a chunk of memory, for example, moving blocks between disk and memory
      itself because it has the best knowledge of how it is going to use its data. Such
      pinning of pages in memory is fairly common, and most operating systems
      have a system call allowing an application to request that a region of its logical
      address space be pinned. Note that this feature could be abused and could
      cause stress on the memory-management algorithms. Therefore, an application
      frequently requires special privileges to make such a request.
      Another use for a lock bit involves normal page replacement. Consider
      the following sequence of events: A low-priority process faults. Selecting a
      replacement frame, the paging system reads the necessary page into memory.
      Ready to continue, the low-priority process enters the ready queue and waits
      for the CPU. Since it is a low-priority process, it may not be selected by the
      CPU scheduler for a time. While the low-priority process waits, a high-priority
      process faults. Looking for a replacement, the paging system sees a page that
      is in memory but has not been referenced or modified: it is the page that the
      low-priority process just brought in. This page looks like a perfect replacement:
      it is clean and will not need to be written out, and it apparently has not been
      used for a long time.
      Whether the high-priority process should be able to replace the low-priority
      process is a policy decision. After all, we are simply delaying the low-priority
      process for the benefit of the high-priority process. However, we are wasting
      the effort spent to bring in the page for the low-priority process. If we decide
      to prevent replacement of a newly brought-in page until it can be used at least
      once, then we can use the lock bit to implement this mechanism. When a page
      is selected for replacement, its lock bit is turned on. It remains on until the
      faulting process is again dispatched.
      Using a lock bit can be dangerous: the lock bit may get turned on but
      never turned off. Should this situation occur (because of a bug in the operating
      system, for example), the locked frame becomes unusable. On a single-user
      system, the overuse of locking would hurt only the user doing the locking.
      Multiuser systems must be less trusting of users. For instance, Solaris allows
      locking "hints," but it is free to disregard these hints if the free-frame pool
      becomes too small or if an individual process requests that too many pages be
      locked in memory.
9.10  