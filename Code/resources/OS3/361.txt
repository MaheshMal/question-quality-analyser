Recovery from Deadlock
     processes but also the specific process that "caused" the deadlock. (In reality,
     each of the deadlocked processes is a link in the cycle in the resource graph, so
     all of them, jointly, caused the deadlock.) If there are many different resource
     types, one request may create many cycles in the resource graph, each cycle
     completed by the most recent request and "caused" by the one identifiable
     process.
        Of course, invoking the deadlock-detection algorithm for every resource
     request will incur considerable overhead in computation time. A less expensive
     alternative is simply to invoke the algorithm at defined intervals--for example,
     once per hour or whenever CPU utilization drops below 40 percent. (A deadlock
     eventually cripples system throughput and causes CPU utilization to drop.) If
     the detection algorithm is invoked at arbitrary points in time, the resource
     graph may contain many cycles. In this case, we generally cannot tell which of
     the many deadlocked processes "caused" the deadlock.
7.7  