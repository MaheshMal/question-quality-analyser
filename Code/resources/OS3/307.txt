Real-Time CPU Scheduling
     be flushed before the other thread can begin execution on the processor core.
     Once this new thread begins execution, it begins filling the pipeline with its
     instructions. Fine-grained (or interleaved) multithreading switches between
     threads at a much finer level of granularity--typically at the boundary of an
     instruction cycle. However, the architectural design of fine-grained systems
     includes logic for thread switching. As a result, the cost of switching between
     threads is small.
     Notice that a multithreaded multicore processor actually requires two
     different levels of scheduling. On one level are the scheduling decisions that
     must be made by the operating system as it chooses which software thread to
     run on each hardware thread (logical processor). For this level of scheduling,
     the operating system may choose any scheduling algorithm, such as those
     described in Section 6.3. A second level of scheduling specifies how each core
     decides which hardware thread to run. There are several strategies to adopt
     in this situation. The UltraSPARC T3, mentioned earlier, uses a simple round-
     robin algorithm to schedule the eight hardware threads to each core. Another
     example,  the  Intel  Itanium,  is  a  dual-core  processor  with  two  hardware-
     managed threads per core. Assigned to each hardware thread is a dynamic
     urgency value ranging from 0 to 7, with 0 representing the lowest urgency
     and 7 the highest. The Itanium identifies five different events that may trigger
     a thread switch. When one of these events occurs, the thread-switching logic
     compares the urgency of the two threads and selects the thread with the highest
     urgency value to execute on the processor core.
6.6  