Types of System Calls
     System  calls  can     be  grouped  roughly  into  six  major         categories:  process
     control, file manipulation, device manipulation, information maintenance,
     communications, and protection. In Sections 2.4.1 through 2.4.6, we briefly
     discuss the types of system calls that may be provided by an operating system.
     Most of these system calls support, or are supported by, concepts and functions
     that are discussed in later chapters. Figure 2.8 summarizes the types of system
     calls normally provided by an operating system. As mentioned, in this text,
     we normally refer to the system calls by generic names. Throughout the text,
     however, we provide examples of the actual counterparts to the system calls
     for Windows, UNIX, and Linux systems.
     2.4.1   Process Control
     A running program needs to be able to halt its execution either normally
     (end()) or abnormally (abort()). If a system call is made to terminate the
     currently running program abnormally, or if the program runs into a problem
     and causes an error trap, a dump of memory is sometimes taken and an error
     message generated. The dump is written to disk and may be examined by
     a debugger--a system program designed to aid the programmer in finding
     and correcting errors, or bugs--to determine the cause of the problem. Under
     either normal or abnormal circumstances, the operating system must transfer
     control to the invoking command interpreter. The command interpreter then
     reads the next command. In an interactive system, the command interpreter
     simply continues with the next command; it is assumed that the user will
     issue an appropriate command to respond to any error. In a GUI system, a
     pop-up window might alert the user to the error and ask for guidance. In a
     batch system, the command interpreter usually terminates the entire job and
     continues with the next job. Some systems may allow for special recovery
     actions in case an error occurs. If the program discovers an error in its input
     and wants to terminate abnormally, it may also want to define an error level.
     More severe errors can be indicated by a higher-level error parameter. It is then



                                              2.4  