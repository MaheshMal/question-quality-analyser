System Model
     A system consists of a finite number of resources to be distributed among a
     number of competing processes. The resources may be partitioned into several
                                                                                        315



316  Chapter 7      Deadlocks
     types (or classes), each consisting of some number of identical instances. CPU
     cycles, files, and I/O devices (such as printers and DVD drives) are examples of
     resource types. If a system has two CPUs, then the resource type CPU has two
     instances. Similarly, the resource type printer may have five instances.
         If a process requests an instance of a resource type, the allocation of any
     instance of the type should satisfy the request. If it does not, then the instances
     are not identical, and the resource type classes have not been defined properly.
     For example, a system may have two printers. These two printers may be
     defined to be in the same resource class if no one cares which printer prints
     which output. However, if one printer is on the ninth floor and the other is
     in the basement, then people on the ninth floor may not see both printers
     as equivalent, and separate resource classes may need to be defined for each
     printer.
         Chapter 5 discussed various synchronization tools, such as mutex locks
     and semaphores. These tools are also considered system resources, and they
     are a common source of deadlock. However, a lock is typically associated with
     protecting a specific data structure--that is, one lock may be used to protect
     access to a queue, another to protect access to a linked list, and so forth. For that
     reason, each lock is typically assigned its own resource class, and definition is
     not a problem.
         A process must request a resource before using it and must release the
     resource after using it. A process may request as many resources as it requires
     to carry out its designated task. Obviously, the number of resources requested
     may not exceed the total number of resources available in the system. In other
     words, a process cannot request three printers if the system has only two.
         Under the normal mode of operation, a process may utilize a resource in
     only the following sequence:
     1.  Request. The process requests the resource. If the request cannot be
         granted immediately (for example, if the resource is being used by another
         process), then the requesting process must wait until it can acquire the
         resource.
     2.  Use. The process can operate on the resource (for example, if the resource
         is a printer, the process can print on the printer).
     3.  Release. The process releases the resource.
         The request and release of resources may be system calls, as explained in
     Chapter 2. Examples are the request() and release() device, open() and
     close() file, and allocate() and free() memory system calls. Similarly,
     as  we    saw  in  Chapter  5,  the  request  and  release  of  semaphores   can       be
     accomplished through the wait() and signal() operations on semaphores
     or through acquire() and release() of a mutex lock. For each use of a
     kernel-managed resource by a process or thread, the operating system checks
     to make sure that the process has requested and has been allocated the resource.
     A system table records whether each resource is free or allocated. For each
     resource that is allocated, the table also records the process to which it is
     allocated. If a process requests a resource that is currently allocated to another
     process, it can be added to a queue of processes waiting for this resource.
         A set of processes is in a deadlocked state when every process in the set is
     waiting for an event that can be caused only by another process in the set. The
