Interprocess Communication
      Linux provides a rich environment for processes to communicate with each
      other. Communication may be just a matter of letting another process know
      that some event has occurred, or it may involve transferring data from one
      process to another.
      18.9.1  Synchronization and Signals
      The standard Linux mechanism for informing a process that an event has
      occurred is the signal. Signals can be sent from any process to any other
      process, with restrictions on signals sent to processes owned by another user.
      However, a limited number of signals are available, and they cannot carry
      information. Only the fact that a signal has occurred is available to a process.
      Signals are not generated only by processes. The kernel also generates signals
      internally. For example, it can send a signal to a server process when data
      arrive on a network channel, to a parent process when a child terminates, or to
      a waiting process when a timer expires.
      Internally, the Linux kernel does not use signals to communicate with
      processes running in kernel mode. If a kernel-mode process is expecting an
      event to occur, it will not use signals to receive notification of that event.
      Rather, communication about incoming asynchronous events within the kernel
      takes place through the use of scheduling states and wait queue structures.
      These mechanisms allow kernel-mode processes to inform one another about
      relevant events, and they also allow events to be generated by device drivers or
      by the networking system. Whenever a process wants to wait for some event
      to complete, it places itself on a wait queue associated with that event and
      tells the scheduler that it is no longer eligible for execution. Once the event has
      completed, every process on the wait queue will be awoken. This procedure
      allows multiple processes to wait for a single event. For example, if several
      processes are trying to read a file from a disk, then they will all be awakened
      once the data have been read into memory successfully.
      Although signals have always been the main mechanism for commu-
      nicating asynchronous events among processes, Linux also implements the
      semaphore mechanism of System V UNIX. A process can wait on a semaphore
      as easily as it can wait for a signal, but semaphores have two advantages:
      large numbers of semaphores can be shared among multiple independent pro-
      cesses, and operations on multiple semaphores can be performed atomically.
      Internally, the standard Linux wait queue mechanism synchronizes processes
      that are communicating with semaphores.
      18.9.2  Passing of Data among Processes
      Linux offers several mechanisms for passing data among processes. The stan-
      dard UNIX pipe mechanism allows a child process to inherit a communication
      channel from its parent; data written to one end of the pipe can be read at the
      other. Under Linux, pipes appear as just another type of inode to virtual file
      system software, and each pipe has a pair of wait queues to synchronize the
      reader and writer. UNIX also defines a set of networking facilities that can send
      streams of data to both local and remote processes. Networking is covered in
      Section 18.10.
