Deadlock Prevention
     In the absence of algorithms to detect and recover from deadlocks, we may
     arrive at a situation in which the system is in a deadlocked state yet has no
     way of recognizing what has happened. In this case, the undetected deadlock
     will cause the system's performance to deteriorate, because resources are being
     held by processes that cannot run and because more and more processes, as
     they make requests for resources, will enter a deadlocked state. Eventually, the
     system will stop functioning and will need to be restarted manually.
     Although this method may not seem to be a viable approach to the deadlock
     problem, it is nevertheless used in most operating systems, as mentioned
     earlier. Expense is one important consideration. Ignoring the possibility of
     deadlocks  is  cheaper  than     the  other  approaches.  Since  in  many  systems,
     deadlocks occur infrequently (say, once per year), the extra expense of the
     other methods may not seem worthwhile. In addition, methods used to recover
     from other conditions may be put to use to recover from deadlock. In some
     circumstances, a system is in a frozen state but not in a deadlocked state.
     We see this situation, for example, with a real-time process running at the
     highest priority (or any process running on a nonpreemptive scheduler) and
     never returning control to the operating system. The system must have manual
     recovery methods for such conditions and may simply use those techniques
     for deadlock recovery.
7.4  