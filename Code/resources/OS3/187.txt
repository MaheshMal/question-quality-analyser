Overview
     A thread is a basic unit of CPU utilization; it comprises a thread ID, a program
     counter, a register set, and a stack. It shares with other threads belonging
     to the same process its code section, data section, and other operating-system
     resources, such as open files and signals. A traditional (or heavyweight) process
     has a single thread of control. If a process has multiple threads of control, it
     can perform more than one task at a time. Figure 4.1 illustrates the difference
     between a traditional single-threaded process and a multithreaded process.
     4.1.1  Motivation
     Most software applications that run on modern computers are multithreaded.
     An application typically is implemented as a separate process with several
                                                                                        163



164  Chapter 4  Threads
     code             data      files  code                   data       files
     registers              stack      registers              registers  registers
                                       stack                  stack      stack
     thread                                                                         thread
     single-threaded process           multithreaded process
                Figure 4.1  Single-threaded and multithreaded processes.
     threads of control. A web browser might have one thread display images or
     text while another thread retrieves data from the network, for example. A
     word processor may have a thread for displaying graphics, another thread for
     responding to keystrokes from the user, and a third thread for performing
     spelling and grammar checking in the background. Applications can also
     be designed to leverage processing capabilities on multicore systems. Such
     applications can perform several CPU-intensive tasks in parallel across the
     multiple computing cores.
     In certain situations, a single application may be required to perform
     several similar tasks. For example, a web server accepts client requests for
     web pages, images, sound, and so forth. A busy web server may have several
     (perhaps thousands of) clients concurrently accessing it. If the web server ran
     as a traditional single-threaded process, it would be able to service only one
     client at a time, and a client might have to wait a very long time for its request
     to be serviced.
     One solution is to have the server run as a single process that accepts
     requests. When the server receives a request, it creates a separate process
     to service that request. In fact, this process-creation method was in common
     use before threads became popular. Process creation is time consuming and
     resource intensive, however. If the new process will perform the same tasks as
     the existing process, why incur all that overhead? It is generally more efficient
     to use one process that contains multiple threads. If the web-server process is
     multithreaded, the server will create a separate thread that listens for client
     requests. When a request is made, rather than creating another process, the
     server creates a new thread to service the request and resume listening for
     additional requests. This is illustrated in Figure 4.2.
     Threads also play a vital role in remote procedure call (RPC) systems. Recall
     from Chapter 3 that RPCs allow interprocess communication by providing a
     communication mechanism similar to ordinary function or procedure calls.
     Typically, RPC servers are multithreaded. When a server receives a message, it



                                                             4.1         