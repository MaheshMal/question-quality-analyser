Process Concept
     A question that arises in discussing operating systems involves what to call
     all the CPU activities. A batch system executes jobs, whereas a time-shared
                                                                                          105



106  Chapter 3  Processes
     system has user programs, or tasks. Even on a single-user system, a user may
     be able to run several programs at one time: a word processor, a Web browser,
     and an e-mail package. And even if a user can execute only one program at a
     time, such as on an embedded device that does not support multitasking, the
     operating system may need to support its own internal programmed activities,
     such as memory management. In many respects, all these activities are similar,
     so we call all of them processes.
     The terms job and process are used almost interchangeably in this text.
     Although we personally prefer the term process, much of operating-system
     theory and terminology was developed during a time when the major activity
     of operating systems was job processing. It would be misleading to avoid
     the use of commonly accepted terms that include the word job (such as job
     scheduling) simply because process has superseded job.
     3.1.1  The Process
     Informally, as mentioned earlier, a process is a program in execution. A process
     is more than the program code, which is sometimes known as the text section.
     It also includes the current activity, as represented by the value of the program
     counter and the contents of the processor's registers. A process generally also
     includes the process stack, which contains temporary data (such as function
     parameters, return addresses, and local variables), and a data section, which
     contains global variables. A process may also include a heap, which is memory
     that is dynamically allocated during process run time. The structure of a process
     in memory is shown in Figure 3.1.
     We emphasize that a program by itself is not a process. A program is a
     passive entity, such as a file containing a list of instructions stored on disk
     (often called an executable file). In contrast, a process is an active entity,
     with a program counter specifying the next instruction to execute and a set
     of associated resources. A program becomes a process when an executable file
     is loaded into memory. Two common techniques for loading executable files
                           max
                                        stack
                                        heap
                                        data
                                        text
                           0
                           Figure 3.1   Process in memory.



                                                   3.1  