Summary
     Linux is a modern, free operating system based on UNIX standards. It has been
     designed to run efficiently and reliably on common PC hardware; it also runs on
     a variety of other platforms, such as mobile phones. It provides a programming
     interface and user interface compatible with standard UNIX systems and can
     run a large number of UNIX applications, including an increasing number of
     commercially supported applications.
     Linux has not evolved in a vacuum. A complete Linux system includes
     many components that were developed independently of Linux. The core
     Linux operating-system kernel is entirely original, but it allows much existing
     free UNIX software to run, resulting in an entire UNIX-compatible operating
     system free from proprietary code.
     The Linux kernel is implemented as a traditional monolithic kernel for
     performance reasons, but it is modular enough in design to allow most drivers
     to be dynamically loaded and unloaded at run time.
     Linux is a multiuser system, providing protection between processes and
     running multiple processes according to a time-sharing scheduler. Newly
     created processes can share selective parts of their execution environment
     with their parent processes, allowing multithreaded programming. Interpro-
     cess communication is supported by both System V mechanisms--message
     queues, semaphores, and shared memory--and BSD's socket interface. Multi-
     ple networking protocols can be accessed simultaneously through the socket
     interface.
     The memory-management system uses page sharing and copy-on-write
     to minimize the duplication of data shared by different processes. Pages are
     loaded on demand when they are first referenced and are paged back out to
     backing store according to an LFU algorithm if physical memory needs to be
     reclaimed.
     To the user, the file system appears as a hierarchical directory tree that
     obeys UNIX semantics. Internally, Linux uses an abstraction layer to manage
     multiple file systems. Device-oriented, networked, and virtual file systems are
     supported. Device-oriented file systems access disk storage through a page
     cache that is unified with the virtual memory system.
Practice Exercises
     18.1  Dynamically loadable kernel modules give flexibility when drivers are
           added to a system, but do they have disadvantages too? Under what
           circumstances would a kernel be compiled into a single binary file, and
           when would it be better to keep it split into modules? Explain your
           answer.



                                                                     Exercises        825
18.2       Multithreading is a commonly used programming technique. Describe
           three different ways to implement threads, and compare these three
           methods with the Linux clone() mechanism. When might using each
           alternative mechanism be better or worse than using clones?
18.3       The Linux kernel does not allow paging out of kernel memory. What
           effect does this restriction have on the kernel's design? What are two
           advantages and two disadvantages of this design decision?
18.4       Discuss  three  advantages      of  dynamic   (shared)  linkage   of  libraries
           compared with static linkage. Describe two cases in which static linkage
           is preferable.
18.5       Compare the use of networking sockets with the use of shared memory
           as a mechanism for communicating data between processes on a single
           computer. What are the advantages of each method? When might each
           be preferred?
18.6       At  one  time,  UNIX       systems  used  disk-layout   optimizations    based
           on the rotation position of disk data, but modern implementations,
           including Linux, simply optimize for sequential data access. Why do
           they do so? Of what hardware characteristics does sequential access
           take advantage? Why is rotational optimization no longer so useful?
Exercises
18.7       What are the advantages and disadvantages of writing an operating
           system in a high-level language, such as C?
18.8       In what circumstances is the system-call sequence fork() exec() most
           appropriate? When is vfork() preferable?
18.9       What   socket   type   should   be  used  to  implement   an  intercomputer
           file-transfer program? What type should be used for a program that
           periodically    tests  to  see  whether   another  computer   is  up   on  the
           network? Explain your answer.
18.10      Linux  runs     on  a  variety  of  hardware  platforms.  What    steps  must
           Linux developers take to ensure that the system is portable to different
           processors and memory-management architectures and to minimize
           the amount of architecture-specific kernel code?
18.11      What are the advantages and disadvantages of making only some of the
           symbols defined inside a kernel accessible to a loadable kernel module?
18.12      What are the primary goals of the conflict-resolution mechanism used
           by the Linux kernel for loading kernel modules?
18.13      Discuss how the clone() operation supported by Linux is used to
           support both processes and threads.
18.14      Would you classify Linux threads as user-level threads or as kernel-level
           threads? Support your answer with the appropriate arguments.
18.15      What extra costs are incurred in the creation and scheduling of a
           process, compared with the cost of a cloned thread?



826  Chapter 18     The Linux System
     18.16  How does Linux's Completely Fair Scheduler (CFS) provide improved
            fairness over a traditional UNIX process scheduler? When is the fairness
            guaranteed?
     18.17  What are the two configurable variables of the Completely Fair Sched-
            uler (CFS)? What are the pros and cons of setting each of them to very
            small and very large values?
     18.18  The Linux scheduler implements "soft" real-time scheduling. What
            features necessary for certain real-time programming tasks are missing?
            How might they be added to the kernel? What are the costs (downsides)
            of such features?
     18.19  Under what circumstances would a user process request an operation
            that results in the allocation of a demand-zero memory region?
     18.20  What scenarios would cause a page of memory to be mapped into a user
            program's address space with the copy-on-write attribute enabled?
     18.21  In Linux, shared libraries perform many operations central to the
            operating system. What is the advantage of keeping this functionality
            out of the kernel? Are there any drawbacks? Explain your answer.
     18.22  What are the benefits of a journaling file system such as Linux's ext3?
            What are the costs? Why does ext3 provide the option to journal only
            metadata?
     18.23  The directory structure of a Linux operating system could include files
            corresponding to several different file systems, including the Linux
            /proc file system. How might the need to support different file-system
            types affect the structure of the Linux kernel?
     18.24  In what ways does the Linux setuid feature differ from the setuid
            feature SVR4?
     18.25  The Linux source code is freely and widely available over the Inter-
            net and from CD-ROM vendors. What are three implications of this
            availability for the security of the Linux system?
Bibliographical Notes
     The    Linux   system   is  a  product  of  the  Internet;  as   a  result,  much   of  the
     available documentation on Linux is available in some form on the Internet.
     The following key sites reference most of the useful information available:
     ·    The Linux Cross-Reference Page (LXR) (http://lxr.linux.no) maintains current
          listings  of  the  Linux  kernel,  browsable  via      the  Web  and    fully  cross-
          referenced.
     ·    The Kernel Hackers' Guide provides a helpful overview of the Linux kernel
          components and internals and is located at http://tldp.org/LDP/tlk/tlk.html.



                                                                Bibliography        827
·  The Linux Weekly News (LWN) (http://lwn.net) provides weekly Linux-
   related news, including a very well researched subsection on Linux kernel
   news.
   Many mailing lists devoted to Linux are also available. The most important
are maintained by a mailing-list manager that can be reached at the e-mail
address majordomo@vger.rutgers.edu. Send e-mail to this address with the
single line "help" in the mail's body for information on how to access the list
server and to subscribe to any lists.
   Finally, the Linux system itself can be obtained over the Internet. Complete
Linux  distributions     are  available  from  the   home  sites  of  the   companies
concerned,     and  the  Linux   community     also  maintains    archives  of  current
system components at several places on the Internet. The most important is
ftp://ftp.kernel.org/pub/linux.
   In addition to investigating Internet resources, you can read about the
internals of the Linux kernel in [Mauerer (2008)] and [Love (2010)].
Bibliography
[Love (2010)]     R. Love, Linux Kernel Development, Third Edition, Developer's
Library (2010).
[Mauerer (2008)]    W. Mauerer, Professional Linux Kernel Architecture, John Wiley
and Sons (2008).



