Directory and Disk Structure
                   sequential access  implementation for direct access
                   reset                             cp  0;
                   read_next                         read cp ;
                                                     cp  cp     1;
                   write_next                        write cp;
                                                     cp  cp     1;
      Figure 11.5         Simulation of sequential access on a direct-access file.
      find a record in the file, we first search the index and then use the pointer to
      access the file directly and to find the desired record.
      For example, a retail-price file might list the universal product codes (UPCs)
      for items, with the associated prices. Each record consists of a 10-digit UPC and
      a 6-digit price, for a 16-byte record. If our disk has 1,024 bytes per block, we
      can store 64 records per block. A file of 120,000 records would occupy about
      2,000 blocks (2 million bytes). By keeping the file sorted by UPC, we can define
      an index consisting of the first UPC in each block. This index would have 2,000
      entries of 10 digits each, or 20,000 bytes, and thus could be kept in memory. To
      find the price of a particular item, we can make a binary search of the index.
      From this search, we learn exactly which block contains the desired record and
      access that block. This structure allows us to search a large file doing little I/O.
      With large files, the index file itself may become too large to be kept in
      memory. One solution is to create an index for the index file. The primary
      index file contains pointers to secondary index files, which point to the actual
      data items.
      For example, IBM's indexed sequential-access method (ISAM) uses a small
      master index that points to disk blocks of a secondary index. The secondary
      index blocks point to the actual file blocks. The file is kept sorted on a defined
      key. To find a particular item, we first make a binary search of the master index,
      which provides the block number of the secondary index. This block is read
      in, and again a binary search is used to find the block containing the desired
      record. Finally, this block is searched sequentially. In this way, any record can
      be located from its key by at most two direct-access reads. Figure 11.6 shows a
      similar situation as implemented by VMS index and relative files.
11.3  