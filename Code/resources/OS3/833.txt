File Systems
      space. However, most programs also need to run functions from the system
      libraries, and these library functions must also be loaded. In the simplest
      case, the necessary library functions are embedded directly in the program's
      executable binary file. Such a program is statically linked to its libraries, and
      statically linked executables can commence running as soon as they are loaded.
           The main disadvantage of static linking is that every program generated
      must contain copies of exactly the same common system library functions. It is
      much more efficient, in terms of both physical memory and disk-space usage,
      to load the system libraries into memory only once. Dynamic linking allows
      that to happen.
           Linux implements dynamic linking in user mode through a special linker
      library. Every dynamically linked program contains a small, statically linked
      function that is called when the program starts. This static function just maps
      the link library into memory and runs the code that the function contains. The
      link library determines the dynamic libraries required by the program and the
      names of the variables and functions needed from those libraries by reading the
      information contained in sections of the ELF binary. It then maps the libraries
      into the middle of virtual memory and resolves the references to the symbols
      contained in those libraries. It does not matter exactly where in memory these
      shared libraries are mapped: they are compiled into position-independent
      code (PIC), which can run at any address in memory.
18.7  