Other Considerations
           chunks the size of the objects being represented. Thus, when the kernel
           requests memory for an object, the slab allocator returns the exact amount
           of memory required to represent the object.
     2.    Memory requests can be satisfied quickly. The slab allocation scheme
           is thus particularly effective for managing memory when objects are
           frequently allocated and deallocated, as is often the case with requests
           from the kernel. The act of allocating--and releasing--memory can be
           a time-consuming process. However, objects are created in advance and
           thus can be quickly allocated from the cache. Furthermore, when the
           kernel has finished with an object and releases it, it is marked as free and
           returned to its cache, thus making it immediately available for subsequent
           requests from the kernel.
         The slab allocator first appeared in the Solaris 2.4 kernel. Because of its
     general-purpose nature, this allocator is now also used for certain user-mode
     memory requests in Solaris. Linux originally used the buddy system; however,
     beginning with Version 2.2, the Linux kernel adopted the slab allocator.
         Recent distributions of Linux now include two other kernel memory allo-
     cators--the SLOB and SLUB allocators. (Linux refers to its slab implementation
     as SLAB.)
         The SLOB allocator is designed for systems with a limited amount of
     memory, such as embedded systems. SLOB (which stands for Simple List of
     Blocks) works by maintaining three lists of objects: small (for objects less than
     256 bytes), medium (for objects less than 1,024 bytes), and large (for objects
     less than 1,024 bytes). Memory requests are allocated from an object on an
     appropriately sized list using a first-fit policy.
         Beginning with Version 2.6.24, the SLUB allocator replaced SLAB as the
     default allocator for the Linux kernel. SLUB addresses performance issues
     with   slab  allocation  by  reducing    much     of   the  overhead   required    by   the
     SLAB   allocator.  One   change  is  to  move     the    metadata  that     is  stored  with
     each   slab  under  SLAB     allocation  to  the    page    structure  the  Linux  kernel
     uses for each page. Additionally, SLUB removes the per-CPU queues that the
     SLAB allocator maintains for objects in each cache. For systems with a large
     number of processors, the amount of memory allocated to these queues was
     not insignificant. Thus, SLUB provides better performance as the number of
     processors on a system increases.
9.9  