Example: Intel 32 and 64-bit Architectures
     physical page cannot have two (or more) shared virtual addresses. A simple
     technique for addressing this issue is to allow the page table to contain only
     one mapping of a virtual address to the shared physical address. This means
     that references to virtual addresses that are not mapped result in page faults.
     8.6.4  Oracle SPARC Solaris
     Consider as a final example a modern 64-bit CPU and operating system that are
     tightly integrated to provide low-overhead virtual memory. Solaris running
     on the SPARC CPU is a fully 64-bit operating system and as such has to solve
     the problem of virtual memory without using up all of its physical memory
     by keeping multiple levels of page tables. Its approach is a bit complex but
     solves the problem efficiently using hashed page tables. There are two hash
     tables--one for the kernel and one for all user processes. Each maps memory
     addresses from virtual to physical memory. Each hash-table entry represents a
     contiguous area of mapped virtual memory, which is more efficient than having
     a separate hash-table entry for each page. Each entry has a base address and a
     span indicating the number of pages the entry represents.
     Virtual-to-physical translation would take too long if each address required
     searching through a hash table, so the CPU implements a TLB that holds
     translation table entries (TTEs) for fast hardware lookups. A cache of these TTEs
     reside in a translation storage buffer (TSB), which includes an entry per recently
     accessed page. When a virtual address reference occurs, the hardware searches
     the TLB for a translation. If none is found, the hardware walks through the
     in-memory TSB looking for the TTE that corresponds to the virtual address that
     caused the lookup. This TLB walk functionality is found on many modern CPUs.
     If a match is found in the TSB, the CPU copies the TSB entry into the TLB, and
     the memory translation completes. If no match is found in the TSB, the kernel
     is interrupted to search the hash table. The kernel then creates a TTE from the
     appropriate hash table and stores it in the TSB for automatic loading into the TLB
     by the CPU memory-management unit. Finally, the interrupt handler returns
     control to the MMU, which completes the address translation and retrieves the
     requested byte or word from main memory.
8.7  