Language-Based Protection
      To the degree that protection is provided in existing computer systems, it is
      usually achieved through an operating-system kernel, which acts as a security
      agent to inspect and validate each attempt to access a protected resource. Since
      comprehensive access validation may be a source of considerable overhead,
      either we must give it hardware support to reduce the cost of each validation,
      or we must allow the system designer to compromise the goals of protection.
      Satisfying all these goals is difficult if the flexibility to implement protection
      policies is restricted by the support mechanisms provided or if protection
      environments are made larger than necessary to secure greater operational
      efficiency.
      As operating systems have become more complex, and particularly as they
      have attempted to provide higher-level user interfaces, the goals of protection
      have become much more refined. The designers of protection systems have
      drawn   heavily  on  ideas     that  originated    in  programming  languages       and
      especially on the concepts of abstract data types and objects. Protection systems
      are now concerned not only with the identity of a resource to which access is
      attempted but also with the functional nature of that access. In the newest
      protection systems, concern for the function to be invoked extends beyond
      a set of system-defined functions, such as standard file-access methods, to
      include functions that may be user-defined as well.
      Policies for resource use may also vary, depending on the application, and
      they may be subject to change over time. For these reasons, protection can no
      longer be considered a matter of concern only to the designer of an operating
      system. It should also be available as a tool for use by the application designer,
      so that resources of an application subsystem can be guarded against tampering
      or the influence of an error.
      14.9.1  Compiler-Based Enforcement
      At this point, programming languages enter the picture. Specifying the desired
      control of access to a shared resource in a system is making a declarative
      statement about the resource. This kind of statement can be integrated into a
      language by an extension of its typing facility. When protection is declared
      along   with  data  typing,    the   designer  of  each  subsystem  can  specify    its
      requirements for protection, as well as its need for use of other resources in a
      system. Such a specification should be given directly as a program is composed,
      and in the language in which the program itself is stated. This approach has
      several significant advantages:



                                     14.9  