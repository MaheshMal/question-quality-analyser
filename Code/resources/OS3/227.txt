Background
     We've already seen that processes can execute concurrently or in parallel.
     Section 3.2.2 introduced the role of process scheduling and described how
     the CPU scheduler switches rapidly between processes to provide concurrent
     execution. This means that one process may only partially complete execution
     before another process is scheduled. In fact, a process may be interrupted at
     any point in its instruction stream, and the processing core may be assigned
     to execute instructions of another process. Additionally, Section 4.2 introduced
     parallel execution, in which two instruction streams (representing different
     processes) execute simultaneously on separate processing cores. In this chapter,
                                                                                       203



204  Chapter 5     Process Synchronization
     we explain how concurrent or parallel execution can contribute to issues
     involving the integrity of data shared by several processes.
     Let's consider an example of how this can happen. In Chapter 3, we devel-
     oped a model of a system consisting of cooperating sequential processes or
     threads, all running asynchronously and possibly sharing data. We illustrated
     this model with the producerÂ­consumer problem, which is representative of
     operating systems. Specifically, in Section 3.4.1, we described how a bounded
     buffer could be used to enable processes to share memory.
     We now return to our consideration of the bounded buffer. As we pointed
     out, our original solution allowed at most BUFFER SIZE - 1 items in the buffer
     at the same time. Suppose we want to modify the algorithm to remedy this
     deficiency. One possibility is to add an integer variable counter, initialized to
     0. counter is incremented every time we add a new item to the buffer and is
     decremented every time we remove one item from the buffer. The code for the
     producer process can be modified as follows:
                while (true) {
                   /* produce      an   item     in    next  produced  */
                   while     (counter      ==  BUFFER SIZE)
                       ;  /*  do   nothing     */
                   buffer[in]      = next produced;
                   in = (in +      1)   %   BUFFER SIZE;
                   counter++;
                }
     The code for the consumer process can be modified as follows:
                while (true) {
                   while     (counter      ==  0)
                       ;  /*  do   nothing     */
                   next consumed       =    buffer[out];
                   out    =  (out  +   1)   %  BUFFER SIZE;
                   counter--;
                   /*   consume    the     item    in  next  consumed  */
                }
     Although the producer and consumer routines shown above are correct
     separately, they may not function correctly when executed concurrently. As
     an illustration, suppose that the value of the variable counter is currently
     5 and that the producer and consumer processes concurrently execute the
     statements "counter++" and "counter--". Following the execution of these
     two statements, the value of the variable counter may be 4, 5, or 6! The only
     correct result, though, is counter == 5, which is generated correctly if the
     producer and consumer execute separately.



                                                             5.1  