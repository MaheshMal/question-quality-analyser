Page Replacement
                                     physical
     process1                        memory                            process2
                                     page A
                                     page B
                                     page C
                                     Copy of page  C
               Figure 9.8            After process 1 modifies page C.
     Operating systems typically allocate these pages using a technique known as
     zero-fill-on-demand. Zero-fill-on-demand pages have been zeroed-out before
     being allocated, thus erasing the previous contents.
     Several versions of UNIX (including Solaris and Linux) provide a variation
     of the fork() system call--vfork() (for virtual memory fork)--that operates
     differently from fork() with copy-on-write. With vfork(), the parent process
     is suspended, and the child process uses the address space of the parent.
     Because vfork() does not use copy-on-write, if the child process changes
     any pages of the parent's address space, the altered pages will be visible to the
     parent once it resumes. Therefore, vfork() must be used with caution to ensure
     that the child process does not modify the address space of the parent. vfork()
     is intended to be used when the child process calls exec() immediately after
     creation. Because no copying of pages takes place, vfork() is an extremely
     efficient method of process creation and is sometimes used to implement UNIX
     command-line shell interfaces.
9.4  