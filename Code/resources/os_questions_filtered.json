["list define ", "define ", "what four ", "what ", "how ", "what distinguish memory ", "what ", "what difference ", "what distinction ", "what ", "what ", "what ", "what ", "what ", "how process ", "list explain ", "explain distinction ", "describe ", "explain difference ", "what ", "list design ", "what ", "what ", "model define ", "what ", "what what ", "why figure two ", "list ", "what types os information management ", "list process ", "why two ", "what create ", "what difference ", "what difference process ", "table lists typical elements found process os. which thread which process multithreaded system? ", "list reasons why threads may processes. ", "what two separate ", "use ", "what ", "list three ", "list two ", "define ", "list design which ", "what three which ", "what ", "list three processes define ", "what distinction processes ", "list three control with processes ", "list ", "what ", "what three must ", "what create ", "how ", "list two which ", "how ", "what difference ", "what memory ", "why processes ", "why memory compile ", "what reasons two processes access particular ", "what ", "what difference ", "what ", "what difference ", "what difference ", "what difference memory ", "explain ", "why use ", "what page table define ", "what purpose ", "define ", "what difference set ", "what ", "what ", "why possible combine allocation ", "what difference set ", "what difference ", "describe ", "what operating ", "what difference time ", "process value represent ", "what difference ", "define ", "define ", "define ", "define ", "define ", "define ", "list define ", "list define ", "list define ", "what difference ", "what difference ", "list define ", "list define ", "what useful ", "list define ", "what difference ", "what difference ", "why would performance using rather single ", "what read ", "define figure ", "define ", "what ", "what difference ", "what difference ", "what ", "what criteria ", "list define ", "why average time find record less ", "what may ", "what ", "what typical access may user ", "list define ", "list define ", "what ", "what ", "what ", "what ", "explain relative based existing compared os. ", "what design ", "what difference ", "what ", "what ", "what design ", "what ", "what ", "what ", "define ", "what ", "what difference ", "list define ", "list define three ", "what ", "what ", "what ", "how ", "what difference ", "what ", "explain purpose ", "explain difference simple memory ", "list describe used ", "describe difference ", "explain difference ", "what ", "how ", "describe ", "what ", "what two ", "list briefly describe buffer used when new ", "list briefly describe buffer implemented when running ", "what ", "what data ", "what ", "discuss applications ", "what what two ", "explain ", "what ", "why ", "list ", "list ", "list ", "list define ", "suppose processor figure also two load store io. address identifies particular external device. show program execution following program ", "program execution described using description show use ", "consider hypothetical microprocessor instructions two fields. first byte contains remainder immediate address. what maximum directly addressable memory capacity ", "discuss impact system speed microprocessor . data . data ", "consider instructions two how many bits needed program counter instruction ", "consider data what maximum memory space processor access directly ", "consider data what maximum memory space processor access directly ", "consider address data what features allow access separate ", "consider hypothetical generating address data bus. how many explain. ", "consider with external data input what maximum data transfer rate across ", "consider with data driven input increase would better make data bus bits double clock frequency supplied ", "consider computer system contains module controlling simple describe how using first four registers listed achieve with describe how function performed efficiently also employing ien. ", "systems include memory given higher priority processor memory. ", "module transferring characters main memory external device transmitting bits per second processor fetch instructions rate million instructions per second. how much processor due ", "computer consists device connected main memory via shared bus with data bus width one word. b. estimate rate dma transfer used. ", "consider following code a. b. one example ", "consider memory system with following tc cc tm a. b. what main memory using cache memory ", "consider memory system with following effective access time greater cache access what hit ratio ", "computer main disk used virtual what average time required access referenced system? ", "suppose used processor manage procedure calls program counter using top program ", "suppose multiprogrammed computer which job identical characteristics. define following turnaround time actual time complete job throughput average number jobs completed per time period processor utilization percentage time processor active compute quantities four simultaneous assuming period distributed following a. first processor second b. ", "program one run would spend time waiting using processor. suppose scheduling algorithm programs used little processor time recent explain why algorithm programs yet permanently deny processor time programs. ", "contrast scheduling policies might use when system with would use system. ", "what purpose how relate os concept ", "mainframe one major modules kernel system resource manager. averages numbers determine average number seconds page frame system goes untouched. what might purpose what action might take? ", "multiprocessor with eight processors attached drives. what maximum number jobs progress once? what maximum minimum number may left idle result policy? ", "multiprocessor with eight processors attached drives. what maximum number jobs progress once? what bounds number idling drives? ", "following state transition table simplified model process with representing transitions states give example event cause draw diagram ", "assume time system resources used except processor memory. time identify which state process in. process identify event which blocked. ", "figure contains one draw transition two total different list possible give example what cause ", "figure contains one could draw two total different list explain ", "contains process model draw queueing diagram similar .b. ", "consider state transition diagram figure two extreme policies always dispatch process ready minimize always give preference even though may mean swapping when swapping necessary. suggest intermediate policy tries balance concerns priority performance. ", "table shows process operating system. provide many wait ", "table shows process operating system. why following resident fault common event free resource ", "table shows process operating system. draw state diagram indicate ", "operating system makes use four processor access modes facilitate protection sharing system resources among processes. number operating systems two kernel user. what advantages disadvantages providing four modes instead two? ", "operating system makes use four processor access modes facilitate protection sharing system resources among processes. return made executing rei exception instruction. make case even four modes? ", "vms scheme discussed preceding problem often referred protection illustrated figure means every segment di also dj. explain clearly what problem referred preceding quote. ", "figure suggests process one queue time. possible would want allow process wait one provide ", "figure process one event queue time. how would modify structure figure support new ", "number early caused register values stored fixed locations associated with given what practical explain why ", "section unix applications process executing kernel mode may ", "following what possible ", "pointed two advantages using multiple within process less work involved new thread within existing process new communication among within process simplified. also case mode switch two within process involves less work mode switch two different processes? ", "discussion versus disadvantage when executes system thread also threads within process blocked. why ", "obsolete os pcs ibm. b. go ahead with where assign resources process thread level? ", "consider which ", "allows one within process issue blocking system calls continue run. explain why model make multithreaded programs run faster uniprocessor computer. ", "mainframe operating system structured around concepts address space task. ascbs global structures maintained system tcbs local structures maintained within address space. what advantage splitting control information global local portions? ", "many current language c inadequate multithreaded programs. impact compilers correctness problem consider following function consider case which thread thread b what function ", "many current language c inadequate multithreaded programs. consider following declarations function consider case which thread performs thread b performs c language addresses execution. use two parallel threads create problems potential ", "existing which relatively something similar what problem potential problem occurs with compiled version program threads b executed ", "consider following using ", "first declare variable called which type pthreadt. function enables main wait new completes. what program accomplish? ", "consider following using ", "first declare variable called which type pthreadt. output executed output would expect? what gone wrong? ", "solaris documentation states ult may another priority. possible runnable priority therefore function result yielding ", "what possible allowing ", "single supports one thread execution state distinct explain ", "figure shows state transition diagrams associated solaris . explain operation two diagrams ", "explain state ", "beginning section stated multiprocessing present with respect concurrency. true far cite two differences terms concurrency ", "processes threads provide powerful structuring tool implementing programs would much complex simple sequential programs. cards second procedure reads temporary character writes second temporary file. third procedure reads stream characters second temporary file prints lines characters each. ", "processes threads provide powerful structuring tool implementing programs would much complex simple sequential programs. explain operation program figure .. ", "processes threads provide powerful structuring tool implementing programs would much complex simple sequential programs. modify program include contingency. note last printed line may therefore contain less characters. ", "processes threads provide powerful structuring tool implementing programs would much complex simple sequential programs. every card image extra blank every adjacent pair asterisks card replaced character. rewrite solution set three processes using semaphores. ", "consider following note scheduler uniprocessor system would implement execution two concurrent processes interleaving without restriction order show sequence trace sequence statement ", "consider following note scheduler uniprocessor system would implement execution two concurrent processes interleaving without restriction order interleaving. show sequence statement printed. remember source level done assembly implements single c increment instruction x . ", "consider following determine proper lower upper final value shared variable output concurrent program. assume processes execute relative speed value incremented loaded register separate machine instruction. ", "consider following suppose number processes execute parallel part a. what effect range final values ", "waiting less terms using processor ", "consider following software mutual exclusion problem two processes proposed find demonstrates interesting note even communications acm one. ", "software approach mutual exclusion bakery algorithm called based practice bakeries shops which every customer receives numbered ticket allowing served turn. ith element array may read written process read processes. notation defined c c b describe algorithm words. ", "software approach mutual exclusion bakery called based practice which every customer receives numbered ticket allowing served turn. show avoids deadlock. ", "software approach exclusion bakery algorithm called based practice which every customer receives numbered ticket allowing served turn. algorithm show enforces exclusion. ", "consider algorithm without variable mutual explain why why ", "consider following program which provides software approach mutual array control where element either . program ith process begin referred algorithm. explain operation key features. ", "consider first figure result using ", "consider first figure which ", "when special machine instruction used provide mutual exclusion fashion figure control how long process must wait granted access section. devise algorithm uses instruction guarantees process waiting enter section within n where n number processes may require access section event consisting one process leaving section another process granted access. ", "consider following definition compare set with figure difference effect two sets when used could substitute one set without altering meaning program? ", "consider sharable resource with following long fewer three processes using new processes start using right away. might create following program nevertheless incorrect. explain why. ", "consider sharable resource with following long fewer three processes using new processes start using right away. solve problem program? difficulties remain? ", "consider explain how program why ", "consider correct preceding completely prevent newly arriving processes line make less give example ", "consider correct solution preceding program example general design pattern uniform way implement solutions many concurrency problems using semaphores. referred describe ", "consider another explain how program why ", "consider another correct one terms number processes ", "program example general design pattern uniform way implement solutions many concurrency problems using semaphores. referred pass describe ", "possible implement general semaphores using semaphores. suppose two processes call when initially first performed performed second call proceeds point. need move single line program. ", "dijkstra put forward conjecture solution mutual exclusion problem avoiding applicable unknown finite number using finite number weak semaphores. second part nm processes blocked enter critical sections one using cascade technique similar used first part. define algorithm conforms description. ", "following problem used jurassic consists dinosaur museum safari riding. ignore syntax missing variable declarations. remember p v correspond semwait semsignal. ", "figure stated would simply move statement inside critical section consumer could lead demonstrate with similar .. ", "consider solution problem defined figure construct new program efficient circumstances. allow n value which mean buffer empty detected fact going block supplies fresh data. ", "consider figure c. ", "following pseudocode correct implementation problem with bounded labels refer lines code shown cover three lines code. assume scheduling processes never interrupted executing given portion code c. task complete following chart. ", "problem demonstrates use semaphores coordinate three types processes. assumed want leave therefore stay last possible last arrive must get others wait warming hut harnessed sleigh. solve problem using semaphores. ", "show semaphores equivalent functionality implementing using semaphores. make use shared buffer area hold one consisting array ", "show b. using separate synchronization process. ", "explain what with ", "show apply figure ", "show how figure ", "figure provide similar figure provided section .. ", "cannot occur figure .. justify ", "given following state processes resource b c time available ", "given following state processes resource b c time calculate need ", "given following state algorithm. processes resource b c time show current state show safe sequence processes. sequence show how available changes process ", "following state algorithm. why why ", "code three processes resources using resource allocation show deadlock ", "code three processes competing six resources labeled f. cannot move across change order inside procedure. use resource allocation graph justify answer. ", "spooling system consists input process user process output process connected two buffers. blocks buffered disk using floating boundary input output depending speed processes. communication primitives used ensure following resource constraint show system become deadlocked. ", "suggest additional resource prevent deadlock problem still permit input output buffers with present needs processes. ", "multiprogramming system disk secondary divided input processing output with floating depending speed processes involved. current state characterized following max maximum number number input p number processing number output reso minimum number output resp minimum number processing formulate necessary resource constraints guarantee capacity exceeded minimum number permanently output processing. ", "make following state define effect ", "multiprogramming page make following state lead buffer transitions terms p. deadlock assumptions made problem input user output processes ", "consider system with total units allocated three processes apply algorithm determine whether would safe grant following requests. b. process with maximum memory need initial need ", "evaluate ", "pipeline algorithm implemented stream data elements type produced process passes sequence processes which operates elements order. define generalized message buffer contains partially consumed data elements write algorithm process pi n form repeat receive consume send forever assume receives input elements sent . algorithm enable processes operate directly messages stored buffer copying unnecessary. ", "pipeline algorithm implemented stream data elements type produced process passes sequence processes pn which operates elements order. define generalized message buffer contains partially consumed data elements write algorithm process pi n form repeat receive consume send forever. show processes cannot deadlocked with respect common buffer. ", "suppose following two executed concurrently share semaphore variables r initialized integer variable x . concurrent execution two processes result one blocked give execution sequence which one blocked ", "suppose following two foo bar executed concurrently share semaphore variables r initialized integer variable x . concurrent execution two processes result indefinite one them? give execution sequence which one indefinitely ", "consider system consisting four processes single resource. current state allocation what minimum number units resource needed available state ", "consider following ways handling detect kill releasing reserve resources restart thread release resources thread needs resource detect roll back actions. give rank order ways handling where allows degree concurrency. comment ordering. ", "consider following ways handling detect kill releasing reserve resources restart thread release resources thread needs resource detect roll back actions. comment ordering. ordering change deadlocks occur frequently? ", "comment following solution dining philosophers problem. hungry philosopher first left also starts otherwise puts left repeats cycle. ", "suppose two types behavior righty prove seating arrangement lefties righties with least one avoids deadlock. ", "suppose two types behavior righty prove seating arrangement lefties righties with least one prevents starvation. ", "figure shows another solution problem using compare figure report ", "table linux operations involve two accesses simple read operation architecture. why operation added ", "consider following code system. where what effect ", "two b initial values following code linux what possible use memory ", "objectives memory argue list concerns addressed ", "consider fixed partitioning scheme with bytes total main memory size bytes. process table maintained includes pointer resident process. how many bits required ", "consider show memory contains many ", "implement various placement algorithms dynamic partitioning list free blocks memory must three methods what average length ", "another placement algorithm dynamic partitioning referred free block memory used bringing process. discuss method compared ", "another placement algorithm dynamic partitioning referred free block memory used process. what average length search ", "diagram shows example memory configuration dynamic number placement operations carried out. what maximum size swapped process? what size free block partitioned x? ", "diagram shows example memory configuration dynamic number placement operations carried out. indicate intervals memory where partition created new process following four placement worstfit. draw horizontal segment memory strip label clearly. ", "block memory allocated using system. show results following sequence figure similar figure c. ", "block memory using system. show following ", "consider buddy system which particular current allocation . size what size what ", "let block size write general ", "sequence defined n . could sequence used establish ", "sequence defined n . sequence used establish what would advantage binary system described ", "course execution processor increment contents register one word alter contents register encounters call causes execution continue elsewhere program. when successful call dynamic address translation with results stored which approach preferable? ", "consider simple paging system with following bytes physical size pages logical address space. how many table entry? assume table entry contains bit. ", "write binary translation logical address following hypothetical memory management explain paging system with using table which frame number four times smaller number ", "write binary translation logical address following hypothetical memory management explain segmentation system with maximum using table which happen placed real ", "consider simple system following following logical determine physical address indicate ", "consider memory which contiguous placed order creation one end store suggested following when segment placed immediately segment sn even though may already deleted. when boundary use hole reaches end use compacted. show fraction time f spent compacting obeys following kf average length average lifetime memory f fraction memory unused equilibrium conditions find average speed which boundary crosses memory assume copying single word requires least two memory references. ", "consider memory which contiguous placed order creation one end store suggested following when segment placed immediately segment sn even though may already deleted. fraction time spent compacting obeys following kf average length average lifetime memory fraction memory unused equilibrium conditions. find . ", "suppose page table process currently executing processor looks like following. page size bytes. describe exactly virtual address generated cpu translated physical main memory address. ", "suppose page table process currently executing processor looks like following. page size bytes. what physical would following virtual correspond ", "consider following program. two index registers assigned j memory accesses needed references two variables. discuss how frequently page fault would occur terms number times executed. ", "consider following program. modify program minimize page fault frequency? what frequency page faults modification? ", "assume want implement how much memory space needed user figure ", "addressing scheme depicted figure using function maps number value. table entry contains frame chain pointer. table allocates space overflow entries per how much memory space inverted table take? ", "consider following references . complete figure similar figure showing frame allocation fifo recently clock reference continues with ", "consider following string references fifo lru recently clock list total number miss rate policy. count frames ", "process five following e assume replacement algorithm find number transfers sequence starting with empty main memory with three repeat four ", "process contains virtual pages disk assigned fixed allocation four main memory. following trace ", "a. compute hit ratio main memory. assume initially ", "process contains virtual pages disk assigned fixed allocation four main memory. following trace ", "a. compute hit ratio main memory. assume initially ", "process contains eight virtual pages disk assigned fixed allocation four page frames main memory. following page trace compare two hit comment effectiveness using fifo approximate lru with respect particular ", "user located addresses system space. what advantage user rather main what ", "suppose program statement executed memory with page size words. using machine full range instructions employs index write hypothetical program implement foregoing show sequence page references execution. ", "ibm architecture uses memory structure refers two levels segments although approach lacks many features described earlier chapter. which advantages scheme lack? what benefit ? ", "assuming size kbytes table entry takes how many levels tables would required map address top level table single ", "consider system with memory mapping done basis using single level table. assume necessary table always memory. memory takes how long memory ", "consider system with memory mapping done page basis using single level page table. add imposes overhead ns miss. assume memory references what effective memory access time emat? ", "consider system with memory mapping done basis using single level table. assume necessary table always memory. explain how hit rate ", "consider reference process with working set initially empty. replacement what lower number what upper number ", "discussing page replacement one author makes analogy with moving around circular track. plowed disappears system. which page replacement algorithms discussed section useful analogy? ", "discussing page replacement one author makes with moving around circular track. plowed track disappears system. what suggest behavior page replacement algorithm question? ", "storage key control field associated with frame real memory. change set when write operation performed location within suggest approach determining which page frames making use reference ", "consider following sequence page references element sequence represents page define mean working set size reference k define missing page probability reference k where page fault occurs virtual time otherwise. function . function . ", "key performance vsws resident set management policy value q. differences strongly indicate mechanism would dynamically adjust value lifetime process would improve behavior algorithm. suggest simple mechanism purpose. ", "assume task divided four segments system builds page descriptor table segment. what maximum size segment? what maximum logical address space ", "assume task divided four segments system builds page descriptor table segment. what format logical address task generates it? what maximum physical address space system? ", "consider address space pages physical memory space. what ", "consider logical address space pages physical memory space. what length page table ", "consider logical address pages memory space. what effect page table memory ", "unix kernel dynamically grow virtual memory never try it. when pointer adjusted space could released released. explain why would possible point why unix kernel it. ", "consider following show using shortest remaining nonpreemptive priority smaller priority number implies higher round robin with quantum ms. use time scale diagram shown fcfs example show requested scheduling policy. what average waiting time scheduling ", "consider following set perform table figure ", "prove among scheduling provides minimum average waiting time batch jobs time. assume scheduler must always execute task one available. ", "assume following assume . produce similar figure .. ", "consider following pair equations alternative equation where ubound lbound prechosen upper lower bounds estimated value t. value xn used instead value sn . what functions b what effect higher lower values each? ", "bottom example figure process runs two time control process b. another scenario would runs three time control process b. what policy differences feedback scheduling algorithm would account two different ", "nonpreemptive uniprocessor ready queue contains three time immediately completion job. figure shows linear increase ratios time. use example find variant known minimax minimizes maximum given batch ignoring arrivals. ", "prove minimax algorithm preceding problem minimizes maximum given batch jobs. focus attention job achieve highest executed it. consider scheduled order observe job executed last one among them. ", "define time average total time process waiting show with mean service time where r utilization. ", "processor multiplexed speed among processes present ready queue with overhead. idealized model scheduling among ready processes using time slices small compared mean service show poisson input source with exponential service mean response time process with service time x given r. review basic queueing equations appendix h chapter . ", "consider scheduling algorithm where entries queue what would effect two process ", "consider scheduling algorithm where entries queue put two process what would major advantage ", "consider variant scheduling algorithm where entries ready queue pcbs. put two process ready queue. how could modify basic algorithm achieve effect without duplicate ", "queueing new jobs must wait served. algorithm referred selfish round jobs service try monopolize processor increasing priority continuously. use figure show mean response time job service time x given where r r r ls r assuming arrival service times exponentially distributed with means respectively. ", "interactive system using scheduling swapping tries give guaranteed response trivial requests completing among ready system determines time slice allocate ready process next dividing maximum response time number processes requiring service. reasonable policy? ", "which type process generally process briefly explain ", "process scheduler gives control particular process process higher priority currently ready state. system operating with why would using solution section mutual exclusion problem dangerous? explain telling what undesired event could occur how could occur. ", "five batch arrive computer center essentially time. priority scheduling c. fcfs order d. ", "consider set three tasks with execution table .. develop scheduling diagrams similar figure set ", "consider set five tasks with execution table .. develop scheduling diagrams similar figure set ", "least first scheduling algorithm periodic tasks. suppose task currently t. how long may scheduler delay starting task still meet deadline? ", "least first scheduling algorithm periodic tasks. what mean? what mean task negative laxity? ", "least first scheduling algorithm periodic tasks. assume preemption may occur intervals. comment results. ", "maximum urgency first scheduling algorithm periodic tasks. assume priorities b c lowest. comment results. ", "consider program accesses single device compare use buffer. show use buffer running time ", "consider program accesses n devices compare use compare running time with without use ", "consider disk with n numbered assume requested sectors distributed randomly evenly disk. want calculate average number traversed seek. calculate probability length j when head currently positioned track t. ", "consider disk with n numbered assume requested sectors distributed randomly evenly disk. want calculate average number traversed seek. calculate probability seek length arbitrary current position head. ", "consider disk with n numbered assume requested sectors distributed randomly evenly disk. want calculate average number seek. calculate average number using formula expected value n use equalities n . ", "following suggested memory disk generalize memory with n levels instead . ", "replacement algorithm define fraction cache comprises old respectively. characterize policy when a. b. ", "calculate how much disk space required store logical disk fixed sector with with tracks per ignore file track assume cannot span two ", "consider system described problem assume rotates processor reads one sector using with one interrupt per takes process what percentage time processor spend handling seek time? ", "computer two channels one channel. assume following transfer disk drive tape drive line printer card reader kbytes. estimate maximum aggregate transfer rate system. ", "clear disk improve data transfer rate when strip size small compared request size. latter disk necessary? disk improve request rate performance compared comparable disk array without striping? ", "consider what available data storage ", "record ", "three figure .. ", "one scheme avoid problem preallocation versus waste lack contiguity allocate portions increasing size file grows. consider file n records with blocking factor suppose simple index used file allocation table. give upper limit number entries file allocation table function f n. ", "one scheme avoid problem preallocation versus waste lack contiguity allocate portions increasing size file grows. consider file n records with blocking factor suppose simple index used file allocation table. what maximum amount allocated file space unused time? ", "what file organization would choose maximize efficiency terms speed use storage ease updating when data a. c. ", "figure show ", "alternative algorithm algorithm full node encountered immediately even though may turn split unnecessary. what advantage what ", "time function tree. consider degree contains total n keys. develop inequality shows upper bound h tree function n. ", "overhead directories consider system which files stored blocks following calculate percentage wasted space due last ", "what ", "implemented either accessed limited ways data what advantages ", "operating systems file system tree small number levels. what effect how simplify file system design ", "consider hierarchical file system which disk kept list. suppose pointer lost. system reconstruct ", "consider file system which disk kept list. suggest scheme ensure pointer never result single memory ", "unix system length hold total using what maximum size ", "consider organization unix file represented inode disk block pointer with bits identify physical disk bits identify physical what maximum file size supported system? what maximum file system partition supported system? ", "consider organization unix file represented disk block pointer with bits identify physical disk bits identify physical block. assuming information file already main how many disk accesses required access byte position ? ", "with reference interface ecos kernel recommended drivers use release rather explain ", "table used where explain ", "table what use ", "table what use ", "why support time ", "implementation mutexes within ecos kernel support locks. thread locked attempts lock typically result call complicated call either assertion failure reported thread deadlock. suggest reason policy. ", "figure code intended use kernel. explain operation code. assume b execution first execute event ", "figure intended use ecos kernel. what would happen wait execution call line ", "figure code use why line ", "discussion ecos included example showing why used uniprocessor system two threads different priorities compete explain why problem still exists even threads priority claim ", "scheduler serves tasks fifo order. many tinyos none on. what characteristics domain might cause lack need complex scheduling? ", "interface allow already request queue make second ", "tinyos resource interface allows holding resource lock. suggest reason policy. what might cause latency one releasing next granted it? ", "consider machine which users provide personal identification number card account access. give examples availability requirements associated with system indicate degree importance ", "repeat preceding problem system calls network based number requested ", "consider desktop publishing system used produce documents various organizations. c. system availability ", "following high level justify ", "assume selected combinations alphabetic characters. a. assuming attempt b. ", "question arises whether possible develop program analyze piece software determine consider following preceding module scans memory executable programs replicates programs. determine correctly decide whether cv ", "consider following what ", "consider following what type software ", "following code show sequence instructions version describe effect code. ", "explain following a. g. h. ", "early attempt force users use less predictable involved computer supplied passwords. true reflection actual security system. explain problem. ", "assume selected combinations alphabetic characters. b. assuming feedback flagging error incorrect character what expected time discover correct ", "assume elements length k mapped uniform fashion elements length p. what probability different xk results could produced adversary? what probability correct produced adversary one ", "assume limited use printable ascii length. assume password cracker with encryption rate million encryptions per second. how long take test exhaustively possible unix system? ", "known risks unix documentation recommends file removed replaced with publicly readable file called etcpublickey. system verifies pa correctly supplied. how? ", "known risks unix documentation recommends file removed replaced with publicly readable file called etcpublickey. when logs system decrypts obtain how opponent attack system? ", "stated inclusion unix password scheme difficulty guessing factor . two characters known attacker need guessed. why asserted security? ", "assuming successfully preceding problem understand another possible thwart completely password dramatically increasing salt size ", "dac model discussed section alternative representation protection state graph. draw graph corresponds access matrix figure .a. ", "dac model discussed section alternative representation protection state graph. correspondence graph representation access matrix representation? explain. ", "unix treats file fashion defined type data called inode. consider file with mode contained directory with mode . how might file compromised ", "traditional unix file access unix systems provide default setting newly created files which may later change. default typically full access combined with one access group access group none access group other. briefly discuss advantages disadvantages including example type organization where would appropriate. ", "consider user accounts system with server configured provide access user areas. circumstances when running service simply appropriate? explain. ", "assume system with n traditional dac how many relationships users must repeat rbac scheme. ", "context define positive generated which alerts condition actually benign. negative occurs when fails generate when condition effect. using following depict two curves roughly indicate positives respectively. ", "let percentage program code executed simultaneously n computers computer using different set parameters initial conditions. processor execution rate x mips. derive expression effective mips rate when using system exclusive execution terms x. ", "let percentage program code executed simultaneously n computers computer using different set parameters initial conditions. processor execution rate n determine value yield system performance ", "application program executed calculate effective speedup aforementioned condition compared executing program single computer. also percentage code parallelized compiled use cluster preceding program. ", "application program executed suppose able effectively use computers rather computers parallelized portion code. calculate effective speedup achieved. ", "following fortran program executed parallel version executed cluster. suppose lines take two including processor activities. what total execution time program single ", "following fortran program executed parallel version executed cluster. divide among computers computer executes first processor executes next on. what execution time speedup factor compared with part a? ", "following fortran program executed parallel version executed cluster. explain how modify parallelizing facilitate parallel execution computational workload computers. load means equal number additions assigned computer with respect loops. ", "following fortran program executed version executed cluster. what minimum execution time execution what speedup single "]