DEADLOCKS
Computer systems are full of resources that can be used only by one process at
a time.  Common examples include printers, tape drives for backing up company
data, and slots in the system's internal tables.   Having two processes simultan-
eously writing to the printer leads to gibberish.  Having two processes using the
same file-system table slot invariably will lead to a corrupted file system.  Conse-
quently, all operating systems have the ability to (temporarily) grant a process ex-
clusive access to certain resources.
For many applications, a process needs exclusive access to not one resource,
but several.    Suppose, for example, two processes each want to record a scanned
document on a Blu-ray disc.  Process A requests permission to use the scanner and
is granted it.  Process B is programmed differently and requests the Blu-ray re-
corder first and is also granted it.   Now A asks for the Blu-ray recorder, but the re-
quest is suspended until B releases it.  Unfortunately, instead of releasing the Blu-
ray recorder, B asks for the scanner.    At this point both processes are blocked and
will remain so forever. This situation is called a deadlock.
Deadlocks can also occur across machines.          For example, many offices have a
local area network with many computers connected to it.       Often devices such as
scanners, Blu-ray/DVD recorders, printers, and tape drives are connected to the
network as shared resources, available to any user on any machine.            If these de-
vices can be reserved remotely (i.e., from the user's home machine), deadlocks of
the same kind can occur as described above.        More complicated situations can
cause deadlocks involving three, four, or more devices and users.
                                         435
