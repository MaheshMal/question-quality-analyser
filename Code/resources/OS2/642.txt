FORMAL MODELS OF SECURE SYSTEMS
    Protection matrices, such as that of Fig. 9-4, are not static. They frequently
change as new objects are created, old objects are destroyed, and owners decide to
increase or restrict the set of users for their objects.  A considerable amount of
attention has been paid to modeling protection systems in which the protection ma-
trix is constantly changing. We will now touch briefly upon some of this work.
    Decades ago, Harrison et al. (1976) identified six primitive operations on the
protection matrix that can be used as a base to model any protection system. These
primitive operations are create object, delete object, create domain, delete domain,
insert right, and remove right.    The two latter primitives insert and remove rights
from specific matrix elements, such as granting domain 1 permission to read File6.
    These six primitives can be combined into protection commands.             It is these
protection commands that user programs can execute to change the matrix. They
may not execute the primitives directly.      For example, the system might have a
command to create a new file, which would test to see if the file already existed,
and if not, create a new object and give the owner all rights to it. There might also
be a command to allow the owner to grant permission to read the file to everyone
in the system, in effect, inserting the ``read'' right in the new file's entry in every
domain.
    At any instant, the matrix determines what a process in any domain can do, not
what it is authorized to do. The matrix is what is enforced by the system; autho-
rization has to do with management policy.    As an example of this distinction, let
us consider the simple system of Fig. 9-10 in which domains correspond to users.
In Fig. 9-10(a) we see the intended protection policy: Henry can read and write
mailbox7, Robert can read and write secret, and all three users can read and ex-
ecute compiler.
    Now imagine that Robert is very clever and has found a way to issue com-
mands to have the matrix changed to Fig. 9-10(b).         He has now gained access to
mailbox7, something he is not authorized to have.     If he tries to read it, the operat-
ing system will carry out his request because it does not know that the state of
Fig. 9-10(b) is unauthorized.



612                                       SECURITY                                           CHAP. 9
                       Objects                                                    Objects
             Compiler  Mailbox 7  Secret                             Compiler     Mailbox 7  Secret
       Eric  Read                                            Eric    Read
             Execute                                                 Execute
Henry        Read      Read                                  Henry   Read         Read
             Execute   Write                                         Execute      Write
Robert       Read                 Read                       Robert  Read         Read       Read
             Execute              Write                              Execute                 Write
                       (a)                                                        (b)
             Figure 9-10.         (a) An authorized  state.  (b) An unauthorized  state.
     It should now be clear that the set of all possible matrices can be partitioned
into two disjoint sets: the set of all authorized states and the set of all unauthorized
states.      A question around which much theoretical research has revolved is this:
``Given an initial authorized state and a set of commands, can it be proven that the
system can never reach an unauthorized state?''
     In effect, we are asking if the available mechanism (the protection commands)
is adequate to enforce some protection policy. Given this policy, some initial state
of the matrix, and the set of commands for modifying the matrix, what we would
like is a way to prove that the system is secure. Such a proof turns out quite dif-
ficult to acquire; many general-purpose systems are not theoretically secure.                        Har-
rison et al. (1976) proved that in the case of an arbitrary configuration for an arbi-
trary protection system, security is theoretically undecidable. However, for a spe-
cific system, it may be possible to prove whether the system can ever move from
an authorized state to an unauthorized state. For more information, see Landwehr
(1981).
9.4.1 Multilevel Security
     Most operating systems allow individual users to determine who may read and
write their files and other objects. This policy is called discretionary access con-
trol.    In many environments this model works fine, but there are other environ-
ments where much tighter security is required, such as the military, corporate pa-
tent departments, and hospitals.          In the latter environments, the organization has
stated rules about who can see what, and these may not be modified by individual
soldiers, lawyers, or doctors, at least not without getting special permission from
the boss (and probably from the boss' lawyers as well). These environments need
mandatory access controls to ensure that the stated security policies are enforced
by the system, in addition to the standard discretionary access controls. What these
mandatory access controls do is regulate the flow of information, to make sure that
it does not leak out in a way it is not supposed to.



SEC. 9.4              