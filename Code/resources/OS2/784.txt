MEMORY MANAGEMENT IN LINUX
The Linux memory model is straightforward, to make programs portable and
to make it possible to implement Linux on machines with widely differing memory
management units, ranging from essentially nothing (e.g., the original IBM PC) to
sophisticated paging hardware. This is an area of the design that has barely chang-
ed in decades.     It has worked well so it has not needed much revision.            We will
now examine the model and how it is implemented.



754                 CASE STUDY 1: UNIX, LINUX, AND ANDROID                          CHAP. 10
10.4.1  Fundamental Concepts
     Every Linux process has an address space that logically consists of three seg-
ments: text, data, and stack.      An example process' address space is illustrated in
Fig. 10-12(a) as process       A.  The text segment contains the machine instructions
that form the program's executable code.             It is produced by the compiler and ass-
embler by translating the C, C++, or other program into machine code. The text
segment is normally read-only.             Self-modifying programs went out of style in
about 1950 because they were too difficult to understand and debug. Thus the text
segment neither grows nor shrinks nor changes in any other way.
                    Process A              Physical memory    Process B
Stack pointer                                                                       Stack pointer
                                   Unused
                                   memory
                                                              BSS         24K
               20K  BSS
               8K   Data                                      Data        8K
                    Text                        OS            Text
               0    (a)                         (b)           (c)         0K
        Figure 10-12. (a) Process A's virtual address space.  (b) Physical memory.
        (c) Process B's virtual address space.
     The data segment contains storage for all the program's variables, strings,
arrays, and other data.        It has two parts, the initialized data and the uninitialized
data.   For historical reasons, the latter is known as the BSS (historically called
Block Started by Symbol). The initialized part of the data segment contains vari-
ables and compiler constants that need an initial value when the program is started.
All the variables in the BSS part are initialized to zero after loading.
     For example, in C it is possible to declare a character string and initialize it at
the same time. When the program starts up, it expects that the string has its initial
value.  To implement this construction, the compiler assigns the string a location in
the address space, and ensures that when the program is started up, this location
contains the proper string. From the operating system's point of view, initialized
data are not all that different from program text--both contain bit patterns pro-
duced by the compiler that must be loaded into memory when the program starts.
     The existence of uninitialized data is actually just an optimization. When a glo-
bal variable is not explicitly initialized, the semantics of the C language say that its



SEC. 10.4             