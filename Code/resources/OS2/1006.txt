SUMMARY
Kernel mode in Windows is structured in the HAL, the kernel and executive
layers of NTOS, and a large number of device drivers implementing everything
from device services to file systems and networking to graphics.  The HAL hides
certain differences in hardware from the other components. The kernel layer man-
ages the CPUs to support multithreading and synchronization, and the executive
implements most kernel-mode services.
The executive is based on kernel-mode objects that represent the key executive
data structures, including processes, threads, memory sections, drivers, devices,
and synchronization objects--to mention a few.     User processes create objects by
calling system services and get back handle references which can be used in subse-
quent system calls to the executive components.    The operating system also creates
objects internally.  The object manager maintains a namespace into which objects
can be inserted for subsequent lookup.
The most important objects in Windows are processes, threads, and sections.
Processes have virtual address spaces and are containers for resources. Threads are
the unit of execution and are scheduled by the kernel layer using a priority algo-
rithm in which the highest-priority ready thread always runs, preempting lower-pri-
ority threads as necessary.  Sections represent memory objects, like files, that can
be mapped into the address spaces of processes.    EXE and DLL program images
are represented as sections, as is shared memory.
Windows supports demand-paged virtual memory.         The paging algorithm is
based on the working-set concept.       The system maintains several types of page
lists, to optimize the use of memory.       The various page lists are fed by trimming
the working sets using complex formulas that try to reuse physical pages that have
not been referenced in a long time.     The cache manager manages virtual addresses
in the kernel that can be used to map files into memory, dramatically improving



976                          CASE STUDY 2: WINDOWS 8                                CHAP. 11
I/O performance for many applications because read operations can be satisfied
without accessing the disk.
       I/O is performed by device drivers, which follow the Windows Driver Model.
Each driver starts out by initializing a driver object that contains the addresses of
the procedures that the system can call to manipulate devices.     The actual devices
are represented by device objects, which are created from the configuration de-
scription of the system or by the plug-and-play manager as it discovers devices
when enumerating the system buses.           Devices are stacked and I/O request packets
are passed down the stack and serviced by the drivers for each device in the device
stack.  I/O is inherently asynchronous, and drivers commonly queue requests for
further work and return back to their caller.  File-system volumes are implemented
as devices in the I/O system.
       The NTFS file system is based on a master file table, which has one record per
file or directory.      All the metadata in an NTFS file system is itself part of an NTFS
file.  Each file has multiple attributes, which can be either in the MFT record or
nonresident (stored in blocks outside the MFT).        NTFS supports Unicode, com-
pression, journaling, and encryption among many other features.
       Finally, Windows has a sophisticated security system based on access control
lists and integrity levels.  Each process has an authentication token that tells the
identity of the user and what special privileges the process has, if any. Each object
has a security descriptor associated with it. The security descriptor points to a dis-
cretionary access control list that contains access control entries that can allow or
deny access to individuals or groups.        Windows has added numerous security fea-
tures in recent releases, including BitLocker for encrypting entire volumes, and ad-
dress-space randomization, nonexecutable stacks, and other measures to make suc-
cessful attacks more difficult.
                                             PROBLEMS
1.     Give one advantage and one disadvantage of the registry vs. having individual .ini files.
2.     A mouse can have one, two, or three buttons. All three types are in use. Does the HAL
       hide this difference from the rest of the operating system? Why or why not?
3.     The HAL keeps track of time starting in the year 1601. Give an example of an applica-
       tion where this feature is useful.
4.     In Sec. 11.3.3 we described the problems caused by multithreaded applications closing
       handles in one thread while still using them in another.    One possibility for fixing this
       would be to insert a sequence field.  How could this help?  What changes to the system
       would be required?
5.     Many components of the executive (Fig. 11-11) call other components of the executive.
       Give three examples of one component calling another one, but use (six) different com-
       ponents in all.



CHAP. 11                              PROBLEMS                                             977
6.   Win32 does not have signals. If they were to be introduced, they could be per process,
     per thread, both, or neither. Make a proposal and explain why it is a good idea.
7.   An alternative to using DLLs is to statically link each program with precisely those li-
     brary procedures it actually calls, no more and no less.  If this scheme were to be intro-
     duced, would it make more sense on client machines or on server machines?
8.   The discussion of Windows User-Mode Scheduling mentioned that user-mode and ker-
     nel-mode threads had different stacks.     What are some reasons why separate stacks are
     needed?
9.   Windows uses 2-MB large pages because it improves the effectiveness of the TLB,
     which can have a profound impact on performance. Why is this? Why are 2-MB large
     pages not used all the time?
10.  Is there any limit on the number of different operations that can be defined on an exec-
     utive object? If so, where does this limit come from? If not, why not?
11.  The Win32 API call WaitForMultipleObjects allows a thread to block on a set of syn-
     chronization objects whose handles are passed as parameters.     As soon as any one of
     them is signaled, the calling thread is released.  Is it possible to have the set of syn-
     chronization objects include two semaphores, one mutex, and one critical section?
     Why or why not?     (Hint: This is not a trick question but it does require some careful
     thought.)
12.  When  initializing  a    global  variable  in  a  multithreaded  program,  a  common       pro-
     gramming error is to allow a race condition where the variable can be initialized twice.
     Why could this be a problem?     Windows provides the InitOnceExecuteOnce API to
     prevent such races. How might it be implemented?
13.  Name three reasons why a desktop process might be terminated.            What additional rea-
     son might cause a process running a modern application to be terminated?
14.  Modern applications must save their state to disk every time the user switches away
     from the application.    This seems inefficient, as users may switch back to an applica-
     tion many times and the application simply resumes running.      Why does the operating
     system require applications to save their state so often rather than just giving them a
     chance at the point the application is actually going to be terminated?
15.  As described in Sec. 11.4, there is a special handle table used to allocate IDs for proc-
     esses and threads.  The algorithms for handle tables normally allocate the first avail-
     able handle (maintaining the free list in LIFO order).    In recent releases of Windows
     this was changed so that the ID table always keeps the free list in FIFO order.   What is
     the problem that the LIFO ordering potentially causes for allocating process IDs, and
     why does not UNIX have this problem?
16.  Suppose that the quantum is set to 20 msec and the current thread, at priority 24, has
     just started a quantum.  Suddenly an I/O operation completes and a priority 28 thread
     is made ready. About how long does it have to wait to get to run on the CPU?
17.  In Windows, the current priority is always greater than or equal to the base priority.
     Are there any circumstances in which it would make sense to have the current priority
     be lower than the base priority? If so, give an example. If not, why not?



978                          CASE STUDY 2: WINDOWS 8                          CHAP. 11
18.  Windows uses a facility called Autoboost to temporarily raise the priority of a thread
     that holds the resource that is required by a higher-priority thread.  How do you think
     this works?
19.  In Windows it is easy to implement a facility where threads running in the kernel can
     temporarily attach to the address space of a different process.        Why is this so much
     harder to implement in user mode? Why might it be interesting to do so?
20.  Name two ways to give better response time to the threads in important processes.
21.  Even when there is plenty of free memory available, and the memory manager does not
     need to trim working sets, the paging system can still frequently be writing to disk.
     Why?
22.  Windows swaps the processes for modern applications rather than reducing their work-
     ing set and paging them. Why would this be more efficient? (Hint: It makes much less
     of a difference when the disk is an SSD.)
23.  Why does the self-map used to access the physical pages of the page directory and
     page tables for a process always occupy the same 8 MB of kernel virtual addresses (on
     the x86)?
24.  The x86 can use either 64-bit or 32-bit page table entries.  Windows uses 64-bit PTEs
     so the system can access more than 4 GB of memory.           With 32-bit PTEs, the self-map
     uses only one PDE in the page directory, and thus occupies only 4 MB of addresses
     rather than 8 MB. Why is this?
25.  If a region of virtual address space is reserved but not committed, do you think a VAD
     is created for it? Defend your answer.
26.  Which of the transitions shown in Fig. 11-34 are policy decisions, as opposed to re-
     quired moves forced by system events (e.g., a process exiting and freeing its pages)?
27.  Suppose that a page is shared and in two working sets at once. If it is evicted from one
     of the working sets, where does it go in Fig. 11-34?  What happens when it is evicted
     from the second working set?
28.  When a process unmaps a clean stack page, it makes the transition (5) in Fig. 11-34.
     Where does a dirty stack page go when unmapped?       Why is there no transition to the
     modified list when a dirty stack page is unmapped?
29.  Suppose that a dispatcher object representing some type of exclusive lock (like a
     mutex) is marked to use a notification event instead of a synchronization event to
     announce that the lock has been released.  Why would this be bad?      How much would
     the answer depend on lock hold times, the length of quantum, and whether the system
     was a multiprocessor?
30.  To support POSIX, the native NtCreateProcess API supports duplicating a process in
     order to support fork.  In UNIX fork is shortly followed by an exec most of the time.
     One example where this was used historically was in the Berkeley dump(8S) program
     which would backup disks to magnetic tape. Fork was used as a way of checkpointing
     the dump program so it could be restarted if there was an error with the tape device.



CHAP. 11                                   PROBLEMS                                                979
     Give an example of how Windows might do something similar using NtCreateProcess.
     (Hint: Consider processes that host DLLs to implement functionality provided by a
     third party).
31.  A file has the following mapping. Give the MFT run entries.
     Offset                        0   1   2   3   4    5     6   7      8      9  10
     Disk address                  50  51  52  22  24  25     26  53   54       -  60
32.  Consider the MFT record of Fig. 11-41.        Suppose that the file grew and a 10th block
     was assigned to the end of the file.      The number of this block is 66.     What would the
     MFT record look like now?
33.  In Fig. 11-44(b), the first two runs are each of length 8 blocks.          Is it just an accident
     that they are equal, or does this have to do with the way compression works?        Explain
     your answer.
34.  Suppose that you wanted to build Windows Lite.           Which of the fields of Fig. 11-45
     could be removed without weakening the security of the system?
35.  The mitigation strategy for improving security despite the continuing presence of vul-
     nerabilities has been very successful. Modern attacks are very sophisticated, often re-
     quiring the presence of multiple vulnerabilities to build a reliable exploit.       One of the
     vulnerabilities that is usually required is an information leak.       Explain how an infor-
     mation leak can be used to defeat address-space randomization in order to launch an
     attack based on return-oriented programming.
36.  An extension model used by many programs (Web browsers, Office, COM servers)
     involves hosting DLLs to hook and extend their underlying functionality.            Is this a rea-
     sonable model for an RPC-based service to use as long as it is careful to impersonate
     clients before loading the DLL? Why not?
37.  When running on a NUMA machine, whenever the Windows memory manager needs
     to allocate a physical page to handle a page fault it attempts to use a page from the
     NUMA node for the current thread's ideal processor.      Why?      What if the thread is cur-
     rently running on a different processor?
38.  Give a couple of examples where an application might be able to recover easily from a
     backup based on a volume shadow copy rather the state of the disk after a system
     crash.
39.  In Sec. 11.10, providing new memory to the process heap was mentioned as one of the
     scenarios   that  require  a  supply  of  zeroed  pages  in  order     to  satisfy  security  re-
     quirements. Give one or more other examples of virtual memory operations that re-
     quire zeroed pages.
40.  Windows contains a hypervisor which allows multiple operating systems to run simul-
     taneously.     This is available on clients, but is far more important in cloud computing.
     When a security update is applied to a guest operating system, it is not much different
     than patching a server.    However, when a security update is applied to the root operat-
     ing system, this can be a big problem for the users of cloud computing.             What is the
     nature of the problem? What can be done about it?



980                        CASE STUDY 2: WINDOWS 8              CHAP. 11
41.  The regedit command can be used to export part or all of the registry to a text file
     under all current versions of Windows. Save the registry several times during a work
     session and see what changes.  If you have access to a Windows computer on which
     you can install software or hardware, find out what changes when a program or device
     is added or removed.
42.  Write a UNIX program that simulates writing an NTFS file with multiple streams.            It
     should accept a list of one or more files as arguments and write an output file that con-
     tains one stream with the attributes of all arguments and additional streams with the
     contents of each of the arguments.  Now write a second program for reporting on the
     attributes and streams and extracting all the components.
