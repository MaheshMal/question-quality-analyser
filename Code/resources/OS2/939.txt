PROCESSES AND THREADS IN WINDOWS
     Windows has a number of concepts for managing the CPU and grouping re-
sources together. In the following sections we will examine these, discussing some
of the relevant Win32 API calls, and show how they are implemented.
11.4.1 Fundamental Concepts
     In Windows processes are containers for programs.    They hold the virtual ad-
dress space, the handles that refer to kernel-mode objects, and threads.           In their
role as a container for threads they hold common resources used for thread execu-
tion, such as the pointer to the quota structure, the shared token object, and default
parameters used to initialize threads--including the priority and scheduling class.
Each process has user-mode system data, called the PEB (Process Environment
Block).   The PEB includes the list of loaded modules (i.e., the EXE and DLLs),
the memory containing environment strings, the current working directory, and
data for managing the process' heaps--as well as lots of special-case Win32 cruft
that has been added over time.
     Threads are the kernel's abstraction for scheduling the CPU in Windows.            Pri-
orities are assigned to each thread based on the priority value in the containing
process.  Threads can also be affinitized to run only on certain processors.       This
helps concurrent programs running on multicore chips or multiprocessors to expli-
citly spread out work.  Each thread has two separate call stacks, one for execution
in user mode and one for kernel mode.  There is also a TEB (Thread Environ-
ment Block) that keeps user-mode data specific to the thread, including per-thread
storage (Thread Local Storage) and fields for Win32, language and cultural local-
ization, and other specialized fields that have been added by various facilities.
     Besides the PEBs and TEBs, there is another data structure that kernel mode
shares with each process, namely, user shared data. This is a page that is writable
by the kernel, but read-only in every user-mode process.  It contains a number of
values maintained by the kernel, such as various forms of time, version infor-
mation, amount of physical memory, and a large number of shared flags used by
various user-mode components, such as COM, terminal services, and the debug-
gers.  The use of this read-only shared page is purely a performance optimization,
as the values could also be obtained by a system call into kernel mode.   But system
calls are much more expensive than a single memory access, so for some sys-
tem-maintained fields, such as the time, this makes a lot of sense.  The other fields,
such as the current time zone, change infrequently (except on airborne computers),



SEC. 11.4         