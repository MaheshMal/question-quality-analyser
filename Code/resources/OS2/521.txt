I/O VIRTUALIZATION
     Having looked at CPU and memory virtualization, we next examine I/O virtu-
alization.  The guest operating system will typically start out probing the hardware
to find out what kinds of I/O devices are attached.         These probes will trap to the
hypervisor.  What should the hypervisor do?        One approach is for it to report back
that the disks, printers, and so on are the ones that the hardware actually has.          The
guest will then load device drivers for these devices and try to use them. When the
device drivers try to do actual I/O, they will read and write the device's hardware
device registers.  These instructions are sensitive and will trap to the hypervisor,
which could then copy the needed values to and from the hardware registers, as
needed.
     But here, too, we have a problem. Each guest OS could think it owns an entire
disk partition, and there may be many more virtual machines (hundreds) than there
are actual disk partitions. The usual solution is for the hypervisor to create a file or
region on the actual disk for each virtual machine's physical disk. Since the guest
OS is trying to control a disk that the real hardware has (and which the hypervisor
understands), it can convert the block number being accessed into an offset into the
file or disk region being used for storage and do the I/O.
     It is also possible for the disk that the guest is using to be different from the
real one. For example, if the actual disk is some brand-new high-performance disk
(or RAID) with a new interface, the hypervisor could advertise to the guest OS that
it has a plain old IDE disk and let the guest OS install an IDE disk driver. When
this driver issues IDE disk commands, the hypervisor converts them into com-
mands to drive the new disk. This strategy can be used to upgrade the hardware
without changing the software.        In fact, this ability of virtual machines to remap



SEC. 7.7                     