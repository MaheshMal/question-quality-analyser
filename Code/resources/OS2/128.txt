THREADS
In traditional operating systems, each process has an address space and a single
thread of control.   In fact, that is almost the definition of a process.  Nevertheless,
in many situations, it is desirable to have multiple threads of control in the same
address space running in quasi-parallel, as though they were (almost) separate
processes (except for the shared address space).  In the following sections we will
discuss these situations and their implications.
2.2.1 Thread Usage
Why would anyone want to have a kind of process within a process?              It turns
out there are several reasons for having these miniprocesses, called threads.             Let
us now examine some of them. The main reason for having threads is that in many
applications, multiple activities are going on at once. Some of these may block
from time to time.   By decomposing such an application into multiple sequential
threads that run in quasi-parallel, the programming model becomes simpler.



98                         PROCESSES AND 