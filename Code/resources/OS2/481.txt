DEADLOCK AVOIDANCE
     In the discussion of deadlock detection, we tacitly assumed that when a proc-
ess asks for resources, it asks for them all at once (the R matrix of Fig. 6-6).          In
most systems, however, resources are requested one at a time.  The system must be
able to decide whether granting a resource is safe or not and make the allocation
only when it is safe.   Thus, the question arises: Is there an algorithm that can al-
ways avoid deadlock by making the right choice all the time?           The answer is a
qualified yes--we can avoid deadlocks, but only if certain information is available
in advance.     In this section we examine ways to avoid deadlock by careful resource
allocation.
6.5.1 Resource Trajectories
     The main algorithms for deadlock avoidance are based on the concept of safe
states. Before describing them, we will make a slight digression to look at the con-
cept of safety in a graphic and easy-to-understand way.     Although the graphical ap-
proach does not translate directly into a usable algorithm, it gives a good intuitive
feel for the nature of the problem.



SEC. 6.5                       