THE WORLD ACCORDING TO C
Operating systems are normally large C (or sometimes C++) programs consist-
ing of many pieces written by many programmers. The environment used for
developing operating systems is very different from what individuals (such as stu-
dents) are used to when writing small Java programs. This section is an attempt to
give a very brief introduction to the world of writing an operating system for small-
time Java or Python programmers.
1.8.1 The C Language
This is not a guide to C, but a short summary of some of the key differences
between C and languages like Python and especially Java. Java is based on C, so
there are many similarities between the two. Python is somewhat different, but still
fairly similar. For convenience, we focus on Java.   Java, Python, and C are all
imperative languages with data types, variables, and control statements, for ex-
ample. The primitive data types in C are integers (including short and long ones),
characters, and floating-point numbers. Composite data types can be constructed
using arrays, structures, and unions.  The control statements in C are similar to
those in Java, including if, switch, for, and while statements. Functions and param-
eters are roughly the same in both languages.



74                                  INTRODUCTION                               CHAP. 1
    One feature C has that Java and Python do not is explicit pointers.       A pointer
is a variable that points to (i.e., contains the address of) a variable or data structure.
Consider the statements
    char c1, c2, *p;
    c1 = 'c';
    p = &c1;
    c2 = *p;
which declare c1 and c2 to be character variables and p to be a variable that points
to (i.e., contains the address of) a character. The first assignment stores the ASCII
code for the character ``c'' in the variable c1.  The second one assigns the address
of c1 to the pointer variable p.    The third one assigns the contents of the variable
pointed to by p to the variable c2, so after these statements are executed, c2 also
contains the ASCII code for ``c''.     In theory, pointers are typed, so you are not sup-
posed to assign the address of a floating-point number to a character pointer, but in
practice  compilers   accept  such  assignments,  albeit  sometimes  with   a  warning.
Pointers are a very powerful construct, but also a great source of errors when used
carelessly.
    Some things that C does not have include built-in strings, threads, packages,
classes, objects, type safety, and garbage collection. The last one is a show stopper
for operating systems.   All storage in C is either static or explicitly allocated and
released by the programmer, usually with the library functions malloc and free.             It
is the latter property--total programmer control over memory--along with explicit
pointers that makes C attractive for writing operating systems. Operating systems
are basically real-time systems to some extent, even general-purpose ones.       When
an interrupt occurs, the operating system may have only a few microseconds to
perform some action or lose critical information. Having the garbage collector kick
in at an arbitrary moment is intolerable.
1.8.2 Header Files
    An operating system project generally consists of some number of directories,
each containing many .c files containing the code for some part of the system,
along with some .h header files that contain declarations and definitions used by
one or more code files. Header files can also include simple macros, such as
    #define BUFFER SIZE 4096
which allows the programmer to name constants, so that when BUFFER SIZE is
used in the code, it is replaced during compilation by the number 4096.        Good C
programming practice is to name every constant except 0, 1, and -1, and some-
times even them. Macros can have parameters, such as
    #define max(a, b) (a > b ? a : b)
which allows the programmer to write



SEC. 1.8                 