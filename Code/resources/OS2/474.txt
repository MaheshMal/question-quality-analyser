DEADLOCK DETECTION AND RECOVERY
    A second technique is detection and recovery.                 When this technique is used,
the system does not attempt to prevent deadlocks from occurring.                      Instead, it lets
them occur, tries to detect when this happens, and then takes some action to
Actually, this bit of folklore is nonsense. Ostriches can run at 60 km/hour and their kick is powerful
enough to kill any lion with visions of a big chicken dinner, and lions know this.



444                             DEADLOCKS                                CHAP. 6
recover after the fact.  In this section we will look at some of the ways deadlocks
can be detected and some of the ways recovery from them can be handled.
6.4.1 Deadlock Detection with One Resource of Each Type
     Let us begin with the simplest case: there is only one resource of each type.
Such a system might have one scanner, one Blu-ray recorder, one plotter, and one
tape drive, but no more than one of each class of resource.    In other words, we are
excluding systems with two printers for the moment.          We will treat them later,
using a different method.
     For such a system, we can construct a resource graph of the sort illustrated in
Fig. 6-3. If this graph contains one or more cycles, a deadlock exists. Any process
that is part of a cycle is deadlocked.     If no cycles exist, the system is not dead-
locked.
     As an example of a system more complex than those we have looked at so far,
consider a system with seven processes, A though G, and six resources, R through
W.   The state of which resources are currently owned and which ones are currently
being requested is as follows:
     1.    Process A holds R and wants S.
     2.    Process B holds nothing but wants T.
     3.    Process C holds nothing but wants S.
     4.    Process D holds U and wants S and T.
     5.    Process E holds T and wants V.
     6.    Process F holds W and wants S.
     7.    Process G holds V and wants U.
The question is: ``Is this system deadlocked, and if so, which processes are in-
volved?''
     To answer this question, we can construct the resource graph of Fig. 6-5(a).
This graph contains one cycle, which can be seen by visual inspection.   The cycle
is shown in Fig. 6-5(b). From this cycle, we can see that processes D, E, and G are
all deadlocked.  Processes A, C, and F are not deadlocked because S can be allo-
cated to any one of them, which then finishes and returns it.  Then the other two
can take it in turn and also complete.     (Note that to make this example more inter-
esting we have allowed processes, namely D, to ask for two resources at once.)
     Although it is relatively simple to pick out the deadlocked processes by visual
inspection from a simple graph, for use in actual systems we need a formal algo-
rithm for detecting deadlocks.  Many algorithms for detecting cycles in directed
graphs are known.  Below we will give a simple one that inspects a graph and ter-
minates either when it has found a cycle or when it has shown that none exists.         It



SEC.  6.4             