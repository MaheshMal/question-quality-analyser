I/O SOFTWARE LAYERS
     I/O software is typically organized in four layers, as shown in Fig. 5-11.  Each
layer has a well-defined function to perform and a well-defined interface to the ad-
jacent layers. The functionality and interfaces differ from system to system, so the
discussion that follows, which examines all the layers starting at the bottom, is not
specific to one machine.
                          User-level I/O software
                          Device-independent operating system software
                                       Device drivers
                                   Interrupt handlers
                                       Hardware
                 Figure 5-11. Layers of the I/O software system.
5.3.1 Interrupt Handlers
     While programmed I/O is occasionally useful, for most I/O, interrupts are an
unpleasant fact of life and cannot be avoided. They should be hidden away, deep in
the bowels of the operating system, so that as little of the operating system as pos-
sible knows about them. The best way to hide them is to have the driver starting an
I/O operation block until the I/O has completed and the interrupt occurs. The driver
can block itself, for example, by doing a down on a semaphore, a wait on a condi-
tion variable, a receive on a message, or something similar.
     When the interrupt happens, the interrupt procedure does whatever it has to in
order to handle the interrupt. Then it can unblock the driver that was waiting for it.
In some cases it will just complete up on a semaphore. In others it will do a signal
on a condition variable in a monitor.  In still others, it will send a message to the
blocked driver.  In all cases the net effect of the interrupt will be that a driver that
was previously blocked will now be able to run. This model works best if drivers
are structured as kernel processes, with their own states, stacks, and program
counters.
     Of course, reality is not quite so simple. Processing an interrupt is not just a
matter of taking the interrupt, doing an up on some semaphore, and then executing
an IRET instruction to return from the interrupt to the previous process. There is a
great deal more work involved for the operating system.                 We will now give an out-
line of this work as a series of steps that must be performed in software after the
hardware interrupt has completed.      It should be noted that the details are highly



SEC. 5.3                         