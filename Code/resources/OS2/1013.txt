THE NATURE OF THE DESIGN PROBLEM
     Operating system design is more of an engineering project than an exact sci-
ence. It is hard to set clear goals and meet them. Let us start with these points.
12.1.1 Goals
     In order to design a successful operating system, the designers must have a
clear idea of what they want. Lack of a goal makes it very hard to make subsequent
decisions.  To make this point clearer, it is instructive to take a look at two pro-
gramming languages, PL/I and C. PL/I was designed by IBM in the 1960s because
it was a nuisance to have to support both FORTRAN and COBOL, and embarrass-
ing to have academics yapping in the background that Algol was better than both
of them. So a committee was set up to produce a language that would be all things
to all people: PL/I.   It had a little bit of FORTRAN, a little bit of COBOL, and a
little bit of Algol.   It failed because it lacked any unifying vision.  It was simply a
collection of features at war with one another, and too cumbersome to be compiled
efficiently, to boot.
     Now consider C.   It was designed by one person (Dennis Ritchie) for one pur-
pose (system programming).      It was a huge success, in no small part because
Ritchie knew what he wanted and did not want. As a result, it is still in widespread
use more than three decades after its appearance.  Having a clear vision of what
you want is crucial.
     What do operating system designers want?      It obviously varies from system to
system, being different for embedded systems than for server systems. However,
for general-purpose operating systems four main items come to mind:
      1.  Define abstractions.
      2.  Provide primitive operations.
      3.  Ensure isolation.
      4.  Manage the hardware.
Each of these items will be discussed below.
     The most important, but probably hardest task of an operating system is to
define the right abstractions. Some of them, such as processes, address spaces, and
files, have been around so long that they may seem obvious. Others, such as
threads, are newer, and are less mature.      For example, if a multithreaded process
that has one thread blocked waiting for keyboard input forks, is there a thread in
the new process also waiting for keyboard input?   Other abstractions relate to syn-
chronization, signals, the memory model, modeling of I/O, and many other areas.
     Each of the abstractions can be instantiated in the form of concrete data struc-
tures. Users can create processes, files, pipes, and more.  The primitive operations



SEC. 12.1             