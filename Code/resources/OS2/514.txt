ARE HYPERVISORS MICROKERNELS DONE RIGHT?
    Both type 1 and type 2 hypervisors work with unmodified guest operating sys-
tems, but have to jump through hoops to get good performance. We have seen that
paravirtualization takes a different approach by modifying the source code of the
guest operating system instead. Rather than performing sensitive instructions, the
paravirtualized guest executes hypercalls.    In effect the guest operating system is
acting like a user program making system calls to the operating system (the hyper-
visor).   When this route is taken, the hypervisor must define an interface consisting
of a set of procedure calls that guest operating systems can use.  This set of calls
forms what is effectively an API (Application Programming Interface) even
though it is an interface for use by guest operating systems, not application pro-
grams.
    Going one step further, by removing all the sensitive instructions from the op-
erating system and just having it make hypercalls to get system services like I/O,
we have turned the hypervisor into a microkernel, like that of Fig. 1-26. The idea,
explored in paravirtualization, is that emulating peculiar hardware instructions is
an unpleasant and time-consuming task. It requires a call into the hypervisor and
then emulating the exact semantics of a complicated instruction.   It is far better just
to have the guest operating system call the hypervisor (or microkernel) to do I/O,
and so on.
    Indeed, some researchers have argued that we should perhaps consider hyper-
visors as ``microkernels done right'' (Hand et al., 2005). The first thing to mention
is  that  this  is  a  highly  controversial  topic  and  some  researchers  have  vocally
opposed the notion, arguing that the difference between the two is not fundamental
to begin with (Heiser et al., 2006). Others suggest that compared to microkernels,
hypervisors may not even be that well suited for building secure systems, and
advocate that they be extended with kernel functionality like message passing and
memory sharing (Hohmuth et al., 2004).        Finally, some researchers argue that per-
haps hypervisors are not even ``operating systems research done right'' (Roscoe et
al., 2007). Since nobody said anything about operating system textbooks done right



484                  VIRTUALIZATION AND THE CLOUD                           CHAP. 7
(or wrong)--yet--we think we do right by exploring the similarity between hyper-
visors and microkernels a bit more.
     The main reason the first hypervisors emulated the complete machine was the
lack of availability of source code for the guest operating system (e.g., for Win-
dows) or the vast number of variants (e.g., for Linux).         Perhaps in the future the
hypervisor/microkernel API will be standardized, and subsequent operating sys-
tems will be designed to call it instead of using sensitive instructions. Doing so
would make virtual machine technology easier to support and use.
     The difference between true virtualization and paravirtualization is illustrated
in Fig. 7-5.  Here we have two virtual machines being supported on VT hardware.
On the left is an unmodified version of Windows as the guest operating system.
When a sensitive instruction is executed, the hardware causes a trap to the hypervi-
sor, which then emulates it and returns. On the right is a version of Linux modified
so that it no longer contains any sensitive instructions. Instead, when it needs to do
I/O or change critical internal registers (such as the one pointing to the page
tables), it makes a hypervisor call to get the work done, just like an application pro-
gram making a system call in standard Linux.
     True virtualization                       Paravirtualization
                                 Trap due                             Trap due
     Unmodified Windows          to sensitive  Modified Linux         to hypervisor
                                 instruction                          call
              Type 1 hypervisor                Microkernel
                                 Hardware
              Figure 7-5. True virtualization and paravirtualization
     In Fig. 7-5 we have shown the hypervisor as being divided into two parts sepa-
rated by a dashed line. In reality, only one program is running on the hardware.
One part of it is responsible for interpreting trapped sensitive instructions, in this
case, from Windows.  The other part of it just carries out hypercalls. In the figure
the latter part is labeled ``microkernel.'' If the hypervisor is intended to run only
paravirtualized guest operating systems, there is no need for the emulation of sen-
sitive instructions and we have a true microkernel, which just provides very basic
services such as process dispatching and managing the MMU. The boundary be-
tween a type 1 hypervisor and a microkernel is vague already and will get even less
clear as hypervisors begin acquiring more and more functionality and hypercalls,
as seems likely. Again, this subject is controversial, but it is increasingly clear that
the program running in kernel mode on the bare hardware should be small and reli-
able and consist of thousands, not millions, of lines of code.



SEC. 7.5  