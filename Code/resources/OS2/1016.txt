INTERFACE DESIGN
It should be clear by now that writing a modern operating system is not easy.
But where does one begin?  Probably the best place to begin is to think about the
interfaces it provides.  An operating system provides a set of abstractions, mostly
implemented by data types (e.g., files) and operations on them (e.g., read).          Toget-
her, these form the interface to its users. Note that in this context the users of the
operating system are programmers who write code that use system calls, not peo-
ple running application programs.
In addition to the main system-call interface, most operating systems have ad-
ditional interfaces. For example, some programmers need to write device drivers to
insert into the operating system. These drivers see certain features and can make
certain procedure calls. These features and calls also define an interface, but a very
different one from one application programmers see. All of these interfaces must
be carefully designed if the system is to succeed.
12.2.1 Guiding Principles
Are there any principles that can guide interface design?  We believe there are.
Briefly summarized, they are simplicity, completeness, and the ability to be imple-
mented efficiently.
Principle 1: Simplicity
A simple interface is easier to understand and implement in a bug-free way. All
system designers should memorize this famous quote from the pioneer French avi-
ator and writer, Antoine de St. Exupe´ry:
Perfection is reached not when there is no longer anything to add, but
when there is no longer anything to take away.



986                       OPERATING SYSTEM DESIGN                               CHAP. 12
If you want to get really picky, he didn't say that. He said:
     Il semble que la perfection soit atteinte non quand il n'y a plus rien a`
     ajouter, mais quand il n'y a plus rien a` retrancher.
But you get the idea. Memorize it either way.
     This principle says that less is better than more, at least in the operating system
itself. Another way to say this is the KISS principle: Keep It Simple, Stupid.
Principle 2: Completeness
     Of course, the interface must make it possible to do everything that the users
need to do, that is, it must be complete. This brings us to another famous quote,
this one from Albert Einstein:
     Everything should be as simple as possible, but no simpler.
In other words, the operating system should do exactly what is needed of it and no
more. If users need to store data, it must provide some mechanism for storing data.
If users need to communicate with each other, the operating system has to provide
a communication mechanism, and so on.          In his 1991 Turing Award lecture, Fer-
nando Corbato´, one of the designers of CTSS and MULTICS, combined the con-
cepts of simplicity and completeness and said:
     First, it is important to emphasize the value of simplicity and elegance, for
     complexity has a way of compounding difficulties and as we have seen,
     creating mistakes.   My definition of elegance is the achievement of a given
     functionality with a minimum of mechanism and a maximum of clarity.
The key idea here is minimum of mechanism.      In other words, every feature, func-
tion, and system call should carry its own weight.  It should do one thing and do it
well. When a member of the design team proposes extending a system call or add-
ing some new feature, the others should ask whether something awful would hap-
pen if it were left out.  If the answer is: ``No, but somebody might find this feature
useful some day,'' put it in a user-level library, not in the operating system, even if
it is slower that way. Not every feature has to be faster than a speeding bullet. The
goal is to preserve what Corbato´ called minimum of mechanism.
     Let us briefly consider two examples from our own experience: MINIX (Tan-
enbaum and Woodhull, 2006) and Amoeba (Tanenbaum et al., 1990).                     For all
intents and purposes, MINIX until very recently had only three kernel calls: send,
receive, and sendrec.     The system is structured as a collection of processes, with
the memory manager, the file system, and each device driver being a separate
schedulable process.      To a first approximation, all the kernel does is schedule proc-
esses and handle message passing between them. Consequently, only two system
calls were needed: send, to send a message, and receive, to receive one. The third
call, sendrec, is simply an optimization for efficiency reasons to allow a message



SEC. 12.2                  