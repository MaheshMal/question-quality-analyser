PROGRAMMING WINDOWS
     It is now time to start our technical study of Windows.  Before getting into the
details of the internal structure, however, we will take a look at the native NT API
for system calls, the Win32 programming subsystem introduced as part of NT-
based Windows, and the Modern WinRT programming environment introduced
with Windows 8.
     Figure 11-4 shows the layers of the Windows operating system.  Beneath the
applet and GUI layers of Windows are the programming interfaces that applica-
tions build on. As in most operating systems, these consist largely of code libraries
(DLLs) to which programs dynamically link for access to operating system fea-
tures.  Windows also includes a number of programming interfaces which are im-
plemented as services that run as separate processes.  Applications communicate
with user-mode services through RPCs (Remote-Procedure-Calls).
     The core of the NT operating system is the NTOS kernel-mode program
(ntoskrnl.exe), which provides the traditional system-call interfaces upon which the
rest of the operating system is built.  In Windows, only programmers at Microsoft
write to the system-call layer.  The published user-mode interfaces all belong to
operating system personalities that are implemented using subsystems that run on
top of the NTOS layers.
     Originally NT supported three personalities: OS/2, POSIX and Win32.  OS/2
was discarded in Windows XP.     Support for POSIX was finally removed in Win-
dows 8.1.  Today all Windows applications are written using APIs that are built on
top of the Win32 subsystem, such as the WinFX API in the .NET programming
model. The WinFX API includes many of the features of Win32, and in fact many



SEC. 11.2                  