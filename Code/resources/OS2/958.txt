MEMORY MANAGEMENT
Windows has an extremely sophisticated and complex virtual memory system.
It has a number of Win32 functions for using it, implemented by the memory man-
ager--the largest component of the NTOS executive layer.                 In the following sec-
tions we will look at the fundamental concepts, the Win32 API calls, and finally
the implementation.



928                              CASE STUDY 2: WINDOWS 8                                     CHAP. 11
11.5.1      Fundamental Concepts
     In Windows, every user process has its own virtual address space. For x86 ma-
chines, virtual addresses are 32 bits long, so each process has 4 GB of virtual ad-
dress space, with the user and kernel each receiving 2 GB. For x64 machines, both
the user and kernel receive more virtual addresses than they can reasonably use in
the foreseeable future.        For both x86 and x64, the virtual address space is demand
paged, with a fixed page size of 4 KB--though in some cases, as we will see short-
ly, 2-MB large pages are also used (by using a page directory only and bypassing
the corresponding page table).
     The    virtual     address  space  layouts       for     three  x86  processes  are     shown  in
Fig. 11-28 in simplified form.   The bottom and top 64 KB of each process' virtual
address space is normally unmapped.              This choice was made intentionally to help
catch programming errors and mitigate the exploitability of certain types of vulner-
abilities.
            Process A                            Process B                           Process C
4 GB
            Nonpaged pool               Nonpaged pool                     Nonpaged pool
            Paged pool                  Paged pool                                   Paged pool
            A's page tables             B's page tables                   C's page tables
            Stacks, data, etc           Stacks, data, etc                 Stacks, data, etc
            HAL + OS                             HAL + OS                            HAL + OS
2 GB        System data                 System data                                  System data
            Process A's                 Process B's                                  Process C's
            private code                private code                                 private code
            and data                                and data                         and data
     0
                                 Bottom and top
                                 64 KB are invalid
            Figure 11-28. Virtual address space layout for three user processes on the x86.
            The white areas are private per process.  The shaded areas are shared among all
            processes.
     Starting at 64 KB comes the user's private code and data.            This extends up to
almost 2 GB.  The upper 2 GB contains the operating system, including the code,
data, and the paged and nonpaged pools.               The upper 2 GB is the kernel's virtual
memory and is shared among all user processes, except for virtual memory data
like the page tables and working-set lists, which are per-process.                   Kernel virtual



SEC. 11.5                        