HISTORY OF UNIX AND LINUX
     UNIX and Linux have a long and interesting history, so we will begin our
study there. What started out as the pet project of one young researcher (Ken
Thompson) has become a billion-dollar industry involving universities, multina-
tional corporations, governments, and international standardization bodies.  In the
following pages we will tell how this story has unfolded.
10.1.1 UNICS
     Way back in the 1940s and 1950s, all computers were personal computers in
the sense that the then-normal way to use a computer was to sign up for an hour of
time and take over the entire machine for that period.     Of course, these machines
were physically immense, but only one person (the programmer) could use them at
any given time. When batch systems took over, in the 1960s, the programmer sub-
mitted a job on punched cards by bringing it to the machine room. When enough
jobs had been assembled, the operator read them all in as a single batch.    It usually
took an hour or more after submitting a job until the output was returned. Under
these circumstances, debugging was a time-consuming process, because a single
misplaced comma might result in wasting several hours of the programmer's time.
     To get around what everyone viewed as an unsatisfactory, unproductive, and
frustrating  arrangement,  timesharing  was   invented     at  Dartmouth   College     and
M.I.T.  The Dartmouth system ran only BASIC and enjoyed a short-term commer-
cial success before vanishing. The M.I.T. system, CTSS, was general purpose and
was a big success in the scientific community. Within a short time, researchers at
M.I.T. joined forces with Bell Labs and General Electric (then a computer vendor)
and  began   designing  a  second-generation  system,      MULTICS  (MULTiplexed
Information and Computing Service), as we discussed in Chap. 1.
     Although Bell Labs was one of the founding partners in the MULTICS project,
it later pulled out, which left one of the Bell Labs researchers, Ken Thompson,
looking around for something interesting to do.  He eventually decided to write a
stripped-down MULTICS all by himself (in assembly language this time) on an old



SEC. 10.1                    