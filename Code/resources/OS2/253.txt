DESIGN ISSUES FOR PAGING SYSTEMS
     In the previous sections we have explained how paging works and have given a
few of the basic page replacement algorithms.  But knowing the bare mechanics is
not enough.    To design a system and make it work well you have to know a lot
more.   It is like the difference between knowing how to move the rook, knight,
bishop, and other pieces in chess, and being a good player.       In the following sec-
tions, we will look at other issues that operating system designers must consider
carefully in order to get good performance from a paging system.
3.5.1 Local versus Global Allocation Policies
     In the preceding sections we have discussed several algorithms for choosing a
page to replace when a fault occurs.    A major issue associated with this choice
(which we have carefully swept under the rug until now) is how memory should be
allocated among the competing runnable processes.
     Take a look at Fig. 3-22(a).  In this figure, three processes, A, B, and C, make
up the set of runnable processes. Suppose A gets a page fault. Should the page re-
placement algorithm try to find the least recently used page considering only the
six pages currently allocated to A, or should it consider all the pages in memory?
If it looks only at A's pages, the page with the lowest age value is A5, so we get the
situation of Fig. 3-22(b).
     On the other hand, if the page with the lowest age value is removed without
regard to whose page it is, page B3 will be chosen and we will get the situation of
Fig. 3-22(c).  The algorithm of Fig. 3-22(b) is said to be a local page replacement



SEC. 3.5           