DEADLOCK PREVENTION
     Having seen that deadlock avoidance is essentially impossible, because it re-
quires information about future requests, which is not known, how do real systems
avoid deadlock?  The answer is to go back to the four conditions stated by Coff-
man et al. (1971) to see if they can provide a clue.        If we can ensure that at least
one of these conditions is never satisfied, then deadlocks will be structurally im-
possible (Havender, 1968).
6.6.1 Attacking the Mutual-Exclusion Condition
     First let us attack the mutual exclusion condition.    If no resource were ever as-
signed exclusively to a single process, we would never have deadlocks. For data,
the simplest method is to make data read only, so that processes can use the data
concurrently.  However, it is equally clear that allowing two processes to write on
the printer at the same time will lead to chaos.  By spooling printer output, several
processes can generate output at the same time.        In this model, the only process
that actually requests the physical printer is the printer daemon.  Since the daemon
never requests any other resources, we can eliminate deadlock for the printer.
     If the daemon is programmed to begin printing even before all the output is
spooled, the printer might lie idle if an output process decides to wait several hours
after the first burst of output.  For this reason, daemons are normally programmed
to print only after the complete output file is available.  However, this decision it-
self could lead to deadlock.      What would happen if two processes each filled up
one half of the available spooling space with output and neither was finished pro-
ducing its full output? In this case, we would have two processes that had each fin-
ished part, but not all, of their output, and could not continue. Neither process will
ever finish, so we would have a deadlock on the disk.
     Nevertheless, there is a germ of an idea here that is frequently applicable.
Avoid assigning a resource unless absolutely necessary, and try to make sure that
as few processes as possible may actually claim the resource.
6.6.2 Attacking the Hold-and-Wait Condition
     The second of the conditions stated by Coffman et al. looks slightly more
promising.  If we can prevent processes that hold resources from waiting for more
resources, we can eliminate deadlocks.  One way to achieve this goal is to require



SEC. 6.6                    