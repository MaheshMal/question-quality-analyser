SYSTEM CALLS
    We    have  seen  that  operating  systems   have  two  main      functions:  providing
abstractions to user programs and managing the computer's resources. For the most
part, the interaction between user programs and the operating system deals with the
former;   for   example,    creating,  writing,  reading,  and  deleting  files.  The    re-
source-management part is largely transparent to the users and done automatically.
Thus, the interface between user programs and the operating system is primarily
about dealing with the abstractions.   To really understand what operating systems
do, we must examine this interface closely. The system calls available in the inter-
face vary from one operating system to another (although the underlying concepts
tend to be similar).
    We are thus forced to make a choice between (1) vague generalities (``operat-
ing systems have system calls for reading files'') and (2) some specific system
(``UNIX has a read system call with three parameters: one to specify the file, one
to tell where the data are to be put, and one to tell how many bytes to read'').
    We have chosen the latter approach.  It's more work that way, but it gives more
insight into what operating systems really do. Although this discussion specifically
refers to POSIX (International Standard 9945-1), hence also to UNIX, System V,
BSD, Linux, MINIX 3, and so on, most other modern operating systems have sys-
tem calls that perform the same functions, even if the details differ. Since the actual



SEC. 1.6                         