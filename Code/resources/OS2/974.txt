INPUT/OUTPUT IN WINDOWS
The goals of the Windows I/O manager are to provide a fundamentally exten-
sive and flexible framework for efficiently handling a very wide variety of I/O de-
vices and services, support automatic device discovery and driver installation (plug



944                          CASE STUDY 2: WINDOWS 8                       CHAP. 11
and play) and power management for devices and the CPU--all using a fundamen-
tally asynchronous structure that allows computation to overlap with I/O transfers.
There are many hundreds of thousands of devices that work with Windows.            For a
large number of common devices it is not even necessary to install a driver, be-
cause there is already a driver that shipped with the Windows operating system.
But even so, counting all the revisions, there are almost a million distinct driver
binaries that run on Windows.  In the following sections we will examine some of
the issues relating to I/O.
11.7.1 Fundamental Concepts
      The I/O manager is on intimate terms with the plug-and-play manager.              The
basic idea behind plug and play is that of an enumerable bus.       Many buses, includ-
ing PC Card, PCI, PCIe, AGP, USB, IEEE 1394, EIDE, SCSI, and SATA, have
been designed so that the plug-and-play manager can send a request to each slot
and ask the device there to identify itself.  Having discovered what is out there, the
plug-and-play  manager       allocates  hardware  resources,  such  as  interrupt  levels,
locates the appropriate drivers, and loads them into memory.        As each driver is
loaded, a driver object is created for it.    And then for each device, at least one de-
vice object is allocated.    For some buses, such as SCSI, enumeration happens only
at boot time, but for other buses, such as USB, it can happen at any time, requiring
close cooperation between the plug-and-play manager, the bus drivers (which ac-
tually do the enumerating), and the I/O manager.
      In Windows, all the file systems, antivirus filters, volume managers, network
protocol stacks, and even kernel services that have no associated hardware are im-
plemented using I/O drivers.   The system configuration must be set to cause some
of these drivers to load, because there is no associated device to enumerate on the
bus.  Others, like the file systems, are loaded by special code that detects they are
needed, such as the file-system recognizer that looks at a raw volume and deci-
phers what type of file system format it contains.
      An interesting feature of Windows is its support for dynamic disks.          These
disks may span multiple partitions and even multiple disks and may be reconfig-
ured on the fly, without even having to reboot.     In this way, logical volumes are no
longer constrained to a single partition or even a single disk so that a single file
system may span multiple drives in a transparent way.
      The I/O to volumes can be filtered by a special Windows driver to produce
Volume Shadow Copies. The filter driver creates a snapshot of the volume which
can be separately mounted and represents a volume at a previous point in time.            It
does this by keeping track of changes after the snapshot point.         This is very con-
venient for recovering files that were accidentally deleted, or traveling back in time
to see the state of a file at periodic snapshots made in the past.
      But shadow copies are also valuable for making accurate backups of server
systems.  The operating system works with server applications to have them reach



SEC. 11.7           