INTRODUCTION TO DEADLOCKS
typedef int semaphore;
semaphore resource           1;        semaphore resource         1;
semaphore resource           2;        semaphore resource         2;
void process      A(void) {            void process    A(void) {
          down(&resource     1);                 down(&resource     1);
          down(&resource     2);                 down(&resource     2);
          use  both     resources( );            use  both  resources( );
          up(&resource  2);                      up(&resource  2);
          up(&resource  1);                      up(&resource  1);
}                                      }
void process      B(void) {            void process    B(void) {
          down(&resource     1);                 down(&resource     2);
          down(&resource     2);                 down(&resource     1);
          use  both     resources( );            use  both  resources( );
          up(&resource  2);                      up(&resource  1);
          up(&resource  1);                      up(&resource  2);
}                                      }
          (a)                                          (b)
          Figure 6-2. (a) Deadlock-free code. (b) Code with a potential deadlock.
6.2 