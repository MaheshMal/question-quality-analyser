READING LIST AND BIBLIOGRAPHY


                                  13
READING LIST AND BIBLIOGRAPHY
In the previous 12 chapters we have touched upon a variety of topics. This
chapter is intended to aid  readers interested in pursuing their study of operating
systems further. Section 13.1 is a list of suggested readings.      Section 13.2 is an
alphabetical bibliography of all books and articles cited in this book.
In addition to the references given below, the ACM Symposium on Operating
Systems Principles (SOSP) held in odd-numbered years and the USENIX Sympo-
sium on Operating Systems Design and Implementation (OSDI) held in even num-
bered years are good sources for ongoing work on operating systems. The Eurosys
Conference, held annually is also a source of top-flight papers.         Furthermore, the
journals ACM Transactions on Computer Systems and ACM SIGOPS Operating
Systems  Review,  often     have  relevant  articles.  Many  other  ACM,  IEEE,       and
USENIX conferences deal with specialized topics.
13.1 SUGGESTIONS FOR FURTHER READING
In this section, we give some suggestions for further reading. Unlike the papers
cited in the sections entitled ``RESEARCH ON ...'' in the text, which are about cur-
rent research, these references are mostly introductory or tutorial in nature. They
can, however, serve to present material in this book from a different perspective or
with a different emphasis.
                                            1031



1032                   READING LIST AND BIBLIOGRAPHY                      CHAP. 13
13.1.1  Introduction
Silberschatz et al., Operating System Concepts, 9th ed.,
     A general textbook on operating systems.      It covers processes, memory man-
agement, storage management, protection and security, distributed systems, and
some special-purpose systems. Two case studies are given: Linux and Windows 7.
The cover is full of dinosaurs.  These are legacy animals, to empahsize that operat-
ing systems also carry a lot of legacy.
Stallings, Operating Systems, 7th ed.,
     Still another textbook on operating systems.  It covers all the traditional topics,
and also includes a small amount of material on distributed systems.
Stevens and Rago, Advanced Programming in the UNIX Environment
     This book tells how to write C programs that use the UNIX system call inter-
face and the standard C library. Examples are based on the System V Release 4 and
the  4.4BSD  versions  of  UNIX.  The    relationship     of  these  implementations      to
POSIX is described in detail.
Tanenbaum and Woodhull, Operating Systems Design and Implementation
     A hands-on way to learn about operating systems.         This book discusses the
usual principles, but in addition discusses an actual operating system, MINIX 3, in
great detail, and contains a listing of that system as an appendix.
13.1.2 Processes and Threads
Arpaci-Dusseau and Arpaci-Dusseau, Operating Systems: Three Easy Pieces
     The entire first part of this book is dedicated to virtualization of the CPU to
share it with multiple processes. What is nice about this book (besides the fact that
there is a free online version), is that it introduces not only the concepts of process-
ing and scheduling techniques, but also the APIs and systems calls like fork and
exec in some detail.
Andrews and Schneider, ``Concepts and Notations for Concurrent Programming''
     A tutorial and survey of processes and interprocess communication, including
busy waiting, semaphores, monitors, message passing, and other techniques.                The
article also shows how these concepts are embedded in various programming lan-
guages. The article is old, but it has stood the test of time very well.
Ben-Ari, Principles of Concurrent Programming
     This little book is entirely devoted to the problems of interprocess communica-
tion. There are chapters on mutual exclusion, semaphores, monitors, and the dining
philosophers problem, among others. It, too, has stood up very well over the years.



SEC. 13.1               SUGGESTIONS FOR FURTHER READING                             1033
Zhuravlev  et  al.,  ``Survey   of  Scheduling   Techniques     for  Addressing     Shared
Resources in Multicore Processors''
Multicore systems have started to dominate the field of general-purpose com-
puting world. One of the most important challenges is shared resource contention.
In this survey, the authors present different scheduling techniques for handling
such contention.
Silberschatz et al., Operating System Concepts, 9th ed.,
Chapters 3 through 6 cover processes and interprocess communication, includ-
ing scheduling, critical sections, semaphores, monitors, and classical interprocess
communication problems.
Stratton et al., ``Algorithm and Data Optimization Techniques for Scaling to Mas-
sively Threaded Systems''
Programming a system with half a dozen threads is hard enough.                But what
happens when you have thousands of them? To say it gets tricky is to put it mildly.
This article talks about approaches that are being taken.
13.1.3 Memory Management
Denning, ``Virtual Memory''
A classic paper on many aspects of virtual memory. Peter Denning was one of
the pioneers in this field, and was the inventor of the working-set concept.
Denning, ``Working Sets Past and Present''
A good overview of numerous memory management and paging algorithms.
A comprehensive bibliography is included. Although many of the papers are old,
the principles really have not changed at all.
Knuth, The Art of Computer Programming, Vol. 1
First fit, best fit, and other memory management algorithms are discussed and
compared in this book.
Arpaci-Dusseau and Arpaci-Dusseaum ``Operating Systems: Three Easy Pieces''
This book has a rich section on virtual memory in Chapters 12 to 23 and
includes a nice overview of page replacement policies.
13.1.4 File Systems
McKusick et al., ``A Fast File System for UNIX''
The  UNIX         file  system  was  completely   redone   for  4.2  BSD.     This  paper
describes the design of the new file system, with emphasis on its performance.



1034                   READING LIST AND BIBLIOGRAPHY                   CHAP. 13
Silberschatz et al., Operating System Concepts, 9th ed.,
Chapters 10Â­12 are about storage hardware and file systems.      They cover file
operations, interfaces, access methods, directories, and implementation, among
other topics.
Stallings, Operating Systems, 7th ed.,
Chapter 12 contains a fair amount of material about file systems and little bit
about their security.
Cornwell, ``Anatomy of a Solid-state Drive``
If you are interested in solid state drives, Michael Cornwell's introduction is a
good starting point. In particular, the author succinctly describes the way in way
traditional hard drives and SSDs differ.
13.1.5 Input/Output
Geist and Daniel, ``A Continuum of Disk Scheduling Algorithms''
A generalized disk-arm scheduling algorithm is presented. Extensive simula-
tion and experimental results are given.
Scheible, ``A Survey of Storage Options''
There are many ways to store bits these days: DRAM, SRAM, SDRAM, flash
memory, hard disk, floppy disk, CD-ROM, DVD, and tape, to name a few.  In this
article, the various technologies are surveyed and their strengths and weaknesses
highlighted.
Stan and Skadron, ``Power-Aware Computing''
Until someone manages to get Moore's Law to apply to batteries, energy usage
is going to continue to be a major issue in mobile devices.  Power and heat are so
critical these days that operating systems are aware of the CPU temperature and
adapt their behavior to it.  This article surveys some of the issues and serves as an
introduction to five other articles in this special issue of Computer on power-aware
computing.
Swanson and Caulfield, ``Refactor, Reduce, Recycle: Restructuring the I/O Stack
for the Future of Storage''
Disks exist for two reasons: when power is turned off, RAM loses its contents.
Also, disks are very big.    But suppose RAM did not lose its contents when pow-
ered off? How would that change the I/O stack?  Nonvolatile memory is here and
this article looks at how it changes systems.
Ion, ``From Touch Displays to the Surface: A Brief History of Touchscreen Tech-
nology,''



SEC. 13.1            SUGGESTIONS FOR FURTHER READING                  1035
Touch screens have become ubiquitous in a short time span. This article traces
the history of the touch screen through history with easy-to-understand explana-
tions and nice vintage pictures and videos. Fascinating stuff!
Walker and Cragon, ``Interrupt Processing in Concurrent Processors''
Implementing precise interrupts on superscalar computers is a challenging
activity. The trick is to serialize the state and do it quickly. A number of the design
issues and trade-offs are discussed here.
13.1.6 Deadlocks
Coffman et al., ``System Deadlocks''
A short introduction to deadlocks, what causes them, and how they can be pre-
vented or detected.
Holt, ``Some Deadlock Properties of Computer Systems''
A discussion of deadlocks. Holt introduces a directed graph model that can be
used to analyze some deadlock situations.
Isloor and Marsland, ``The Deadlock Problem: An Overview''
A tutorial on deadlocks, with special emphasis on database systems.   A variety
of models and algorithms are covered.
Levine, ``Defining Deadlock''
In Chap. 6 of this book, we focused on resource deadlocks and barely touched
on other kinds.  This short paper points out that in the literature, various definitions
have been used, differing in subtle ways. The author then looks at communication,
scheduling, and interleaved deadlocks and comes up with a new model that tries to
cover all of them.
Shub, ``A Unified Treatment of Deadlock''
This short tutorial summarizes the causes and solutions to deadlocks and sug-
gests what to emphasize when teaching it to students.
13.1.7 Virtualization and the Cloud
Portnoy, ``Virtualization Essentials''
A gentle introduction to virtualization. It covers the context (including the rela-
tion between virtualization and the cloud), and covers a variety of solutions (with a
bit more emphasis on VMware).
Erl et al., Cloud Computing: Concepts, Technology & Architecture
A book devoted to cloud computing in a broad sense. The authors explain in



1036                  READING LIST AND BIBLIOGRAPHY                     CHAP. 13
detail what is hidden behind acronyms like IAAS, PAAS, SAAS, and similar ``X''
As A Service family members.
Rosenblum and Garfinkel, ``Virtual Machine Monitors: Current Technology and
Future Trends''
Starting with a history of virtual machine monitors, this article then goes on to
discuss the current state of CPU, memory, and I/O virtualization. In particular, it
covers problem areas relating to all three and how future hardware may alleviate
the problems.
Whitaker et al., ``Rethinking the Design of Virtual Machine Monitors''
Most computers have some bizarre and difficult to virtualize aspects.            In this
paper, the authors of the Denali system argue for paravirtualization, that is, chang-
ing the guest operating systems to avoid using the bizarre features so that they need
not be emulated.
13.1.8 Multiple Processor Systems
Ahmad, ``Gigantic Clusters: Where Are They and What Are They Doing?''
To get an idea of the state-of-the-art in large multicomputers, this is a good
place to look.   It describes the idea and gives an overview of some of the larger
systems currently in operation. Given the working of Moore's law, it is a reason-
able bet that the sizes mentioned here will double about every two years or so.
Dubois et al., ``Synchronization, Coherence, and Event Ordering in Multiproces-
sors''
A tutorial on synchronization in shared-memory multiprocessor systems. How-
ever, some of the ideas are equally applicable to single-processor and distributed
memory systems as well.
Geer, ``For Programmers, Multicore Chips Mean Multiple Challenges''
Multicore chips are happening--whether the software folks are ready or not.
As it turns out, they are not ready, and programming these chips offers many chal-
lenges, from getting the right tools, to dividing up the work into little pieces, to
testing the results.
Kant and Mohapatra, ``Internet Data Centers''
Internet data centers are massive multicomputers on steroids.           They often con-
tain tens or hundreds of thousands of computers working on a single application.
Scalability, maintenance, and energy use are major issues here.  This article forms
an introduction to the subject and introduces four additional articles on the subject.



SEC. 13.1              SUGGESTIONS FOR FURTHER READING                         1037
Kumar et al., ``Heterogeneous Chip Multiprocessors''
     The multicore chips used for desktop computers are symmetric--all the cores
are  identical.  However,        for  some  applications,  heterogeneous       CMPs      are
widespread, with cores for computing, video decoding, audio decoding, and so on.
This paper discusses some issues related to heterogeneous CMPs.
Kwok and Ahmad, ``Static Scheduling Algorithms for Allocating Directed Task
Graphs to Multiprocessors''
     Optimal job scheduling of a multicomputer or multiprocessor is possible when
the characteristics of all the jobs are known in advance. The problem is that opti-
mal scheduling takes too long to compute.         In this paper, the authors discuss and
compare 27 known algorithms for attacking this problem in different ways.
Zhuravlev  et    al.,  ``Survey  of   Scheduling  Techniques  for  Addressing  Shared
Resources in Multicore Processors''
     As mentioned earlier, one of the most important challenges in multiprocessor
systems is shared resource contention. This survey presents different scheduling
techniques for handling such contention.
13.1.9 Security
Anderson, Security Engineering, 2nd Edition
     A wonderful book that explains very clearly how to build dependable and
secure systems by one of the best-known researchers in the field. Not only is this a
fascinating look at many aspects of security (including techniques, applications,
and organizational issues), it is also freely available online. No excuse for not read-
ing it.
Van der Veen et al., ``Memory Errors: the Past, the Present, and the Future''
     A historical view on memory errors (including buffer overflows, format string
attacks, dangling pointers, and many others) that includes attacks and defenses,
attacks that evade those defenses, new defenses that stop the attacks that evaded the
earlier defenses, and ..., well, anyway, you get the idea. The authors show that
despite their old age and the rise of other types of attack, memory errors remain an
extremely important attack vector. Moreover, they argue that this situation is not
likely to change any time soon.
Bratus, ``What Hackers Learn That the Rest of Us Don't''
     What makes hackers different?    What do they care about that regular program-
mers do not?     Do they have different attitudes toward APIs?     Are corner cases
important? Curious? Read it.



1038                   READING LIST AND BIBLIOGRAPHY                     CHAP. 13
Bratus et al., ``From Buffer Overflows to Weird Machines and Theory of Computa-
tion''
Connecting the humble buffer overflow to Alan Turing. The authors show that
hackers program vulnerable programs like weird machines with strange-looking
instruction sets. In doing so, they come full circle to Turing's seminal research on
``What is computable?''
Denning, Information Warfare and Security
Information has become a weapon of war, both military and corporate. The
participants try not only to attack the other side's information systems, but to safe-
guard their own, too.  In this fascinating book, the author covers every conceivable
topic relating to offensive and defensive strategy, from data diddling to packet snif-
fers. A must read for anyone seriously interested in computer security.
Ford and Allen, ``How Not to Be Seen''
Viruses, spyware, rootkits, and digital rights management systems all have a
great interest in hiding things. This article provides a brief introduction to stealth in
its various forms.
Hafner and Markoff, Cyberpunk
Three compelling tales of young hackers breaking into computers around the
world are told here by the New York Times computer reporter who broke the Inter-
net worm story (Markoff).
Johnson and Jajodia, ``Exploring Steganography: Seeing the Unseen''
Steganography has a long history, going back to the days when the writer
would shave the head of a messenger, tattoo a message on the shaved head, and
send him off after the hair grew back. Although current techniques are often hairy,
they are also digital and have lower latency.  For a thorough introduction to the
subject as currently practiced, this paper is the place to start.
Ludwig, ``The Little Black Book of Email Viruses''
If you want to write antivirus software and need to understand how viruses
work down to the bit level, this is the book for you. Every kind of virus is dis-
cussed at length and actual code for many of them is supplied as well. A thorough
knowledge of programming the x86 in assembly language is a must, however.
Mead, ``Who is Liable for Insecure Systems?''
Although most work on computer security approaches it from a technical per-
spective, that is not the only one.  Suppose software vendors were legally liable for
the damages caused by their faulty software. Chances are security would get a lot
more attention from vendors than it does now? Intrigued by this idea? Read this
article.



SEC. 13.1  SUGGESTIONS FOR FURTHER READING                              1039
Milojicic, ``Security and Privacy''
Security has many facets, including operating systems, networks, implications
for privacy, and more.    In this article, six security experts are interviewed on their
thoughts on the subject.
Nachenberg, ``Computer Virus-Antivirus Coevolution''
As soon as the antivirus developers find a way to detect and neutralize some
class of computer virus, the virus writers go them one better and improve the virus.
The cat-and-mouse game played by the virus and antivirus sides is discussed here.
The author is not optimistic about the antivirus writers winning the war, which is
bad news for computer users.
Sasse, ``Red-Eye Blink, Bendy Shuffle, and the Yuck Factor: A User Experience of
Biometric Airport Systems''
The author discusses his experiences with the iris recognition system used at a
number of large airports. Not all of them are positive.
Thibadeau, ``Trusted Computing for Disk Drives and Other Peripherals''
If you thought a disk drive was just a place where bits are stored, think again.
A modern disk drive has a powerful CPU, megabytes of RAM, multiple communi-
cation channels, and even its own boot ROM.       In short, it is a complete computer
system ripe for attack and in need of its own protection system. This paper dis-
cusses securing the disk drive.
13.1.10 Case Study 1: UNIX, Linux, and Android
Bovet and Cesati, Understanding the Linux Kernel
This book is probably the best overall discussion of the Linux kernel.  It covers
processes, memory management, file systems, signals, and much more.
IEEE, ``Information Technology--Portable Operating System Interface (POSIX),
Part 1: System Application Program Interface (API) [C Language]''
This is the standard. Some parts are actually quite readable, especially Annex
B, ``Rationale and Notes,'' which often sheds light on why things are done as they
are. One advantage of referring to the standards document is that, by definition,
there are no errors. If a typographical error in a macro name makes it through the
editing process it is no longer an error, it is official.
Fusco, The Linux Programmer's Toolbox
This book describes how to use Linux for the intermediate user, one who
knows the basics and wants to start exploring how the many Linux programs work.
It is intended for C programmers.



1040                  READING LIST AND BIBLIOGRAPHY                    CHAP. 13
Maxwell, Linux Core Kernel Commentary
The first 400 pages of this book contain a subset of the Linux kernel code. The
last 150 pages consist of comments on the code, very much in the style of John
Lions' classic book.  If you want to understand the Linux kernel in all its gory
detail, this is the place to begin, but be warned: reading 40,000 lines of C is not for
everyone.
13.1.11 Case Study 2: Windows 8
Cusumano and Selby, ``How Microsoft Builds Software''
Have you ever wondered how anyone could write a 29-million-line program
(like Windows 2000) and have it work at all?  To find out how Microsoft's build-
and-test cycle is used to manage very large software projects, take a look at this
paper. The procedure is quite instructive.
Rector and Newcomer, Win32 Programming
If you are looking for one of those 1500-page books giving a summary of how
to write Windows programs, this is not a bad start.       It covers windows, devices,
graphical  output,    keyboard  and  mouse  input,  printing,  memory  management,
libraries, and synchronization, among many other topics. It requires knowledge of
C or C++.
Russinovich and Solomon, Windows Internals, Part 1
If you want to learn how to use Windows, there are hundreds of books out
there.  If you want to know how Windows works inside, this is your best bet.             It
covers numerous internal algorithms and data structures, and in considerable tech-
nical detail. No other book comes close.
13.1.12 Operating System Design
Saltzer and Kaashoek, Principles of Computer System Design: An Introduction
This books looks at computer systems in general, rather than operating systems
per se, but the principles they identify apply very much to operating systems also.
What is interesting about this work is that it carefully identifies ``the ideas that
worked,'' such as names, file systems, read-write coherence, authenticated and
confidential messages, etc. Principles that, in our opinion, all computer scientists in
the world should recite every day, before going to work.
Brooks, The Mythical Man Month: Essays on Software Engineering
Fred Brooks was one of the designers of IBM's OS/360.          He learned the hard
way what works and what does not work. The advice given in this witty, amusing,
and informative book is as valid now as it was a quarter of a century ago when he
first wrote it down.



SEC. 13.1             SUGGESTIONS FOR FURTHER READING                       1041
Cooke et al., ``UNIX and Beyond: An Interview with Ken Thompson''
Designing an operating system is much more of an art than a science. Conse-
quently, listening to experts in the field is a good way to learn about the subject.
They do not come much more expert than Ken Thompson, co-designer of UNIX,
Inferno, and Plan 9.  In this wide-ranging interview, Thompson gives his thoughts
on where we came from and where we are going in the field.
CorbatoÂ´, ``On Building Systems That Will Fail''
In his Turing Award lecture, the father of timesharing addresses many of the
same concerns that Brooks does in The Mythical Man-Month.    His conclusion is
that all complex systems will ultimately fail, and that to have any chance for suc-
cess at all, it is absolutely essential to avoid complexity and strive for simplicity
and elegance in design.
Crowley, Operating Systems: A Design-Oriented Approach
Most textbooks on operating systems just describe the basic concepts (pro-
cesses, virtual memory, etc.) and give a few examples, but say nothing about how
to design an operating system. This one is unique in devoting four chapters to the
subject.
Lampson, ``Hints for Computer System Design''
Butler Lampson, one of the world's leading designers of innovative operating
systems, has collected many hints, suggestions, and guidelines from his years of
experience and put them together in this entertaining and informative article. Like
Brooks' book, this is required reading for every aspiring operating system designer.
Wirth, ``A Plea for Lean Software''
Niklaus Wirth, a famous and experienced system designer, makes the case here
for lean and mean software based on a few simple concepts, instead of the bloated
mess that much commercial software is.    He makes his point by discussing his
Oberon system, a network-oriented, GUI-based operating system that fits in 200
KB, including the Oberon compiler and text editor.
13.2 ALPHABETICAL BIBLIOGRAPHY
ABDEL-HAMID,  T.,     and  MADNICK,  S.:  Software  Project  Dynamics:  An  Integrated
Approach, Upper Saddle River, NJ: Prentice Hall, 1991.
ACCETTA, M., BARON, R., GOLUB, D., RASHID, R., TEVANIAN, A., and YOUNG, M.:
``Mach: A New Kernel Foundation for UNIX Development,'' Proc. USENIX Summer
Conf., USENIX, pp. 93Â­112, 1986.



1042   READING LIST AND BIBLIOGRAPHY                                 CHAP. 13
ADAMS, G.B. III, AGRAWAL, D.P., and SIEGEL, H.J.: ``A Survey and Comparison of Fault-
Tolerant Multistage Interconnection Networks,'' Computer, vol. 20, pp. 14Â­27, June
1987.
ADAMS, K., and AGESEN, O.: ``A Comparison of Software and Hardware Technqiues for
X86 Virtualization,'' Proc. 12th Int'l Conf. on Arch. Support for Prog. Lang. and Oper-
ating Systems, ACM, pp. 2Â­13, 2006.
AGESEN, O., MATTSON, J., RUGINA, R., and SHELDON, J.: ``Software Techniques for
Avoiding Hardware Virtualization Exits,'' Proc. USENIX Ann. Tech. Conf., USENIX,
2012.
AHMAD, I.: ``Gigantic Clusters: Where Are They and What Are They Doing?'' IEEE Con-
currency, vol. 8, pp. 83Â­85, April-June 2000.
AHN, B.-S., SOHN, S.-H., KIM, S.-Y., CHA, G.-I., BAEK, Y.-C., JUNG, S.-I., and KIM, M.-J.:
``Implementation and Evaluation of EXT3NS Multimedia File System,'' Proc. 12th
Ann. Int'l Conf. on Multimedia, ACM, pp. 588Â­595, 2004.
ALBATH, J., THAKUR, M., and MADRIA, S.: ``Energy Constraint Clustering Algorithms
for Wireless Sensor Networks,'' J. Ad Hoc Networks, vol. 11, pp. 2512Â­2525, Nov.
2013.
AMSDEN, Z., ARAI, D., HECHT, D., HOLLER, A., and SUBRAHMANYAM, P.: ``VMI: An
Interface for Paravirtualization,'' Proc. 2006 Linux Symp., 2006.
ANDERSON, D.: SATA Storage Technology: Serial ATA, Mindshare, 2007.
ANDERSON, R.: Security Engineering, 2nd ed., Hoboken, NJ: John Wiley & Sons, 2008.
ANDERSON, T.E.: ``The Performance of Spin Lock Alternatives for Shared-Memory Multi-
processors,'' IEEE Trans. on Parallel and Distr. Systems, vol. 1, pp. 6Â­16, Jan. 1990.
ANDERSON, T.E., BERSHAD, B.N., LAZOWSKA, E.D., and LEVY, H.M.: ``Scheduler Acti-
vations: Effective Kernel Support for the User-Level Management of Parallelism,''
ACM Trans. on Computer Systems, vol. 10, pp. 53Â­79, Feb. 1992.
ANDREWS, G.R.: Concurrent Programming--Principles and Practice, Redwood City, CA:
Benjamin/Cummings, 1991.
ANDREWS, G.R., and SCHNEIDER, F.B.: ``Concepts and Notations for Concurrent Pro-
gramming,'' Computing Surveys, vol. 15, pp. 3Â­43, March 1983.
APPUSWAMY, R., VAN MOOLENBROEK, D.C., and TANENBAUM, A.S.: ``Flexible, Modu-
lar File Volume Virtualization in Loris,'' Proc. 27th Symp. on Mass Storage Systems
and Tech., IEEE, pp. 1Â­14, 2011.
ARNAB, A., and HUTCHISON, A.: ``Piracy and Content Protection in the Broadband Age,''
Proc. S. African Telecomm. Netw. and Appl. Conf, 2006.
ARON, M., and DRUSCHEL, P.: ``Soft Timers: Efficient Microsecond Software Timer Sup-
port for Network Processing,'' Proc. 17th Symp. on Operating Systems Principles,
ACM, pp. 223Â­246, 1999.
ARPACI-DUSSEAU, R. and ARPACI-DUSSEAU, A.: Operating Systems: Three Easy Pieces,
Madison, WI: Arpacci-Dusseau, 2013.



SEC. 13.2                   ALPHABETICAL BIBLIOGRAPHY                                   1043
BAKER, F.T.: ``Chief Programmer Team Management of Production Programming,'' IBM
Systems J., vol. 11, pp. 1, 1972.
BAKER,    M.,   SHAH,  M.,  ROSENTHAL,       D.S.H.,  ROUSSOPOULOS,      M.,     MANIATIS,   P.,
GIULI, T.J., and BUNGALE, P.: ``A Fresh Look at the Reliability of Long-Term Digital
Storage,'' Proc. First European Conf. on Computer Systems (EUROSYS), ACM, pp.
221Â­234, 2006.
BALA, K., KAASHOEK, M.F., and WEIHL, W.: ``Software Prefetching and Caching for
Translation Lookaside Buffers,'' Proc. First Symp. on Operating Systems Design and
Implementation, USENIX, pp. 243Â­254, 1994.
BARHAM,    P.,  DRAGOVIC,     B.,  FRASER,   K.,  HAND,    S.,  HARRIS,  T.,  HO,  A.,  NEUGE-
BAUER, R., PRATT, I., and WARFIELD, A.: ``Xen and the Art of Virtualization,'' Proc.
19th Symp. on Operating Systems Principles, ACM, pp. 164Â­177, 2003.
BARNI, M.: ``Processing Encrypted Signals: A New Frontier for Multimedia Security,''
Proc. Eighth Workshop on Multimedia and Security, ACM, pp. 1Â­10, 2006.
BARR, K., BUNGALE, P., DEASY, S., GYURIS, V., HUNG, P., NEWELL, C., TUCH, H., and
ZOPPIS, B.: ``The VMware Mobile Virtualization Platform: Is That a Hypervisor in
Your Pocket?'' ACM SIGOPS Operating Systems Rev., vol. 44, pp. 124Â­135, Dec.
2010.
BARWINSKI, M., IRVINE, C., and LEVIN, T.: ``Empirical Study of Drive-By-Download
Spyware,'' Proc. Int'l Conf. on I-Warfare and Security, Academic Confs. Int'l, 2006.
BASILLI, V.R., and PERRICONE, B.T.: ``Software Errors and Complexity: An Empirical
Study,'' Commun. of the ACM, vol. 27, pp. 42Â­52, Jan. 1984.
BAUMANN, A., BARHAM, P., DAGAND, P., HARRIS, T., ISAACS, R., PETER, S., ROSCOE,
T., SCHUPBACH, A., and SINGHANIA, A.: ``The Multikernel: A New OS Architecture
for Scalable Multicore Systems,'' Proc. 22nd Symp. on Operating Systems Principles,
ACM, pp. 29Â­44, 2009.
BAYS, C.: ``A Comparison of Next-Fit, First-Fit, and Best-Fit,'' Commun. of the ACM, vol.
20, pp. 191Â­192, March 1977.
BEHAM, M., VLAD, M., and REISER, H.: ``Intrusion Detection and Honeypots in Nested
Virtualization Environments,'' Proc. 43rd Conf. on Dependable Systems and Networks,
IEEE, pp. 1Â­6, 2013.
BELAY,    A.,   BITTAU,  A.,    MASHTIZADEH,          A.,  TEREI,  D.,   MAZIERES,      D.,  and
KOZYRAKIS, C.: ``Dune: Safe User-level Access to Privileged CPU Features,'' Proc.
Ninth      Symp.  on     Operating  Systems  Design        and  Implementation,  USENIX,     pp.
335Â­348, 2010.
BELL, D., and LA PADULA, L.: ``Secure Computer Systems: Mathematical Foundations
and Model,'' Technical Report MTR 2547 v2, Mitre Corp., Nov. 1973.
BEN-ARI,   M.:  Principles  of  Concurrent   and  Distributed   Programming,     Upper  Saddle
River, NJ: Prentice Hall, 2006.
BEN-YEHUDA, M., D. DAY, M., DUBITZKY, Z., FACTOR, M., HAR'EL, N., GORDON, A.,
LIGUORI, A., WASSERMAN, O., and YASSOUR, B.: ``The Turtles Project: Design and
Implementation of Nested Virtualization,'' Proc. Ninth Symp. on Operating Systems
Design and Implementation, USENIX, Art. 1Â­6, 2010.



1044                     READING LIST AND BIBLIOGRAPHY                                     CHAP. 13
BHEDA, R.A., BEU, J.G., RAILING, B.P., and CONTE, T.M.: ``Extrapolation Pitfalls When
Evaluating Limited Endurance Memory,'' Proc. 20th Int'l Symp. on Modeling, Analy-
sis, & Simulation of Computer and Telecomm. Systems, IEEE, pp. 261Â­268, 2012.
BHEDA,  R.A.,  POOVEY,     J.A.,  BEU,     J.G.,  and   CONTE,     T.M.:  ``Energy  Efficient  Phase
Change Memory Based Main Memory for Future High Performance Systems,'' Proc.
Int'l Green Computing Conf., IEEE, pp. 1Â­8, 2011.
BHOEDJANG, R.A.F., RUHL, T., and BAL, H.E.: ``User-Level Network Interface Proto-
cols,'' Computer, vol. 31, pp. 53Â­60, Nov. 1998.
BIBA, K.: ``Integrity Considerations for Secure Computer Systems,'' Technical Report
76Â­371, U.S. Air Force Electronic Systems Division, 1977.
BIRRELL, A.D., and NELSON, B.J.: ``Implementing Remote Procedure Calls,'' ACM Trans.
on Computer Systems, vol. 2, pp. 39Â­59, Feb. 1984.
BISHOP, M., and FRINCKE, D.A.: ``Who Owns Your Computer?'' IEEE Security and Pri-
vacy, vol. 4, pp. 61Â­63, 2006.
BLACKHAM, B, SHI, Y. and HEISER, G.: ``Improving Interrupt Response Time in a Verifi-
able Protected Microkernel,'' Proc. Seventh European Conf. on Computer Systems
(EUROSYS), April, 2012.
BOEHM, B.: Software Engineering Economics, Upper Saddle River, NJ: Prentice Hall,
1981.
BOGDANOV, A., AND LEE, C.H.: ``Limits of Provable Security for Homomorphic Encryp-
tion,'' Proc. 33rd Int'l Cryptology Conf., Springer, 2013.
BORN, G: Inside the Windows 98 Registry, Redmond, WA: Microsoft Press, 1998.
BOTELHO, F.C., SHILANE, P., GARG, N., and HSU, W.: ``Memory Efficient Sanitization of
a Deduplicated Storage System,'' Proc. 11th USENIX Conf. on File and Storage Tech.,
USENIX, pp. 81Â­94, 2013.
BOTERO, J. F., and HESSELBACH, X.: ``Greener Networking in a Network Virtualization
Environment,'' Computer Networks, vol. 57, pp. 2021Â­2039, June 2013.
BOULGOURIS, N.V., PLATANIOTIS, K.N., and MICHELI-TZANAKOU, E.: Biometics: The-
ory Methods, and Applications, Hoboken, NJ: John Wiley & Sons, 2010.
BOVET, D.P., and CESATI, M.: Understanding the Linux Kernel, Sebastopol, CA: O'Reilly
& Associates, 2005.
BOYD-WICKIZER,      S.,  CHEN,    H.,  CHEN,      R.,   MAO,  Y.,  KAASHOEK,        F.,  MORRIS,  R.,
PESTEREV, A., STEIN, L., WU, M., DAI, Y., ZHANG, Y., and ZHANG, Z.: ``Corey: an
Operating System for Many Cores,'' Proc. Eighth Symp. on Operating Systems Design
and Implementation, USENIX, pp. 43Â­57, 2008.
BOYD-WICKIZER,      S.,  CLEMENTS          A.T.,  MAO,  Y.,   PESTEREV,    A.,  KAASHOEK,      F.M.,
MORRIS,        R.,  and  ZELDOVICH,        N.:    ``An  Analysis   of  Linux  Scalability  to  Many
Cores,''  Proc.     Ninth  Symp.       on  Operating    Systems    Design     and   Implementation,
USENIX, 2010.
BRATUS, S.: ``What Hackers Learn That the Rest of Us Don't: Notes on Hacker Curricu-
lum,'' IEEE Security and Privacy, vol. 5, pp. 72Â­75, July/Aug. 2007.



SEC. 13.2                    ALPHABETICAL BIBLIOGRAPHY                                 1045
BRATUS, S., LOCASTO, M.E., PATTERSON, M., SASSAMAN, L., SHUBINA, A.: ``From
Buffer Overflows to Weird Machines and Theory of Computation,'' ;Login:, USENIX,
pp. 11Â­21, December 2011.
BRINCH HANSEN, P.: ``The Programming Language Concurrent Pascal,'' IEEE Trans. on
Software Engineering, vol. SE-1, pp. 199Â­207, June 1975.
BROOKS, F.P., Jr.: ``No Silver Bullet--Essence and Accident in Software Engineering,''
Computer, vol. 20, pp. 10Â­19, April 1987.
BROOKS,    F.P.,  Jr.:  The  Mythical  Man-Month:  Essays  on  Software  Engineering,   20th
Anniversary Edition, Boston: Addison-Wesley, 1995.
BRUSCHI, D., MARTIGNONI, L., and MONGA, M.: ``Code Normalization for Self-Mutat-
ing Malware,'' IEEE Security and Privacy, vol. 5, pp. 46Â­54, March/April 2007.
BUGNION, E., DEVINE, S., GOVIL, K., and ROSENBLUM, M.: ``Disco: Running Commod-
ity Operating Systems on Scalable Multiprocessors,'' ACM Trans. on Computer Sys-
tems, vol. 15, pp. 412Â­447, Nov. 1997.
BUGNION, E., DEVINE, S., ROSENBLUM, M., SUGERMAN, J., and WANG, E.: ``Bringing
Virtualization to the x86 Architecture with the Original VMware Workstation,'' ACM
Trans. on Computer Systems, vol. 30, number 4, pp.12:1Â­12:51, Nov. 2012.
BULPIN, J.R., and PRATT, I.A.: ``Hyperthreading-Aware Process Scheduling Heuristics,''
Proc. USENIX Ann. Tech. Conf., USENIX, pp. 399Â­403, 2005.
CAI, J., and STRAZDINS, P.E.: ``An Accurate Prefetch Technique for Dynamic Paging
Behaviour for Software Distributed Shared Memory,'' Proc. 41st Int'l Conf. on Paral-
lel Processing, IEEE., pp. 209Â­218, 2012.
CAI, Y., and CHAN, W.K.: ``MagicFuzzer: Scalable Deadlock Detection for Large-scale
Applications,'' Proc. 2012 Int'l Conf. on Software Engineering, IEEE, pp. 606Â­616,
2012.
CAMPISI, P.: Security and Privacy in Biometrics, New York: Springer, 2013.
CARPENTER, M., LISTON, T., and SKOUDIS, E.: ``Hiding Virtualization from Attackers
and Malware,'' IEEE Security and Privacy, vol. 5, pp. 62Â­65, May/June 2007.
CARR, R.W., and HENNESSY, J.L.: ``WSClock--A Simple and Effective Algorithm for
Virtual Memory Management,'' Proc. Eighth Symp. on Operating Systems Principles,
ACM, pp. 87Â­95, 1981.
CARRIERO, N., and GELERNTER, D.: ``The S/Net's Linda Kernel,'' ACM Trans. on Com-
puter Systems, vol. 4, pp. 110Â­129, May 1986.
CARRIERO, N., and GELERNTER, D.: ``Linda in Context,'' Commun. of the ACM, vol. 32,
pp. 444Â­458, April 1989.
CERF, C., and NAVASKY, V.: The Experts Speak, New York: Random House, 1984.
CHEN, M.-S., YANG, B.-Y., and CHENG, C.-M.: ``RAIDq: A Software-Friendly, Multiple-
Parity RAID,'' Proc. Fifth Workshop on Hot Topics in File and Storage Systems,
USENIX, 2013.



1046                  READING LIST AND BIBLIOGRAPHY                         CHAP. 13
CHEN, Z., XIAO, N., and LIU, F.: ``SAC: Rethinking the Cache Replacement Policy for
SSD-Based Storage Systems,'' Proc. Fifth Int'l Systems and Storage Conf., ACM, Art.
13, 2012.
CHERVENAK, A., VELLANKI, V., and KURMAS, Z.: ``Protecting File Systems: A Survey
of Backup Techniques,'' Proc. 15th IEEE Symp. on Mass Storage Systems, IEEE,
1998.
CHIDAMBARAM,     V.,  PILLAI,  T.S.,  ARPACI-DUSSEAU,     A.C.,  and   ARPACI-DUSSEAU,
R.H.: ``Optimistic Crash Consistency,'' Proc. 24th Symp. on Operating System Princi-
ples, ACM, pp. 228Â­243, 2013.
CHOI, S., and JUNG, S.: ``A Locality-Aware Home Migration for Software Distributed
Shared Memory,'' Proc. 2013 Conf. on Research in Adaptive and Convergent Systems,
ACM, pp. 79Â­81, 2013.
CHOW, T.C.K., and ABRAHAM, J.A.: ``Load Balancing in Distributed       Systems,''    IEEE
Trans. on Software Engineering, vol. SE-8, pp. 401Â­412, July 1982.
CLEMENTS, A.T, KAASHOEK, M.F., ZELDOVICH, N., MORRIS, R.T., and KOHLER, E.:
``The Scalable Commutativity Rule: Designing Scalable Software for Multicore Pro-
cessors,'' Proc. 24th Symp. on Operating Systems Principles, ACM, pp. 1Â­17, 2013.
COFFMAN, E.G., ELPHICK, M.J., and SHOSHANI, A.: ``System Deadlocks,'' Computing
Surveys, vol. 3, pp. 67Â­78, June 1971.
COLP, P., NANAVATI, M., ZHU, J., AIELLO, W., COKER, G., DEEGAN, T., LOSCOCCO, P.,
and WARFIELD, A.: ``Breaking Up Is Hard to Do: Security and Functionality in a
Commodity Hypervisor,'' Proc. 23rd Symp. of Operating Systems Principles, ACM,
pp. 189Â­202, 2011.
COOKE, D., URBAN, J., and HAMILTON, S.: ``UNIX and Beyond: An Interview with Ken
Thompson,'' Computer, vol. 32, pp. 58Â­64, May 1999.
COOPERSTEIN, J.: Writing Linux Device Drivers: A Guide with Exercises, Seattle: Cre-
ateSpace, 2009.
CORBATO, F.J.: ``On Building Systems That Will Fail,'' Commun. of the ACM, vol. 34, pp.
72Â­81, June 1991.
CORBATO,  F.J.,  MERWIN-DAGGETT,        M.,  and  DALEY,  R.C.:  ``An  Experimental  Time-
Sharing System,'' Proc. AFIPS Fall Joint Computer Conf., AFIPS, pp. 335Â­344, 1962.
CORBATO, F.J., and VYSSOTSKY, V.A.: ``Introduction and Overview of the MULTICS
System,'' Proc. AFIPS Fall Joint Computer Conf., AFIPS, pp. 185Â­196, 1965.
CORBET, J., RUBINI, A., and KROAH-HARTMAN, G.: Linux Device Drivers, Sebastopol,
CA: O'Reilly & Associates, 2009.
CORNWELL, M.: ``Anatomy of a Solid-State Drive,`` ACM Queue 10 10, pp. 30Â­37, 2012.
CORREIA, M., GOMEZ FERRO, D., JUNQUEIRA, F.P., and SERAFINI, M.: ``Practical
Hardening of Crash-Tolerant Systems,'' Proc. USENIX Ann. Tech. Conf., USENIX,
2012.
COURTOIS, P.J., HEYMANS, F., and PARNAS, D.L.: ``Concurrent Control with Readers and
Writers,'' Commun. of the ACM, vol. 10, pp. 667Â­668, Oct. 1971.



SEC. 13.2                 ALPHABETICAL BIBLIOGRAPHY                                     1047
CROWLEY, C.: Operating Systems: A Design-Oriented Approach, Chicago: Irwin, 1997.
CUSUMANO, M.A., and SELBY, R.W.: ``How Microsoft Builds Software,'' Commun. of the
ACM, vol. 40, pp. 53Â­61, June 1997.
DABEK, F., KAASHOEK, M.F., KARGET, D., MORRIS, R., and STOICA, I.: ``Wide-Area
Cooperative Storage with CFS,'' Proc. 18th Symp. on Operating Systems Principles,
ACM, pp. 202Â­215, 2001.
DAI, Y., QI, Y., REN, J., SHI, Y., WANG, X., and YU, X.: ``A Lightweight VMM on Many
Core for High Performance Computing,'' Proc. Ninth Int'l Conf. on Virtual Execution
Environments, ACM, pp. 111Â­120, 2013.
DALEY, R.C., and DENNIS, J.B.: ``Virtual Memory, Process, and Sharing in MULTICS,''
Commun. of the ACM, vol. 11, pp. 306Â­312, May 1968.
DASHTI,    M.,  FEDOROVA,  A.,  FUNSTON,     J.,  GAUD,  F.,  LACHAIZE,  R.,  LEPERS,     B.,
QUEMA, V., and ROTH, M.: ``Traffic Management: A Holistic Approach to Memory
Placement on NUMA Systems,'' Proc. 18th Int'l Conf. on Arch. Support for Prog.
Lang. and Operating Systems, ACM, pp. 381Â­394, 2013.
DAUGMAN, J.: ``How Iris Recognition Works,'' IEEE Trans. on Circuits and Systems for
Video Tech., vol. 14, pp. 21Â­30, Jan. 2004.
DAWSON-HAGGERTY, S., KRIOUKOV, A., TANEJA, J., KARANDIKAR, S., FIERRO, G.,
and CULLER, D: ``BOSS: Building Operating System Services,'' Proc. 10th Symp. on
Networked Systems Design and Implementation, USENIX, pp. 443Â­457, 2013.
DAYAN, N., SVENDSEN, M.K., BJORING, M., BONNET, P., and BOUGANIM, L.: ``Eagle-
Tree: Exploring the Design Space of SSD-based Algorithms,'' Proc. VLDB Endow-
ment, vol. 6, pp. 1290Â­1293, Aug. 2013.
DE BRUIJN, W., BOS, H., and BAL, H.: ``Application-Tailored I/O with Streamline,'' ACM
Trans. on Computer Syst., vol. 29, number 2, pp.1Â­33, May 2011.
DE BRUIJN, W., and BOS, H.: ``Beltway Buffers: Avoiding the OS Traffic Jam,'' Proc. 27th
Int'l Conf. on Computer Commun., April 2008.
DENNING, P.J.: ``The Working Set Model for Program Behavior,'' Commun. of the ACM,
vol. 11, pp. 323Â­333, 1968a.
DENNING, P.J.: ``Thrashing: Its Causes and Prevention,'' Proc. AFIPS National Computer
Conf., AFIPS, pp. 915Â­922, 1968b.
DENNING, P.J.: ``Virtual Memory,'' Computing Surveys, vol. 2, pp. 153Â­189, Sept. 1970.
DENNING, D.: Information Warfare and Security, Boston: Addison-Wesley, 1999.
DENNING, P.J.: ``Working Sets Past and Present,'' IEEE Trans. on Software Engineering,
vol. SE-6, pp. 64Â­84, Jan. 1980.
DENNIS,  J.B.,  and  VAN  HORN,  E.C.:  ``Programming    Semantics  for  Multiprogrammed
Computations,'' Commun. of the ACM, vol. 9, pp. 143Â­155, March 1966.
DIFFIE, W., and HELLMAN, M.E.: ``New Directions in Cryptography,'' IEEE Trans. on
Information Theory, vol. IT-22, pp. 644Â­654, Nov. 1976.



1048                    READING LIST AND BIBLIOGRAPHY                             CHAP. 13
DIJKSTRA,  E.W.:  ``Co-operating     Sequential  Processes,''  in  Programming    Languages,
    Genuys, F. (Ed.), London: Academic Press, 1965.
DIJKSTRA, E.W.: ``The Structure of THE Multiprogramming System,'' Commun. of the
    ACM, vol. 11, pp. 341Â­346, May 1968.
DUBOIS,    M.,  SCHEURICH,  C.,   and  BRIGGS,   F.A.:  ``Synchronization,  Coherence,      and
    Event Ordering in Multiprocessors,'' Computer, vol. 21, pp. 9Â­21, Feb. 1988.
DUNN, A., LEE, M.Z., JANA, S., KIM, S., SILBERSTEIN, M., XU, Y., SHMATIKOV, V., and
    WITCHEL, E.: ``Eternal Sunshine of the Spotless Machine: Protecting Privacy with
    Ephemeral Channels,'' Proc. 10th Symp. on Operating Systems Design and Implemen-
    tation, USENIX, pp. 61Â­75, 2012.
DUTTA, K., SINGH, V.K., and VANDERMEER, D.: ``Estimating Operating System Process
    Energy Consumption in Real Time,'' Proc. Eighth Int'l Conf. on Design Science at the
    Intersection of Physical and Virtual Design, Springer-Verlag, pp. 400Â­404, 2013.
EAGER, D.L., LAZOWSKA, E.D., and ZAHORJAN, J.: ``Adaptive Load Sharing in Homo-
    geneous Distributed Systems,'' IEEE Trans. on Software Engineering, vol. SE-12, pp.
    662Â­675, May 1986.
EDLER, J., LIPKIS, J., and SCHONBERG, E.: ``Process Management for Highly Parallel
    UNIX Systems,'' Proc. USENIX Workshop on UNIX and Supercomputers, USENIX,
    pp. 1Â­17, Sept. 1988.
EL  FERKOUSS,     O.,  SNAIKI,  I.,  MOUNAOUAR,      O.,  DAHMOUNI,  H.,    BEN       ALI,  R.,
    LEMIEUX, Y., and OMAR, C.: ``A 100Gig Network Processor Platform for Openflow,''
    Proc. Seventh Int'l Conf. on Network Services and Management, IFIP, pp. 286Â­289,
    2011.
EL GAMAL, A.: ``A Public Key Cryptosystem and Signature Scheme Based on Discrete
    Logarithms,'' IEEE Trans. on Information Theory, vol. IT-31, pp. 469Â­472, July 1985.
ELNABLY., A., and WANG, H.: ``Efficient QoS for Multi-Tiered Storage Systems,'' Proc.
    Fourth USENIX Workshop on Hot Topics in Storage and File Systems, USENIX, 2012.
ELPHINSTONE, K., KLEIN, G., DERRIN, P., ROSCOE, T., and HEISER, G.: ``Towards a
    Practical, Verified, Kernel,'' Proc. 11th Workshop on Hot Topics in Operating Systems,
    USENIX, pp. 117Â­122, 2007.
ENGLER, D.R., CHELF, B., CHOU, A., and HALLEM, S.: ``Checking System Rules Using
    System-Specific Programmer-Written Compiler Extensions,'' Proc. Fourth Symp. on
    Operating Systems Design and Implementation, USENIX, pp. 1Â­16, 2000.
ENGLER, D.R., KAASHOEK, M.F., and O'TOOLE, J. Jr.: ``Exokernel: An Operating Sys-
    tem Architecture for Application-Level Resource Management,'' Proc. 15th Symp. on
    Operating Systems Principles, ACM, pp. 251Â­266, 1995.
ERL, T., PUTTINI, R., and MAHMOOD, Z.: ``Cloud Computing: Concepts, Technology &
    Architecture,'' Upper Saddle River, NJ: Prentice Hall, 2013.
EVEN, S.: Graph Algorithms, Potomac, MD: Computer Science Press, 1979.
FABRY, R.S.: ``Capability-Based Addressing,'' Commun. of the ACM, vol. 17, pp. 403Â­412,
    July 1974.



SEC. 13.2            ALPHABETICAL BIBLIOGRAPHY                                 1049
FANDRICH, M., AIKEN, M., HAWBLITZEL, C., HODSON, O., HUNT, G., LARUS, J.R., and
LEVI, S.: ``Language Support for Fast and Reliable Message-Based Communication in
Singularity OS,'' Proc. First European Conf. on Computer Systems (EUROSYS), ACM,
pp. 177Â­190, 2006.
FEELEY,    M.J.,  MORGAN,   W.E.,  PIGHIN,  F.H.,  KARLIN,  A.R.,      LEVY,   H.M.,     and
THEKKATH, C.A.: ``Implementing Global Memory Management in a Workstation
Cluster,'' Proc. 15th Symp. on Operating Systems Principles, ACM, pp. 201Â­212,
1995.
FELTEN, E.W., and HALDERMAN, J.A.: ``Digital Rights Management, Spyware, and Secu-
rity,'' IEEE Security and Privacy, vol. 4, pp. 18Â­23, Jan./Feb. 2006.
FETZER, C., and KNAUTH, T.: ``Energy-Aware Scheduling for Infrastructure Clouds,''
Proc. Fourth Int'l Conf. on Cloud Computing Tech. and Science, IEEE, pp. 58Â­65,
2012.
FEUSTAL, E.A.: ``The Rice Research Computer--A Tagged Architecture,'' Proc. AFIPS
Conf., AFIPS, 1972.
FLINN, J., and SATYANARAYANAN, M.: ``Managing Battery Lifetime with Energy-Aware
Adaptation,'' ACM Trans. on Computer Systems, vol. 22, pp. 137Â­179, May 2004.
FLORENCIO, D., and HERLEY, C.: ``A Large-Scale Study of Web Password Habits,'' Proc.
16th Int'l Conf. on the World Wide Web, ACM, pp. 657Â­666, 2007.
FORD, R., and ALLEN, W.H.: ``How Not To Be Seen,'' IEEE Security and Privacy, vol. 5,
pp. 67Â­69, Jan./Feb. 2007.
FOTHERINGHAM, J.: ``Dynamic Storage Allocation in the Atlas Including an Automatic
Use of a Backing Store,'' Commun. of the ACM, vol. 4, pp. 435Â­436, Oct. 1961.
FRYER, D., SUN, K., MAHMOOD, R., CHENG, T., BENJAMIN, S., GOEL, A., and DEMKE
BROWN, A.: ``ReCon: Verifying File System Consistency at Runtime,'' Proc. 10th
USENIX Conf. on File and Storage Tech., USENIX, pp. 73Â­86, 2012.
FUKSIS, R., GREITANS, M., and PUDZS, M.: ``Processing of Palm Print and Blood Vessel
Images for Multimodal Biometrics,'' Proc. COST1011 European Conf. on Biometrics
and ID Mgt., Springer-Verlag, pp. 238Â­249, 2011.
FURBER, S.B., LESTER, D.R., PLANA, L.A., GARSIDE, J.D., PAINKRAS, E., TEMPLE, S.,
and BROWN, A.D.: ``Overview of the SpiNNaker System Architecture,'' Trans. on
Computers, vol. 62, pp. 2454Â­2467, Dec. 2013.
FUSCO, J.: The Linux Programmer's Toolbox, Upper Saddle River, NJ: Prentice Hall, 2007.
GARFINKEL, T., PFAFF, B., CHOW, J., ROSENBLUM, M., and BONEH, D.: ``Terra: A Vir-
tual Machine-Based Platform for Trusted Computing,'' Proc. 19th Symp. on Operating
Systems Principles, ACM, pp. 193Â­206, 2003.
GAROFALAKIS, J., and STERGIOU, E.: ``An Analytical Model for the Performance Evalu-
ation of Multistage Interconnection Networks with Two Class Priorities,'' Future Gen-
eration Computer Systems, vol. 29, pp. 114Â­129, Jan. 2013.
GEER, D.: ``For Programmers, Multicore Chips Mean Multiple Challenges,'' Computer,
vol. 40, pp. 17Â­19, Sept. 2007.



1050             READING LIST AND BIBLIOGRAPHY                               CHAP. 13
GEIST, R., and DANIEL, S.: ``A Continuum of Disk Scheduling Algorithms,'' ACM Trans.
on Computer Systems, vol. 5, pp. 77Â­92, Feb. 1987.
GELERNTER, D.: ``Generative Communication in Linda,'' ACM Trans. on Programming
Languages and Systems, vol. 7, pp. 80Â­112, Jan. 1985.
GHOSHAL, D., and PLALE, B: ``Provenance from Log Files: a BigData Problem,'' Proc.
Joint EDBT/ICDT Workshops, ACM, pp. 290Â­297, 2013.
GIFFIN, D, LEVY, A., STEFAN, D., TEREI, D., MAZIERES, D.: ``Hails: Protecting Data Pri-
vacy in Untrusted Web Applications,'' Proc. 10th Symp. on Operating Systems Design
and Implementation, USENIX, 2012.
GIUFFRIDA, C., KUIJSTEN, A., and TANENBAUM, A.S.: ``Enhanced Operating System
Security through Efficient and Fine-Grained Address Space Randomization,'' Proc.
21st USENIX Security Symp., USENIX, 2012.
GIUFFRIDA,  C.,  KUIJSTEN,  A.,  and  TANENBAUM,       A.S.:  ``Safe  and  Automatic        Live
Update for Operating Systems,'' Proc. 18th Int'l Conf. on Arch. Support for Prog.
Lang. and Operating Systems, ACM, pp. 279Â­292, 2013.
GOLDBERG, R.P:: Architectural Principles for Virtual Computer Systems, Ph.D. thesis,
Harvard University, Cambridge, MA, 1972.
GOLLMAN, D.: Computer Security, West Sussex, UK: John Wiley & Sons, 2011.
GONG, L.: Inside Java 2 Platform Security, Boston: Addison-Wesley, 1999.
GONZALEZ-FEREZ, P., PIERNAS, J., and CORTES, T.: ``DADS: Dynamic and Automatic
Disk Scheduling,'' Proc. 27th Symp. on Appl. Computing, ACM, pp. 1759Â­1764, 2012.
GORDON, M.S., JAMSHIDI, D.A., MAHLKE, S., and MAO, Z.M.: ``COMET: Code Offload
by    Migrating  Execution  Transparently,''  Proc.  10th  Symp.  on      Operating  Systems
Design and Implementation, USENIX, 2012.
GRAHAM, R.: ``Use of High-Level Languages for System Programming,'' Project MAC
Report TM-13, M.I.T., Sept. 1970.
GROPP, W., LUSK, E., and SKJELLUM, A.: Using MPI: Portable Parallel Programming
with the Message Passing Interface, Cambridge, MA: M.I.T. Press, 1994.
GUPTA, L.: ``QoS in Interconnection of Next Generation Networks,'' Proc. Fifth Int'l Conf.
on Computational Intelligence and Commun. Networks, IEEE, pp. 91Â­96, 2013.
HAERTIG, H., HOHMUTH, M., LIEDTKE, J., and SCHONBERG, S.: ``The Performance of
Kernel-Based Systems,'' Proc. 16th Symp. on Operating Systems Principles, ACM, pp.
66Â­77, 1997.
HAFNER, K., and MARKOFF, J.: Cyberpunk, New York: Simon and Schuster, 1991.
HAITJEMA, M.A.: Delivering Consistent Network Performance in Multi-Tenant Data Cen-
ters, Ph.D. thesis, Washington Univ., 2013.
HALDERMAN, J.A., and FELTEN, E.W.: ``Lessons from the Sony CD DRM Episode,''
Proc. 15th USENIX Security Symp., USENIX, pp. 77Â­92, 2006.
HAN, S., MARSHALL, S., CHUN, B.-G., and RATNASAMY, S.: ``MegaPipe: A New Pro-
gramming Interface for Scalable Network I/O,''         Proc. USENIX Ann. Tech. Conf.,
USENIX, pp. 135Â­148, 2012.



SEC. 13.2                     ALPHABETICAL BIBLIOGRAPHY                                         1051
HAND, S.M., WARFIELD, A., FRASER, K., KOTTSOVINOS, E., and MAGENHEIMER, D.:
``Are Virtual Machine Monitors Microkernels Done Right?,'' Proc. 10th Workshop on
Hot Topics in Operating Systems, USENIX, pp. 1Â­6, 2005.
HARNIK, D., KAT, R., MARGALIT, O., SOTNIKOV, D., and TRAEGER, A.: ``To Zip or Not
to Zip: Effective Resource Usage for Real-Time Compression,'' Proc. 11th USENIX
Conf. on File and Storage Tech., USENIX, pp. 229Â­241, 2013.
HARRISON, M.A., RUZZO, W.L., and ULLMAN, J.D.: ``Protection in Operating Systems,''
Commun. of the ACM, vol. 19, pp. 461Â­471, Aug. 1976.
HART, J.M.: Win32 System Programming, Boston: Addison-Wesley, 1997.
HARTER,    T.,    DRAGGA,     C.,  VAUGHN,     M.,  ARPACI-DUSSEAU,       A.C.,     and    ARPACI-
DUSSEAU, R.H.: ``A File Is Not a File: Understanding the I/O Behavior of Apple
Desktop Applications,'' ACM Trans. on Computer Systems, vol. 30, Art. 10, pp. 71Â­83,
Aug. 2012.
HAUSER, C., JACOBI, C., THEIMER, M., WELCH, B., and WEISER, M.: ``Using Threads
in Interactive Systems: A Case Study,'' Proc. 14th Symp. on Operating Systems Princi-
ples, ACM, pp. 94Â­105, 1993.
HAVENDER, J.W.: ``Avoiding Deadlock in Multitasking Systems,'' IBM Systems J., vol. 7,
pp. 74Â­84, 1968.
HEISER, G., UHLIG, V., and LEVASSEUR, J.: ``Are Virtual Machine Monitors Microker-
nels Done Right?'' ACM SIGOPS Operating Systems Rev., vol. 40, pp. 95Â­99, 2006.
HEMKUMAR, D., and VINAYKUMAR, K.: ``Aggregate TCP Congestion Management for
Internet QoS,'' Proc. 2012 Int'l Conf. on Computing Sciences, IEEE, pp. 375Â­378,
2012.
HERDER, J.N., BOS, H., GRAS, B., HOMBURG, P., and TANENBAUM, A.S.: ``Construction
of a Highly Dependable Operating System,'' Proc. Sixth European Dependable Com-
puting Conf., pp. 3Â­12, 2006.
HERDER,    J.N.,  MOOLENBROEK,           D.  VAN,  APPUSWAMY,        R.,  WU,  B.,  GRAS,  B.,  and
TANENBAUM,             A.S.:  ``Dealing  with  Driver  Failures  in  the  Storage   Stack  ,''  Proc.
Fourth Latin American Symp. on Dependable Computing, pp. 119Â­126, 2009.
HEWAGE, K., and VOIGT, T.: ``Towards TCP Communication with the Low Power Wire-
less Bus,'' Proc. 11th Conf. on Embedded Networked Sensor Systems, ACM, Art. 53,
2013.
HILBRICH, T. DE SUPINSKI, R., NAGEL, W., PROTZE, J., BAIER,. C., and MULLER, M.:
``Distributed Wait State Tracking for Runtime MPI Deadlock Detection,'' Proc. 2013
Int'l    Conf.    for  High   Performance      Computing,  Networking,    Storage   and    Analysis,
ACM, New York, NY, USA, 2013.
HILDEBRAND, D.: ``An Architectural Overview of QNX,'' Proc. Workshop on Microker-
nels and Other Kernel Arch., ACM, pp. 113Â­136, 1992.
HIPSON, P.: Mastering Windows XP Registry, New York: Sybex, 2002.
HOARE, C.A.R.: ``Monitors, An Operating System Structuring Concept,'' Commun. of the
ACM, vol. 17, pp. 549Â­557, Oct. 1974; Erratum in Commun. of the ACM, vol. 18, p.
95, Feb. 1975.



1052                     READING LIST AND BIBLIOGRAPHY                    CHAP. 13
HOCKING, M: ``Feature: Thin Client Security in the Cloud,'' J. Network Security, vol.
2011, pp. 17Â­19, June 2011.
HOHMUTH, M., PETER, M., HAERTIG, H., and SHAPIRO, J.: ``Reducing TCB Size by
Using Untrusted Components: Small Kernels Versus Virtual-Machine Monitors,'' Proc.
11th ACM SIGOPS European Workshop, ACM, Art. 22, 2004.
HOLMBACKA, S., AGREN, D., LAFOND, S., and LILIUS, J.: ``QoS Manager for Energy
Efficient Many-Core Operating Systems,'' Proc. 21st Euromicro Int'l Conf. on Paral-
lel, Distributed, and Network-based Processing, IEEE, pp. 318Â­322, 2013.
HOLT, R.C.: ``Some Deadlock Properties of Computer Systems,'' Computing Surveys, vol.
4, pp. 179Â­196, Sept. 1972.
HOQUE, M.A., SIEKKINEN, and NURMINEN, J.K.: ``TCP Receive Buffer Aware Wireless
Multimedia Streaming: An Energy Efficient Approach,'' Proc. 23rd Workshop on Net-
work and Operating System Support for Audio and Video, ACM, pp. 13Â­18, 2013.
HOWARD, M., and LEBLANK, D.: Writing Secure Code, Redmond, WA: Microsoft Press,
2009.
HRUBY,  T.,  VOGT,  D.,  BOS,  H.,  and  TANENBAUM,  A.S.:  ``Keep  Net  Working--On        a
Dependable and Fast Networking Stack,'' Proc. 42nd Conf. on Dependable Systems
and Networks, IEEE, pp. 1Â­12, 2012.
HUND, R. WILLEMS, C. AND HOLZ, T.: ``Practical Timing Side Channel Attacks against
Kernel Space ASLR,'' Proc. IEEE Symp. on Security and Privacy, IEEE, pp. 191Â­205,
2013.
HRUBY, T., D., BOS, H., and TANENBAUM, A.S.: ``When Slower Is Faster: On Heteroge-
neous Multicores for Reliable Systems,'' Proc. USENIX Ann. Tech. Conf., USENIX,
2013.
HUA, J., LI, M., SAKURAI, K., and REN, Y.: ``Efficient Intrusion Detection Based on Static
Analysis and Stack Walks,'' Proc. Fourth Int'l Workshop on Security, Springer-Verlag,
pp. 158Â­173, 2009.
HUTCHINSON, N.C., MANLEY, S., FEDERWISCH, M., HARRIS, G., HITZ, D., KLEIMAN,
S., and O'MALLEY, S.: ``Logical vs. Physical File System Backup,'' Proc. Third Symp.
on Operating Systems Design and Implementation, USENIX, pp. 239Â­249, 1999.
IEEE: Information Technology--Portable Operating System Interface (POSIX), Part 1: Sys-
tem Application Program Interface (API) [C Language], New York: Institute of Elec-
trical and Electronics Engineers, 1990.
INTEL: ``PCI-SIG SR-IOV Primer: An Introduction to SR-IOV Technology,'' Intel White
Paper, 2011.
ION, F.: ``From Touch Displays to the Surface: A Brief History of Touchscreen Technol-
ogy,'' ArsTechnica, History of Tech, April, 2013
ISLOOR, S.S., and MARSLAND, T.A.: ``The Deadlock Problem: An Overview,'' Computer,
vol. 13, pp. 58Â­78, Sept. 1980.
IVENS, K.: Optimizing the Windows Registry, Hoboken, NJ: John Wiley & Sons, 1998.



SEC. 13.2          ALPHABETICAL BIBLIOGRAPHY                                     1053
JANTZ,  M.R.,  STRICKLAND,  C.,  KUMAR,  K.,        DIMITROV,  M.,  and  DOSHI,  K.A.:     ``A
Framework for Application Guidance in Virtual Memory Systems,'' Proc. Ninth Int'l
Conf. on Virtual Execution Environments, ACM, pp. 155Â­166, 2013.
JEONG, J., KIM, H., HWANG, J., LEE, J., and MAENG, S.: ``Rigorous Rental Memory
Management for Embedded Systems,'' ACM Trans. on Embedded Computing Systems,
vol. 12, Art. 43, pp. 1Â­21, March 2013.
JIANG, X., and XU, D.: ``Profiling Self-Propagating Worms via Behavioral Footprinting,''
Proc. Fourth ACM Workshop in Recurring Malcode, ACM, pp. 17Â­24, 2006.
JIN, H., LING, X., IBRAHIM, S., CAO, W., WU, S., and ANTONIU, G.: ``Flubber: Two-Level
Disk Scheduling in Virtualized Environment,'' Future Generation Computer Systems,
vol. 29, pp. 2222Â­2238, Oct. 2013.
JOHNSON, E.A: ``Touch Display--A Novel Input/Output Device for Computers,'' Elec-
tronics Letters, vol. 1, no. 8, pp. 219Â­220, 1965.
JOHNSON, N.F., and JAJODIA, S.: ``Exploring Steganography: Seeing the Unseen,'' Com-
puter, vol. 31, pp. 26Â­34, Feb. 1998.
JOO, Y.: ``F2FS: A New File System Designed for     Flash Storage in Mobile Devices,''
Embedded Linux Europe, Barcelona, Spain, November 2012.
JULA, H., TOZUN, P., and CANDEA, G.: ``Communix: A Framework for Collaborative
Deadlock Immunity,'' Proc. IEEE/IFIP 41st Int. Conf. on Dependable Systems and
Networks, IEEE, pp. 181Â­188, 2011.
KABRI, K., and SERET, D.: ``An Evaluation of the Cost and Energy Consumption of Secu-
rity Protocols in WSNs,'' Proc. Third Int'l Conf. on Sensor Tech. and Applications,
IEEE, pp. 49Â­54, 2009.
KAMAN, S., SWETHA, K., AKRAM, S., and VARAPRASAS, G.: ``Remote User Authentica-
tion Using a Voice Authentication System,'' Inf. Security J., vol. 22, pp. 117Â­125, Issue
3, 2013.
KAMINSKY, D.: ``Explorations in Namespace: White-Hat Hacking across the Domain
Name System,'' Commun. of the ACM, vol. 49, pp. 62Â­69, June 2006.
KAMINSKY, M., SAVVIDES, G., MAZIERES, D., and KAASHOEK, M.F.: ``Decentralized
User Authentication in a Global File System,'' Proc. 19th Symp. on Operating Systems
Principles, ACM, pp. 60Â­73, 2003.
KANETKAR, Y.P.: Writing Windows Device Drivers Course Notes, New Delhi: BPB Publi-
cations, 2008.
KANT, K., and MOHAPATRA, P.: ``Internet Data Centers,'' IEEE Computer vol. 37, pp.
35Â­37, Nov. 2004.
KAPRITSOS, M., WANG, Y., QUEMA, V., CLEMENT, A., ALVISI, L., and DAHLIN, M.:
``All about Eve: Execute-Verify Replication for Multi-Core Servers,'' Proc. 10th Symp.
on Operating Systems Design and Implementation, USENIX, pp. 237Â­250, 2012.
KASIKCI, B., ZAMFIR, C. and CANDEA, G.: ``Data Races vs. Data Race Bugs: Telling the
Difference with Portend,'' Proc. 17th Int'l Conf. on Arch. Support for Prog. Lang. and
Operating Systems, ACM, pp. 185Â­198, 2012.



1054                READING LIST AND BIBLIOGRAPHY                             CHAP. 13
KATO, S., ISHIKAWA, Y., and RAJKUMAR, R.: ``Memory Management for Interactive
Real-Time Applications,'' Real-Time Systems, vol. 47, pp. 498Â­517, May 2011.
KAUFMAN, C., PERLMAN, R., and SPECINER, M.: Network Security, 2nd ed., Upper Sad-
dle River, NJ: Prentice Hall, 2002.
KELEHER, P., COX, A., DWARKADAS, S., and ZWAENEPOEL, W.: ``TreadMarks: Dis-
tributed Shared Memory on Standard Workstations and Operating Systems,'' Proc.
USENIX Winter Conf., USENIX, pp. 115Â­132, 1994.
KERNIGHAN, B.W., and PIKE, R.: The UNIX Programming Environment, Upper Saddle
River, NJ: Prentice Hall, 1984.
KIM, J., LEE, J., CHOI, J., LEE, D., and NOH, S.H.: ``Improving SSD Reliability with
RAID via Elastic Striping and Anywhere Parity,'' Proc. 43rd Int'l Conf. on Depend-
able Systems and Networks, IEEE, pp. 1Â­12, 2013.
KIRSCH, C.M., SANVIDO, M.A.A., and HENZINGER, T.A.: ``A Programmable Microkernel
for Real-Time Systems,'' Proc. First Int'l Conf. on Virtual Execution Environments,
ACM, pp. 35Â­45, 2005.
KLEIMAN, S.R.: ``Vnodes: An Architecture for Multiple File System Types in Sun UNIX,''
Proc. USENIX Summer Conf., USENIX, pp. 238Â­247, 1986.
KLEIN, G., ELPHINSTONE, K., HEISER, G., ANDRONICK, J., COCK, D., DERRIN, P.,
ELKADUWE, D., ENGELHARDT, K., KOLANSKI, R., NORRISH, M., SEWELL, T.,
TUCH, H., and WINWOOD, S.: ``seL4: Formal Verification of an OS Kernel,'' Proc.
22nd Symp. on Operating Systems Primciples, ACM, pp. 207Â­220, 2009.
KNUTH, D.E.: The Art of Computer Programming, Vol. Boston: Addison-Wesley, 1997.
KOLLER, R., MARMOL, L., RANGASWAMI, R, SUNDARARAMAN, S., TALAGALA, N.,
and ZHAO, M.: ``Write Policies for Host-side Flash Caches,'' Proc. 11th USENIX
Conf. on File and Storage Tech., USENIX, pp. 45Â­58, 2013.
KOUFATY, D., REDDY, D., and HAHN, S.: ``Bias Scheduling in Heterogeneous Multi-Core
Architectures,'' Proc. Fifth European Conf. on Computer Systems (EUROSYS), ACM,
pp. 125Â­138, 2010.
KRATZER, C., DITTMANN, J., LANG, A., and KUHNE, T.: ``WLAN Steganography: A
First Practical Review,'' Proc. Eighth Workshop on Multimedia and Security, ACM,
pp. 17Â­22, 2006.
KRAVETS, R., and KRISHNAN, P.: ``Power Management Techniques for Mobile Communi-
cation,'' Proc. Fourth ACM/IEEE Int'l Conf. on Mobile Computing and Networking,
ACM/IEEE, pp. 157Â­168, 1998.
KRISH, K.R., WANG, G., BHATTACHARJEE, P., BUTT, A.R., and SNIADY, C.: ``On Reduc-
ing Energy Management Delays in Disks,'' J. Parallel and Distributed Computing, vol.
73, pp. 823Â­835, June 2013.
KRUEGER, P., LAI, T.-H., and DIXIT-RADIYA, V.A.: ``Job Scheduling Is More Important
Than Processor Allocation for Hypercube Computers,'' IEEE Trans. on Parallel and
Distr. Systems, vol. 5, pp. 488Â­497, May 1994.



SEC. 13.2                 ALPHABETICAL BIBLIOGRAPHY                                          1055
KUMAR, R., TULLSEN, D.M., JOUPPI, N.P., and RANGANATHAN, P.: ``Heterogeneous
Chip Multiprocessors,'' Computer, vol. 38, pp. 32Â­38, Nov. 2005.
KUMAR, V.P., and REDDY, S.M.: ``Augmented Shuffle-Exchange Multistage Interconnec-
tion Networks,'' Computer, vol. 20, pp. 30Â­40, June 1987.
KWOK, Y.-K., AHMAD, I.: ``Static Scheduling Algorithms for Allocating Directed Task
Graphs to Multiprocessors,'' Computing Surveys, vol. 31, pp. 406Â­471, Dec. 1999.
LACHAIZE, R., LEPERS, B., and QUEMA, V.: ``MemProf: A Memory Profiler for NUMA
Multicore Systems,'' Proc. USENIX Ann. Tech. Conf., USENIX, 2012.
LAI, W.K., and TANG, C.-L.: ``QoS-aware Downlink Packet Scheduling                  for  LTE   Net-
works,'' Computer Networks, vol. 57, pp. 1689Â­1698, May 2013.
LAMPSON, B.W.: ``A Note on the Confinement Problem,'' Commun. of the ACM, vol. 10,
pp. 613Â­615, Oct. 1973.
LAMPORT, L.: ``Password Authentication with Insecure Communication,'' Commun. of the
ACM, vol. 24, pp. 770Â­772, Nov. 1981.
LAMPSON, B.W.: ``Hints for Computer System Design,'' IEEE Software, vol. 1, pp. 11Â­28,
Jan. 1984.
LAMPSON, B.W., and STURGIS, H.E.: ``Crash Recovery in a Distributed Data Storage Sys-
tem,'' Xerox Palo Alto Research Center Technical Report, June 1979.
LANDWEHR, C.E.: ``Formal Models of Computer Security,'' Computing Surveys, vol. 13,
pp. 247Â­278, Sept. 1981.
LANKES, S., REBLE, P., SINNEN, O., and CLAUSS, C.: ``Revisiting Shared Virtual Memory
Systems for Non-Coherent Memory-Coupled Cores,'' Proc. 2012 Int'l Workshop on
Programming   Models             for  Applications  for  Multicores  and  Manycores,     ACM,  pp.
45Â­54, 2012.
LEE, Y., JUNG, T., and SHIN, I.L ``Demand-Based Flash Translation Layer Considering
Spatial      Locality,''  Proc.       28th  Annual  Symp.  on  Applied    Computing,     ACM,  pp.
1550Â­1551, 2013.
LEVENTHAL, A.D.: ``A File System All Its Own,'' Commun. of the ACM, vol. 56, pp.
64Â­67, May 2013.
LEVIN,  R.,  COHEN,       E.S.,  CORWIN,    W.M.,   POLLACK,   F.J.,    and  WULF,    W.A.:   ``Pol-
icy/Mechanism Separation in Hydra,'' Proc. Fifth Symp. on Operating Systems Princi-
ples, ACM, pp. 132Â­140, 1975.
LEVINE, G.N.: ``Defining Deadlock,'' ACM SIGOPS Operating Systems Rev., vol. 37, pp.
54Â­64, Jan. 2003.
LEVINE, J.G., GRIZZARD, J.B., and OWEN, H.L.: ``Detecting and Categorizing Kernel-
Level Rootkits to Aid Future Detection,'' IEEE Security and Privacy, vol. 4, pp.
24Â­32, Jan./Feb. 2006.
LI, D., JIN, H., LIAO, X., ZHANG, Y., and ZHOU, B.: ``Improving Disk I/O Performance in a
Virtualized System,'' J. Computer and Syst. Sci., vol. 79, pp. 187Â­200, March 2013a.



1056                     READING LIST AND BIBLIOGRAPHY                            CHAP. 13
LI, D., LIAO, X., JIN, H., ZHOU, B., and ZHANG, Q.: ``A New Disk I/O Model of Virtual-
     ized Cloud Environment,'' IEEE Trans. on Parallel and Distributed Systems, vol. 24,
     pp. 1129Â­1138, June 2013b.
LI, K.: Shared Virtual Memory on Loosely Coupled Multiprocessors, Ph.D. Thesis, Yale
     Univ., 1986.
LI, K., and HUDAK, P.: ``Memory Coherence in Shared Virtual Memory Systems,'' ACM
     Trans. on Computer Systems, vol. 7, pp. 321Â­359, Nov. 1989.
LI, K., KUMPF, R., HORTON, P., and ANDERSON, T.: ``A Quantitative Analysis of Disk
     Drive  Power  Management    in  Portable   Computers,''  Proc.  USENIX    Winter      Conf.,
     USENIX, pp. 279Â­291, 1994.
LI, Y., SHOTRE, S., OHARA, Y., KROEGER, T.M., MILLER, E.L., and LONG, D.D.E.:
     ``Horus: Fine-Grained Encryption-Based Security for Large-Scale Storage,'' Proc. 11th
     USENIX Conf. on File and Storage Tech., USENIX, pp. 147Â­160, 2013c.
LIEDTKE, J.: ``Improving IPC by Kernel Design,'' Proc. 14th Symp. on Operating Systems
     Principles, ACM, pp. 175Â­188, 1993.
LIEDTKE, J.: ``On Micro-Kernel Construction,'' Proc. 15th Symp. on Operating Systems
     Principles, ACM, pp. 237Â­250, 1995.
LIEDTKE, J.: ``Toward Real Microkernels,'' Commun. of the ACM, vol. 39, pp. 70Â­77,
     Sept. 1996.
LING, X., JIN, H., IBRAHIM, S., CAO, W., and WU, S.: ``Efficient Disk I/O Scheduling with
     QoS Guarantee for Xen-based Hosting Platforms,'' Proc. 12th Int'l Symp. on Cluster,
     Cloud, and Grid Computing, IEEE/ACM, pp. 81Â­89, 2012.
LIONS, J.: Lions' Commentary on Unix 6th Edition, with Source Code, San Jose, CA: Peer-
     to-Peer Communications, 1996.
LIU, T., CURTSINGER, C., and BERGER, E.D.: ``Dthreads: Efficient Deterministic Multi-
     threading,'' Proc. 23rd Symp. of Operating Systems Principles, ACM, pp. 327Â­336,
     2011.
LIU, Y., MUPPALA, J.K., VEERARAGHAVAN, M., LIN, D., and HAMDI, M.: Data Center
     Networks: Topologies, Architectures and Fault-Tolerance Characteristics, Springer,
     2013.
LO,  V.M.:  ``Heuristic  Algorithms  for  Task  Assignment    in  Distributed  Systems,''  Proc.
     Fourth Int'l Conf. on Distributed Computing Systems, IEEE, pp. 30Â­39, 1984.
LORCH, J.R., PARNO, B., MICKENS, J., RAYKOVA, M., and SCHIFFMAN, J.: ``Shroud:
     Ensuring Private Access to Large-Scale Data in the Data Center,'' Proc. 11th USENIX
     Conf. on File and Storage Tech., USENIX, pp. 199Â­213, 2013.
LOPEZ-ORTIZ, A., SALINGER, A.: ``Paging for Multi-Core Shared Caches,'' Proc. Inno-
     vations in Theoretical Computer Science, ACM, pp. 113Â­127, 2012.
LORCH, J.R., and SMITH, A.J.: ``Apple Macintosh's Energy Consumption,'' IEEE Micro,
     vol. 18, pp. 54Â­63, Nov./Dec. 1998.
LOVE, R.: Linux System Programming: Talking Directly to the Kernel and C Library,
     Sebastopol, CA: O'Reilly & Associates, 2013.



SEC. 13.2              ALPHABETICAL BIBLIOGRAPHY                                    1057
LU, L., ARPACI-DUSSEAU, A.C., and ARPACI-DUSSEAU, R.H.: ``Fault Isolation and Quick
Recovery in Isolation File Systems,'' Proc. Fifth USENIX Workshop on Hot Topics in
Storage and File Systems, USENIX, 2013.
LUDWIG, M.A.: The Little Black Book of Email Viruses, Show Low, AZ: American Eagle
Publications, 2002.
LUO, T., MA, S., LEE, R., ZHANG, X., LIU, D., and ZHOU, L.: ``S-CAVE: Effective SSD
Caching to Improve Virtual Machine Storage Performance,'' Proc. 22nd Int'l Conf. on
Parallel Arch. and Compilation Tech., IEEE, pp. 103Â­112, 2013.
MA, A., DRAGGA, C., ARPACI-DUSSEAU, A.C., and ARPACI-DUSSEAU, R.H.: ``ffsck: The
Fast File System Checker,'' Proc. 11th USENIX Conf. on File and Storage Tech.,
USENIX, 2013.
MAO, W.: ``The Role and Effectiveness of Cryptography in Network Virtualization: A Posi-
tion Paper,'' Proc. Eighth ACM Asian SIGACT Symp. on Information, Computer, and
Commun. Security, ACM, pp. 179Â­182, 2013.
MARINO, D., HAMMER, C., DOLBY, J., VAZIRI, M., TIP, F., and VITEK, J.: ``Detecting
Deadlock in Programs with Data-Centric Synchronization,'' Proc. Int'l Conf. on Soft-
ware Engineering, IEEE, pp. 322Â­331, 2013.
MARSH, B.D., SCOTT, M.L., LEBLANC, T.J., and MARKATOS, E.P.: ``First-Class User-
Level      Threads,''  Proc.  13th  Symp.  on  Operating  Systems   Principles,  ACM,     pp.
110Â­121, 1991.
MASHTIZADEH, A.J., BITTAY, A., HUANG, Y.F., and MAZIERES, D.: ``Replication, His-
tory, and Grafting in the Ori File System,'' Proc. 24th Symp. on Operating System
Principles, ACM, pp. 151Â­166, 2013.
MATTHUR, A., and MUNDUR, P.: ``Dynamic Load Balancing Across Mirrored Multimedia
Servers,'' Proc. 2003 Int'l Conf. on Multimedia, IEEE, pp. 53Â­56, 2003.
MAXWELL, S.: Linux Core Kernel Commentary, Scottsdale, AZ: Coriolis Group Books,
2001.
MAZUREK, M.L., THERESKA, E., GUNAWARDENA, D., HARPER, R., and SCOTT, J.:
``ZZFS: A Hybrid Device and Cloud File System for Spontaneous Users,'' Proc. 10th
USENIX Conf. on File and Storage Tech., USENIX, pp. 195Â­208, 2012.
MCKUSICK, M.K., BOSTIC, K., KARELS, M.J., QUARTERMAN, J.S.: The Design and
Implementation of the 4.4BSD Operating System, Boston: Addison-Wesley, 1996.
MCKUSICK,  M.K.,  and  NEVILLE-NEIL,       G.V.:  The  Design  and  Implementation  of    the
FreeBSD Operating System, Boston: Addison-Wesley, 2004.
MCKUSICK, M.K.: ``Disks from the Perspective of a File System,'' Commun. of the ACM,
vol. 55, pp. 53Â­55, Nov. 2012.
MEAD, N.R.: ``Who Is Liable for Insecure Systems?'' Computer, vol. 37, pp. 27Â­34, July
2004.
MELLOR-CRUMMEY, J.M., and SCOTT, M.L.: ``Algorithms for Scalable Synchronization
on Shared-Memory Multiprocessors,'' ACM Trans. on Computer Systems, vol. 9, pp.
21Â­65, Feb. 1991.



1058   READING LIST AND BIBLIOGRAPHY                                           CHAP. 13
MIKHAYLOV, K., and TERVONEN, J.: ``Energy Consumption of the Mobile Wireless Sen-
sor Network's Node with Controlled Mobility,'' Proc. 27th Int'l Conf. on Advanced
Networking and Applications Workshops, IEEE, pp. 1582Â­1587, 2013.
MILOJICIC, D.: ``Security and Privacy,'' IEEE Concurrency, vol. 8, pp. 70Â­79, AprilÂ­June
2000.
MOODY, G.: Rebel Code, Cambridge. MA: Perseus Publishing, 2001.
MOON, S., and REDDY, A.L.N.: ``Don't Let RAID Raid the Lifetime of Your SSD Array,''
Proc. Fifth USENIX Workshop on Hot Topics in Storage and File Systems, USENIX,
2013.
MORRIS, R., and THOMPSON, K.: ``Password Security: A Case History,'' Commun. of the
ACM, vol. 22, pp. 594Â­597, Nov. 1979.
MORUZ, G., and NEGOESCU, A.: ``Outperforming LRU Via Competitive Analysis on
Parametrized Inputs for Paging,'' Proc. 23rd ACM-SIAM Symp. on Discrete Algo-
rithms, SIAM, pp. 1669Â­1680.
MOSHCHUK, A., BRAGIN, T., GRIBBLE, S.D., and LEVY, H.M.: ``A Crawler-Based Study
of Spyware on the Web,'' Proc. Network and Distributed System Security Symp., Inter-
net Society, pp. 1Â­17, 2006.
MULLENDER, S.J., and TANENBAUM, A.S.: ``Immediate Files,'' Software Practice and
Experience, vol. 14, pp. 365Â­368, 1984.
NACHENBERG, C.: ``Computer Virus-Antivirus Coevolution,'' Commun. of the ACM, vol.
40, pp. 46Â­51, Jan. 1997.
NARAYANAN, D., N. THERESKA, E., DONNELLY, A., ELNIKETY, S. and ROWSTRON, A.:
``Migrating Server Storage to SSDs: Analysis of Tradeoffs,'' Proc. Fourth European
Conf. on Computer Systems (EUROSYS), ACM, 2009.
NELSON, M., LIM, B.-H., and HUTCHINS, G.: ``Fast Transparent Migration for Virtual
Machines,'' Proc. USENIX Ann. Tech. Conf., USENIX, pp. 391Â­394, 2005.
NEMETH, E., SNYDER, G., HEIN, T.R., and WHALEY, B.: UNIX and Linux System Admin-
istration Handbook, 4th ed., Upper Saddle River, NJ: Prentice Hall, 2013.
NEWTON, G.: ``Deadlock Prevention, Detection, and Resolution: An Annotated Bibliogra-
phy,'' ACM SIGOPS Operating Systems Rev., vol. 13, pp. 33Â­44, April 1979.
NIEH, J., and LAM, M.S.: ``A SMART Scheduler for Multimedia      Applications,''  ACM
Trans. on Computer Systems, vol. 21, pp. 117Â­163, May 2003.
NIGHTINGALE, E.B., ELSON, J., FAN, J., HOGMANN, O., HOWELL, J., and SUZUE, Y.:
``Flat Datacenter Storage,'' Proc. 10th Symp. on Operating Systems Design and Imple-
mentation, USENIX, pp. 1Â­15, 2012.
NIJIM, M., QIN, X., QIU, M., and LI, K.: ``An Adaptive Energy-conserving Strategy for Par-
allel Disk Systems,'' Future Generation Computer Systems, vol. 29, pp. 196Â­207, Jan.
2013.
NIST (National Institute of Standards and Technology): FIPS Pub. 180Â­1, 1995.



SEC. 13.2                   ALPHABETICAL BIBLIOGRAPHY                                         1059
NIST  (National  Institute  of   Standards   and  Technology):  ``The  NIST  Definition   of  Cloud
Computing,'' Special Publication 800-145, Recommendations of the National Institute
of Standards and Technology, 2011.
NO, J.: ``NAND Flash Memory-Based Hybrid File System for High I/O Performance,'' J.
Parallel and Distributed Computing, vol. 72, pp. 1680Â­1695, Dec. 2012.
OH, Y., CHOI, J., LEE, D., and NOH, S.H.: ``Caching Less for Better Performance: Balanc-
ing Cache Size and Update Cost of Flash Memory Cache in Hybrid Storage Systems,''
Proc. 10th USENIX Conf. on File and Storage Tech., USENIX, pp. 313Â­326, 2012.
OHNISHI, Y., and YOSHIDA, T.: ``Design and Evaluation of a Distributed Shared Memory
Network for Application-Specific PC Cluster Systems,'' Proc. Workshops of Int'l Conf.
on Advanced Information Networking and Applications, IEEE, pp. 63Â­70, 2011.
OKI, B., PFLUEGL, M., SIEGEL, A., and SKEEN, D.: ``The Information Bus--An Architec-
ture for Extensible Distributed Systems,'' Proc. 14th Symp. on Operating Systems
Principles, ACM, pp. 58Â­68, 1993.
ONGARO, D., RUMBLE, S.M., STUTSMAN, R., OUSTERHOUT, J., and ROSENBLUM, M.:
``Fast Crash Recovery in RAMCloud,'' Proc. 23rd Symp. of Operating Systems Princi-
ples, ACM, pp. 29Â­41, 2011.
ORGANICK, E.I.: The Multics System, Cambridge, MA: M.I.T. Press, 1972.
ORTOLANI, S., and CRISPO, B.: ``NoisyKey: Tolerating Keyloggers via Keystrokes Hid-
ing,'' Proc. Seventh USENIX Workshop on Hot Topics in Security, USENIX, 2012.
ORWICK, P., and SMITH, G.: Developing Drivers with the Windows Driver Foundation,
Redmond, WA: Microsoft Press, 2007.
OSTRAND, T.J., and WEYUKER, E.J.: ``The Distribution of Faults in a Large Industrial
Software System,'' Proc. 2002 ACM SIGSOFT Int'l Symp. on Software Testing and
Analysis, ACM, pp. 55Â­64, 2002.
OSTROWICK, J.: Locking Down Linux--An Introduction to Linux Security, Raleigh, NC:
Lulu Press, 2013.
OUSTERHOUT, J.K.: ``Scheduling Techniques for Concurrent Systems,'' Proc. Third Int'l
Conf. on Distrib. Computing Systems, IEEE, pp. 22Â­30, 1982.
OUSTERHOUT, J.L.: ``Why Threads are a Bad Idea (for Most Purposes),'' Presentation at
Proc. USENIX Winter Conf., USENIX, 1996.
PARK,  S.,  and  SHEN,      K.:  ``FIOS:  A  Fair,  Efficient   Flash  I/O  Scheduler,''  Proc.  10th
USENIX Conf. on File and Storage Tech., USENIX, pp. 155Â­170, 2012.
PATE, S.D.: UNIX Filesystems: Evolution, Design, and Implementation, Hoboken, NJ: John
Wiley & Sons, 2003.
PATHAK, A., HU, Y.C., and ZHANG, M.: ``Where Is the Energy Spent inside My App? Fine
Grained Energy Accounting on Smartphones with Eprof,'' Proc. Seventh European
Conf. on Computer Systems (EUROSYS), ACM, 2012.
PATTERSON, D., and HENNESSY, J.: Computer Organization and Design, 5th ed., Burling-
ton, MA: Morgan Kaufman, 2013.



1060                 READING LIST AND BIBLIOGRAPHY                                 CHAP. 13
PATTERSON, D.A., GIBSON, G., and KATZ, R.: ``A Case for Redundant Arrays of Inexpen-
sive Disks (RAID),'' Proc. ACM SIGMOD Int'l. Conf. on Management of Data, ACM,
pp. 109Â­166, 1988.
PEARCE, M., ZEADALLY, S., and HUNT, R.: ``Virtualization: Issues, Security Threats, and
Solutions,'' Computing Surveys, ACM, vol. 45, Art. 17, Feb. 2013.
PENNEMAN, N., KUDINSKLAS, D., RAWSTHORNE, A., DE SUTTER, B., and DE BOSS-
CHERE, K.: ``Formal Virtualization Requirements for the ARM Architecture,'' J. Sys-
tem Architecture: the EUROMICRO J., vol. 59, pp. 144Â­154, March 2013.
PESERICO,  E.:  ``Online  Paging  with  Arbitrary  Associativity,''  Proc.  14th  ACM-SIAM
Symp. on Discrete Algorithms, ACM, pp. 555Â­564, 2003.
PETERSON, G.L.: ``Myths about the Mutual Exclusion Problem,'' Information Processing
Letters, vol. 12, pp. 115Â­116, June 1981.
PETRUCCI, V., and LOQUES, O.: ``Lucky Scheduling for Energy-Efficient Heterogeneous
Multi-core Systems,'' Proc. USENIX Workshop on Power-Aware Computing and Sys-
tems, USENIX, 2012.
PETZOLD, C.: Programming Windows, 6th ed., Redmond, WA: Microsoft Press, 2013.
PIKE, R., PRESOTTO, D., THOMPSON, K., TRICKEY, H., and WINTERBOTTOM, P.:
``The Use of Name Spaces in Plan 9,'' Proc. 5th ACM SIGOPS European Workshop,
ACM, pp. 1Â­5, 1992.
POPEK, G.J., and GOLDBERG, R.P.: ``Formal Requirements for Virtualizable Third Gener-
ation Architectures,'' Commun. of the ACM, vol. 17, pp. 412Â­421, July 1974.
PORTNOY, M.: ``Virtualization Essentials,'' Hoboken, NJ: John Wiley & Sons, 2012.
PRABHAKAR, R., KANDEMIR, M., and JUNG, M: ``Disk-Cache and Parallelism Aware
I/O Scheduling to Improve Storage System Performance,'' Proc. 27th Int'l Symp. on
Parallel and Distributed Computing, IEEE, pp. 357Â­368, 2013.
PRECHELT, L.: ``An Empirical Comparison of Seven Programming Languages,'' Com-
puter, vol. 33, pp. 23Â­29, Oct. 2000.
PYLA, H., and VARADARAJAN, S.: ``Transparent Runtime Deadlock Elimination,'' Proc.
21st Int'l Conf. on Parallel Architectures and Compilation Techniques, ACM, pp.
477Â­478, 2012.
QUIGLEY, E.: UNIX Shells by Example, 4th ed., Upper Saddle River, NJ: Prentice Hall,
2004.
RAJGARHIA, A., and GEHANI, A.: ``Performance and Extension of User Space File Sys-
tems,'' Proc. 2010 ACM Symp. on Applied Computing, ACM, pp. 206Â­213, 2010.
RASANEH, S., and BANIROSTAM, T.: ``A New Structure and Routing Algorithm for Opti-
mizing Energy Consumption in Wireless Sensor Network for Disaster Management,''
Proc. Fourth Int'l Conf. on Intelligent Systems, Modelling, and Simulation, IEEE, pp.
481Â­485.
RAVINDRANATH, L., PADHYE, J., AGARWAL, S., MAHAJAN, R., OBERMILLER, I., and
SHAYANDEH, S.: ``AppInsight: Mobile App Performance Monitoring in the Wild,''
Proc. 10th Symp. on Operating Systems Design and Implementation, USENIX, pp.
107Â­120, 2012.



SEC. 13.2                ALPHABETICAL BIBLIOGRAPHY                               1061
RECTOR, B.E., and NEWCOMER, J.M.: Win32 Programming, Boston: Addison-Wesley,
1997.
REEVES, R.D.: Windows 7 Device Driver, Boston: Addison-Wesley, 2010.
RENZELMANN, M.J., KADAV, A., and SWIFT, M.M.: ``SymDrive: Testing Drivers without
Devices,''   Proc.  10th  Symp.  on     Operating   Systems  Design    and  Implementation,
USENIX, pp. 279Â­292, 2012.
RIEBACK, M.R., CRISPO, B., and TANENBAUM, A.S.: ``Is Your Cat Infected with a Com-
puter Virus?,'' Proc. Fourth IEEE Int'l Conf. on Pervasive Computing and Commun.,
IEEE, pp. 169Â­179, 2006.
RITCHIE, D.M., and THOMPSON, K.: ``The UNIX Timesharing System,'' Commun. of the
ACM, vol. 17, pp. 365Â­375, July 1974.
RIVEST, R.L., SHAMIR, A., and ADLEMAN, L.: ``On a Method for Obtaining Digital Sig-
natures and Public Key Cryptosystems,'' Commun. of the ACM, vol. 21, pp. 120Â­126,
Feb. 1978.
RIZZO, L.: ``Netmap: A Novel Framework for Fast Packet I/O,'' Proc. USENIX Ann. Tech.
Conf., USENIX, 2012.
ROBBINS, A: UNIX in a Nutshell, Sebastopol, CA: O'Reilly & Associates, 2005.
RODRIGUES, E.R., NAVAUX, P.O., PANETTA, J., and MENDES, C.L.: ``A New Technique
for Data Privatization in User-Level Threads and Its Use in Parallel Applications,''
Proc. 2010 Symp. on Applied Computing, ACM, pp. 2149Â­2154, 2010.
RODRIGUEZ-LUJAN,    I.,   BAILADOR,     G.,  SANCHEZ-AVILA,       C.,  HERRERO,  A.,    and
VIDAL-DE-MIGUEL, G.: ``Analysis of Pattern Recognition and Dimensionality Reduc-
tion Techniques for Odor Biometrics,'' vol. 52, pp. 279Â­289, Nov. 2013.
ROSCOE, T., ELPHINSTONE, K., and HEISER, G.: ``Hype and Virtue,'' Proc. 11th Work-
shop on Hot Topics in Operating Systems, USENIX, pp. 19Â­24, 2007.
ROSENBLUM, M., BUGNION, E., DEVINE, S. and HERROD, S.A.: ``Using the SIMOS
Machine Simulator to Study Complex Computer Systems,'' ACM Trans. Model. Com-
put. Simul., vol. 7, pp. 78Â­103, 1997.
ROSENBLUM, M., and GARFINKEL, T.: ``Virtual Machine Monitors: Current Technology
and Future Trends,'' Computer, vol. 38, pp. 39Â­47, May 2005.
ROSENBLUM, M., and OUSTERHOUT, J.K.: ``The Design and Implementation of a Log-
Structured File System,'' Proc. 13th Symp. on Operating Systems Principles, ACM, pp.
1Â­15, 1991.
ROSSBACH, C.J., CURREY, J., SILBERSTEIN, M., RAY, and B., WITCHEL, E.: ``PTask:
Operating System Abstractions to Manage GPUs as Compute Devices,'' Proc. 23rd
Symp. of Operating Systems Principles, ACM, pp. 233Â­248, 2011.
ROSSOW, C., ANDRIESSE, D., WERNER, T., STONE-GROSS, B., PLOHMANN, D., DIET-
RICH, C.J., and BOS, H.: ``SoK: P2PWNED--Modeling and Evaluating the Resilience
of  Peer-to-Peer    Botnets,''  Proc.  IEEE  Symp.  on  Security  and  Privacy,  IEEE,  pp.
97Â­111, 2013.



1062                       READING LIST AND BIBLIOGRAPHY                                CHAP. 13
ROZIER, M., ABROSSIMOV, V., ARMAND, F., BOULE, I., GIEN, M., GUILLEMONT, M.,
HERRMANN, F., KAISER, C., LEONARD, P., LANGLOIS, S., and NEUHAUSER, W.:
``Chorus Distributed Operating Systems,'' Computing Systems, vol. 1, pp. 305Â­379,
Oct. 1988.
RUSSINOVICH,        M.,  and  SOLOMON,         D.:  Windows  Internals,      Part  1,  Redmond,  WA:
Microsoft Press, 2012.
RYZHYK, L., CHUBB, P., KUZ, I., LE SUEUR, E., and HEISER, G.: ``Automatic Device
Driver Synthesis with Termite,'' Proc. 22nd Symp. on Operating Systems Principles,
ACM, 2009.
RYZHYK,      L.,  KEYS,  J.,  MIRLA,      B.,  RAGNUNATH,         A.,  VIJ,  M.,   and  HEISER,  G.:
``Improved Device Driver Reliability through Hardware Verification Reuse,'' Proc.
16th Int'l Conf. on Arch. Support for Prog. Lang. and Operating Systems, ACM, pp.
133Â­134, 2011.
SACKMAN, H., ERIKSON, W.J., and GRANT, E.E.: ``Exploratory Experimental Studies
Comparing Online and Offline Programming Performance,'' Commun. of the ACM,
vol. 11, pp. 3Â­11, Jan. 1968.
SAITO,  Y.,  KARAMANOLIS,            C.,  KARLSSON,  M.,     and  MAHALINGAM,           M.:  ``Taming
Aggressive Replication in the Pangea Wide-Area File System,'' Proc. Fifth Symp. on
Operating Systems Design and Implementation, USENIX, pp. 15Â­30, 2002.
SALOMIE T.-I., SUBASU, I.E., GICEVA, J., and ALONSO, G.: ``Database Engines on Multi-
cores: Why Parallelize When You can Distribute?,'' Proc. Sixth European Conf. on
Computer Systems (EUROSYS), ACM, pp. 17Â­30, 2011.
SALTZER, J.H.: ``Protection and Control of Information Sharing in MULTICS,'' Commun.
of the ACM, vol. 17, pp. 388Â­402, July 1974.
SALTZER, J.H., and KAASHOEK, M.F.: Principles of Computer System Design: An Intro-
duction, Burlington, MA: Morgan Kaufmann, 2009.
SALTZER,     J.H.,  REED,     D.P.,  and  CLARK,    D.D.:    ``End-to-End    Arguments  in   System
Design,'' ACM Trans. on Computer Systems, vol. 2, pp. 277Â­288, Nov. 1984.
SALTZER, J.H., and SCHROEDER, M.D.: ``The Protection of Information in Computer
Systems,'' Proc. IEEE, vol. 63, pp. 1278Â­1308, Sept. 1975.
SALUS, P.H.: ``UNIX At 25,'' Byte, vol. 19, pp. 75Â­82, Oct. 1994.
SASSE, M.A.: ``Red-Eye Blink, Bendy Shuffle, and the Yuck Factor: A User Experience of
Biometric Airport Systems,'' IEEE Security and Privacy, vol. 5, pp. 78Â­81, May/June
2007.
SCHEIBLE, J.P.: ``A Survey of Storage Options,'' Computer, vol. 35, pp. 42Â­46, Dec. 2002.
SCHINDLER, J., SHETE, S., and SMITH, K.A.: ``Improving Throughput for Small Disk
Requests with Proximal I/O,'' Proc. Ninth USENIX Conf. on File and Storage Tech.,
USENIX, pp. 133Â­148, 2011.
SCHWARTZ, C., PRIES, R., and TRAN-GIA, P.: ``A Queuing Analysis of an Energy-Saving
Mechanism in Data Centers,'' Proc. 2012 Int'l Conf. on Inf. Networking, IEEE, pp.
70Â­75, 2012.



SEC. 13.2                  ALPHABETICAL BIBLIOGRAPHY                                      1063
SCOTT, M., LEBLANC, T., and MARSH, B.: ``Multi-Model Parallel Programming in Psy-
che,'' Proc. Second ACM Symp. on Principles and Practice of Parallel Programming,
ACM, pp. 70Â­78, 1990.
SEAWRIGHT, L.H., and MACKINNON, R.A.: ``VM/370--A Study of Multiplicity and Use-
fulness,'' IBM Systems J., vol. 18, pp. 4Â­17, 1979.
SEREBRYANY, K., BRUENING, D., POTAPENKO, A., and VYUKOV, D.: ``AddressSanitizer:
A  Fast    Address  Sanity  Checker,''    Proc.  USENIX  Ann.        Tech.  Conf.,  USENIX,  pp.
28Â­28, 2013.
SEVERINI, M., SQUARTINI, S., and PIAZZA, F.: ``An Energy Aware Approach for Task
Scheduling in Energy-Harvesting Sensor Nodes,'' Proc. Ninth Int'l Conf. on Advances
in Neural Networks, Springer-Verlag, pp. 601Â­610, 2012.
SHEN, K., SHRIRAMAN, A., DWARKADAS, S., ZHANG, X., and CHEN, Z.: ``Power Con-
tainers: An OS Facility for Fine-Grained Power and Energy Management on Multicore
Servers,'' Proc. 18th Int'l Conf. on Arch. Support for Prog. Lang. and Operating Sys-
tems, ACM, pp. 65Â­76, 2013.
SILBERSCHATZ, A., GALVIN, P.B., and GAGNE, G.: Operating System Concepts, 9th ed.,
Hoboken, NJ: John Wiley & Sons, 2012.
SIMON, R.J.: Windows NT Win32 API SuperBible, Corte Madera, CA: Sams Publishing,
1997.
SITARAM, D., and DAN, A.: Multimedia Servers, Burlington, MA: Morgan Kaufman, 2000.
SLOWINSKA, A., STANESCU, T., and BOS, H.: ``Body Armor for Binaries: Preventing
Buffer Overflows Without Recompilation,'' Proc. USENIX Ann. Tech. Conf., USENIX,
2012.
SMALDONE, S., WALLACE, G., and HSU, W.: ``Efficiently Storing Virtual Machine Back-
ups,'' Proc. Fifth USENIX Conf. on Hot Topics in Storage and File Systems, USENIX,
2013.
SMITH, D,K., and ALEXANDER, R.C.: Fumbling the Future: How Xerox Invented, Then
Ignored, the First Personal Computer, New York: William Morrow, 1988.
SNIR, M., OTTO, S.W., HUSS-LEDERMAN, S., WALKER, D.W., and DONGARRA, J.: MPI:
The Complete Reference Manual, Cambridge, MA: M.I.T. Press, 1996.
SNOW, K., MONROSE, F., DAVI, L., DMITRIENKO, A., LIEBCHEN, C., and SADEGHI,
A.-R.:     ``Just-In-Time  Code   Reuse:  On     the  Effectiveness  of     Fine-Grained  Address
Space Layout Randomization,'' Proc. IEEE Symp. on Security and Privacy, IEEE, pp.
574Â­588, 2013.
SOBELL, M.: A Practical Guide to Fedora and Red Hat Enterprise Linux, 7th ed., Upper
Saddle River, NJ: Prentice-Hall, 2014.
SOORTY, B.: ``Evaluating IPv6 in Peer-to-peer Gigabit Ethernet for UDP Using Modern
Operating  Systems,''      Proc.  2012    Symp.  on   Computers      and    Commun.,  IEEE,  pp.
534Â­536, 2012.
SPAFFORD, E., HEAPHY, K., and FERBRACHE, D.: Computer Viruses, Arlington, VA:
ADAPSO, 1989.



1064                READING LIST AND BIBLIOGRAPHY                              CHAP. 13
STALLINGS, W.: Operating Systems, 7th ed., Upper Saddle River, NJ: Prentice Hall, 2011.
STAN,  M.R.,  and  SKADRON,  K:  ``Power-Aware  Computing,''  Computer,      vol.  36,    pp.
35Â­38, Dec. 2003.
STEINMETZ, R., and NAHRSTEDT, K.: Multimedia: Computing, Communications and
Applications, Upper Saddle River, NJ: Prentice Hall, 1995.
STEVENS, R.W., and RAGO, S.A.: ``Advanced Programming in the UNIX Environment,''
Boston: Addison-Wesley, 2013.
STOICA, R., and AILAMAKI, A.: ``Enabling Efficient OS Paging for Main-Memory OLTP
Databases,'' Proc. Ninth Int'l Workshop on Data Management on New Hardware,
ACM, Art. 7. 2013.
STONE, H.S., and BOKHARI, S.H.: ``Control of Distributed Processes,'' Computer, vol. 11,
pp. 97Â­106, July 1978.
STORER, M.W., GREENAN, K.M., MILLER, E.L., and VORUGANTI, K.: ``POTSHARDS:
Secure Long-Term Storage without Encryption,'' Proc. USENIX Ann. Tech. Conf.,
USENIX, pp. 143Â­156, 2007.
STRATTON, J.A., RODRIGUES, C., SUNG, I.-J., CHANG, L.-W., ANSSARI, N., LIU, G.,
HWU, W.-M., and OBEID, N.: ``Algorithm and Data Optimization Techniques for Scal-
ing to Massively Threaded Systems,'' Computer, vol. 45, pp. 26Â­32, Aug. 2012.
SUGERMAN, J., VENKITACHALAM , G., and LIM, B.-H: ``Virtualizing I/O Devices on
VMware Workstation's Hosted Virtual Machine Monitor,'' Proc. USENIX Ann. Tech.
Conf., USENIX, pp. 1Â­14, 2001.
SULTANA, S., and BERTINO, E.: ``A File Provenance System,'' Proc. Third Conf. on Data
and Appl. Security and Privacy, ACM, pp. 153Â­156, 2013.
SUN, Y., CHEN, M., LIU, B., and MAO, S.: ``FAR: A Fault-Avoidance Routing Method for
Data Center Networks with Regular Topology,'' Proc. Ninth ACM/IEEE Symp. for
Arch. for Networking and Commun. Systems, ACM, pp. 181Â­190, 2013.
SWANSON, S., and CAULFIELD, A.M.: ``Refactor, Reduce, Recycle: Restructuring the I/O
Stack for the Future of Storage,'' Computer, vol. 46, pp. 52Â­59, Aug. 2013.
TAIABUL HAQUE, S.M., WRIGHT, M., and SCIELZO, S.: ``A Study of User Password
Strategy for Multiple Accounts,'' Proc. Third Conf. on Data and Appl. Security and
Privacy, ACM, pp. 173Â­176, 2013.
TALLURI, M., HILL, M.D., and KHALIDI, Y.A.: ``A New Page Table for 64-Bit Address
Spaces,'' Proc. 15th Symp. on Operating Systems Principles, ACM, pp. 184Â­200,
1995.
TAM, D., AZIMI, R., and STUMM, M.: ``Thread Clustering: Sharing-Aware Scheduling,''
Proc. Second European Conf. on Computer Systems (EUROSYS), ACM, pp. 47Â­58,
2007.
TANENBAUM, A.S., and AUSTIN, T.: Structured Computer Organization, 6th ed., Upper
Saddle River, NJ: Prentice Hall, 2012.
TANENBAUM, A.S., HERDER, J.N., and BOS, H.: ``File Size Distribution on UNIX Sys-
tems: Then and Now,'' ACM SIGOPS Operating Systems Rev., vol. 40, pp. 100Â­104,
Jan. 2006.



SEC. 13.2            ALPHABETICAL BIBLIOGRAPHY                                         1065
TANENBAUM, A.S., VAN RENESSE, R., VAN STAVEREN, H., SHARP, G.J., MULLENDER,
S.J., JANSEN, J., and VAN ROSSUM, G.: ``Experiences with the Amoeba Distributed
Operating System,'' Commun. of the ACM, vol. 33, pp. 46Â­63, Dec. 1990.
TANENBAUM, A.S., and VAN STEEN, M.R.: Distributed Systems, 2nd ed., Upper Saddle
River, NJ: Prentice Hall, 2007.
TANENBAUM, A.S., and WETHERALL, D.J: Computer Networks, 5th ed., Upper Saddle
River, NJ: Prentice Hall, 2010.
TANENBAUM, A.S., and WOODHULL, A.S.: Operating Systems: Design and Implementa-
tion, 3rd ed., Upper Saddle River, NJ: Prentice Hall, 2006.
TARASOV,   V.,  HILDEBRAND,       D.,  KUENNING,  G.,  and  ZADOK,     E.:  ``Virtual  Machine
Workloads: The Case for New NAS Benchmarks,'' Proc. 11th Conf. on File and Stor-
age Technologies, USENIX, 2013.
TEORY, T.J.: ``Properties of Disk Scheduling Policies in Multiprogrammed Computer Sys-
tems,'' Proc. AFIPS Fall Joint Computer Conf., AFIPS, pp. 1Â­11, 1972.
THEODOROU, D., MAK, R.H., KEIJSER, J.J., and SUERINK, R.: ``NRS: A System for
Automated Network Virtualization in IAAS Cloud Infrastructures,'' Proc. Seventh Int'l
Workshop on Virtualization Tech. in Distributed Computing, ACM, pp. 25Â­32, 2013.
THIBADEAU, R.: ``Trusted Computing for Disk Drives and Other Peripherals,'' IEEE Secu-
rity and Privacy, vol. 4, pp. 26Â­33, Sept./Oct. 2006.
THOMPSON, K.: ``Reflections on Trusting Trust,'' Commun. of the ACM, vol. 27, pp.
761Â­763, Aug. 1984.
TIMCENKO, V., and DJORDJEVIC, B.: ``The Comprehensive Performance Analysis of
Striped Disk Array Organizations--RAID-0,'' Proc. 2013 Int'l Conf. on Inf. Systems
and Design of Commun., ACM, pp. 113Â­116, 2013.
TRESADERN, P., COOTES, T., POH, N., METEJKA, P., HADID, A., LEVY, C., MCCOOL,
C., and MARCEL, S.: ``Mobile Biometrics: Combined Face and Voice Verification for a
Mobile Platform,'' IEEE Pervasive Computing, vol. 12, pp. 79Â­87, Jan. 2013.
TSAFRIR, D., ETSION, Y., FEITELSON, D.G., and KIRKPATRICK, S.: ``System Noise, OS
Clock Ticks, and Fine-Grained Parallel Applications,'' Proc. 19th Ann. Int'l Conf. on
Supercomputing, ACM, pp. 303Â­312, 2005.
TUAN-ANH, B., HUNG, P.P., and HUH, E.-N.: ``A Solution of Thin-Thick Client Collabora-
tion for Data Distribution and Resource Allocation in Cloud Computing,'' Proc. 2013
Int'l Conf. on Inf. Networking, IEEE, pp. 238Â­243, 2103.
TUCKER,    A.,  and  GUPTA,  A.:  ``Process  Control  and  Scheduling  Issues  for     Multipro-
grammed Shared-Memory Multiprocessors,'' Proc. 12th Symp. on Operating Systems
Principles, ACM, pp. 159Â­166, 1989.
UHLIG, R., NAGLE, D., STANLEY, T., MUDGE, T., SECREST, S., and BROWN, R.: ``Design
Tradeoffs for Software-Managed TLBs,'' ACM Trans. on Computer Systems, vol. 12,
pp. 175Â­205, Aug. 1994.
UHLIG, R. NEIGER, G., RODGERS, D., SANTONI, A.L., MARTINS, F.C.M., ANDERSON,
A.V., BENNET, S.M., KAGI, A., LEUNG, F.H., and SMITH, L.: ``Intel Virtualization
Technology,'' Computer, vol. 38, pp. 48Â­56, 2005.



1066                    READING LIST AND BIBLIOGRAPHY                                 CHAP. 13
UR, B., KELLEY, P.G., KOMANDURI, S., LEE, J., MAASS, M., MAZUREK, M.L., PAS-
     SARO, T., SHAY, R., VIDAS, T., BAUER, L., CHRISTIN, N., and CRANOR, L.F.: ``How
     Does Your Password Measure Up? The Effect of Strength Meters on Password Cre-
     ation,'' Proc. 21st USENIX Security Symp., USENIX, 2012.
VAGHANI, S.B.: ``Virtual Machine File System,'' ACM SIGOPS Operating Systems Rev.,
     vol. 44, pp. 57Â­70, 2010.
VAHALIA, U.: UNIX Internals--The New Frontiers, Upper Saddle River, NJ: Prentice Hall,
     2007.
VAN DOORN, L.: The Design and Application of an Extensible Operating System, Capelle
     a/d Ijssel: Labyrint Publications, 2001.
VAN MOOLENBROEK, D.C., APPUSWAMY, R., and TANENBAUM, A.S.: ``Integrated Sys-
     tem and Process Crash Recovery in the Loris Storage Stack,'' Proc. Seventh Int'l Conf.
     on Networking, Architecture, and Storage, IEEE, pp. 1Â­10, 2012.
VAN 'T NOORDENDE, G., BALOGH, A., HOFMAN, R., BRAZIER, F.M.T., and TANEN-
     BAUM, A.S.: ``A Secure Jailing System for Confining Untrusted Applications,'' Proc.
     Second Int'l Conf. on Security and Cryptography, INSTICC, pp. 414Â­423, 2007.
VASWANI, R., and ZAHORJAN, J.: ``The Implications of Cache Affinity on Processor
     Scheduling for Multiprogrammed Shared-Memory Multiprocessors,'' Proc. 13th Symp.
     on Operating Systems Principles, ACM, pp. 26Â­40, 1991.
VAN   DER   VEEN,  V.,  DDUTT-SHARMA,          N.,  CAVALLARO,  L.,   and  BOS,  H.:  ``Memory
     Errors: The Past, the Present, and the Future,'' Proc. 15th Int'l Conf. on Research in
     Attacks, Intrusions, and Defenses, Berlin: Springer-Verlag, pp. 86Â­106, 2012.
VENKATACHALAM, V., and FRANZ, M.: ``Power Reduction Techniques for Microproces-
     sor Systems,'' Computing Surveys, vol. 37, pp. 195Â­237, Sept. 2005.
VIENNOT, N., NAIR, S., and NIEH, J.: ``Transparent Mutable Replay for Multicore Debug-
     ging and Patch Validation,'' Proc. 18th Int'l Conf. on Arch. Support for Prog. Lang.
     and Operating Systems, ACM, 2013.
VINOSKI, S.: ``CORBA: Integrating Diverse Applications within Distributed Heteroge-
     neous  Environments,''     IEEE  Communications  Magazine,      vol.  35,  pp.  46Â­56,  Feb.
     1997.
VISCAROLA, P.G, MASON, T., CARIDDI, M., RYAN, B., and NOONE, S.: Introduction to
     the Windows Driver Foundation Kernel-Mode Framework, Amherst, NH: OSR Press,
     2007.
VMWARE, Inc.: ``Achieving a Million I/O Operations per Second from a Single VMware
     vSphere 5.0 Host,'' http://www.vmware.com/files/pdf/1M-iops-perf-vsphere5.pdf, 2011.
VOGELS, W.: ``File System Usage in Windows NT 4.0,'' Proc. 17th Symp. on Operating
     Systems Principles, ACM, pp. 93Â­109, 1999.
VON BEHREN, R., CONDIT, J., and BREWER, E.: ``Why Events Are A Bad Idea (for High-
     Concurrency Servers),'' Proc. Ninth Workshop on Hot Topics in Operating Systems,
     USENIX, pp. 19Â­24, 2003.



SEC. 13.2                ALPHABETICAL BIBLIOGRAPHY                                       1067
VON EICKEN, T., CULLER, D., GOLDSTEIN, S.C., and SCHAUSER, K.E.: ``Active Mes-
sages: A Mechanism for Integrated Communication and Computation,'' Proc. 19th
Int'l Symp. on Computer Arch., ACM, pp. 256Â­266, 1992.
VOSTOKOV, D.: Windows Device Drivers: Practical Foundations, Opentask, 2009.
VRABLE, M., SAVAGE, S., and VOELKER, G.M.: ``BlueSky: A Cloud-Backed File System
for the Enterprise,'' Proc. 10th USENIX Conf. on File and Storage Tech., USENIX, pp.
124Â­250, 2012.
WAHBE, R., LUCCO, S., ANDERSON, T., and GRAHAM, S.: ``Efficient Software-Based
Fault      Isolation,''  Proc.  14th  Symp.  on  Operating   Systems  Principles,  ACM,      pp.
203Â­216, 1993.
WALDSPURGER, C.A.: ``Memory Resource Management in VMware ESX Server,'' ACM
SIGOPS Operating System Rev., vol 36, pp. 181Â­194, Jan. 2002.
WALDSPURGER,  C.A.,      and    ROSENBLUM,       M.:  ``I/O  Virtualization,''  Commun.  of  the
ACM, vol. 55, pp. 66Â­73, 2012.
WALDSPURGER, C.A., and WEIHL, W.E.: ``Lottery Scheduling: Flexible Proportional-
Share Resource Management,'' Proc. First Symp. on Operating Systems Design and
Implementation, USENIX, pp. 1Â­12, 1994.
WALKER, W., and CRAGON, H.G.: ``Interrupt Processing in Concurrent Processors,'' Com-
puter, vol. 28, pp. 36Â­46, June 1995.
WALLACE, G., DOUGLIS, F., QIAN, H., SHILANE, P., SMALDONE, S., CHAMNESS, M.,
and HSU., W.: ``Characteristics of Backup Workloads in Production Systems,'' Proc.
10th USENIX Conf. on File and Storage Tech., USENIX, pp. 33Â­48, 2012.
WANG, L., KHAN, S.U., CHEN, D., KOLODZIEJ, J., RANJAN, R., XU, C.-Z., and ZOMAYA,
A.: ``Energy-Aware Parallel Task Scheduling in a Cluster,'' Future Generation Com-
puter Systems, vol. 29, pp. 1661Â­1670, Sept. 2013b.
WANG, X., TIPPER, D., and KRISHNAMURTHY, P.: ``Wireless Network Virtualization,''
Proc. 2013 Int'l Conf. on Computing, Networking, and Commun., IEEE, pp. 818Â­822,
2013a.
WANG, Y. and LU, P.: ``DDS: A Deadlock Detection-Based Scheduling Algorithm for
Workflow Computations in HPC Systems with Storage Constraints,'' Parallel Comput.,
vol. 39, pp. 291Â­305, August 2013.
WATSON, R., ANDERSON, J., LAURIE, B., and KENNAWAY, K.: ``A Taste of Capsicum:
Practical Capabilities for UNIX,'' Commun. of the ACM, vol. 55, pp. 97Â­104, March
2013.
WEI, M., GRUPP, L., SPADA, F.E., and SWANSON, S.: ``Reliably Erasing Data from Flash-
Based Solid State Drives,'' Proc. Ninth USENIX Conf. on File and Storage Tech.,
USENIX, pp. 105Â­118, 2011.
WEI, Y.-H., YANG, C.-Y., KUO, T.-W., HUNG, S.-H., and CHU, Y.-H.: ``Energy-Efficient
Real-Time Scheduling of Multimedia Tasks on Multi-core Processors,'' Proc. 2010
Symp. on Applied Computing, ACM, pp. 258Â­262, 2010.



1068                READING LIST AND BIBLIOGRAPHY                                  CHAP. 13
WEISER, M., WELCH, B., DEMERS, A., and SHENKER, S.: ``Scheduling for Reduced CPU
Energy,''    Proc.  First  Symp.      on  Operating  Systems  Design  and  Implementation,
USENIX, pp. 13Â­23, 1994.
WEISSEL, A.: Operating System Services for Task-Specific Power Management: Novel
Approaches to Energy-Aware Embedded Linux, AV Akademikerverlag, 2012.
WENTZLAFF, D., GRUENWALD III, C., BECKMANN, N., MODZELEWSKI, K., BELAY,
A., YOUSEFF, L., MILLER, J., and AGARWAL, A.: ``An Operating System for Multi-
core and Clouds: Mechanisms and Implementation,'' Proc. Cloud Computing, ACM,
June 2010.
WENTZLAFF, D., JACKSON, C.J., GRIFFIN, P., and AGARWAL, A.: ``Configurable Fine-
grain Protection for Multicore Processor Virtualization,'' Proc. 39th Int'l Symp. on
Computer Arch., ACM, pp. 464Â­475, 2012.
WHITAKER, A., COX, R.S., SHAW, M, and GRIBBLE, S.D.: ``Rethinking the Design of Vir-
tual Machine Monitors,'' Computer, vol. 38, pp. 57Â­62, May 2005.
WHITAKER, A., SHAW, M, and GRIBBLE, S.D.: ``Scale and Performance in the Denali Iso-
lation Kernel,'' ACM SIGOPS Operating Systems Rev., vol. 36, pp. 195Â­209, Jan.
2002.
WILLIAMS, D., JAMJOOM, H., and WEATHERSPOON, H.: ``The Xen-Blanket: Virtualize
Once,   Run  Everywhere,''      Proc.     Seventh   European  Conf.  on  Computer  Systems
(EUROSYS), ACM, 2012.
WIRTH, N.: ``A Plea for Lean Software,'' Computer, vol. 28, pp. 64Â­68, Feb. 1995.
WU, N., ZHOU, M., and HU, U.: ``One-Step Look-Ahead Maximally Permissive Deadlock
Control of AMS by Using Petri Nets,'' ACM Trans. Embed. Comput. Syst. ,#, vol. 12,
Art. 10, pp. 10:1Â­10:23, Jan. 2013.
WULF, W.A., COHEN, E.S., CORWIN, W.M., JONES, A.K., LEVIN, R., PIERSON, C., and
POLLACK, F.J.: ``HYDRA: The Kernel of a Multiprocessor Operating System,'' Com-
mun. of the ACM, vol. 17, pp. 337Â­345, June 1974.
YANG, J., TWOHEY, P., ENGLER, D., and MUSUVATHI, M.: ``Using Model Checking to
Find Serious File System Errors,'' ACM Trans. on Computer Systems, vol. 24, pp.
393Â­423, 2006.
YEH, T., and CHENG, W.: ``Improving Fault Tolerance through Crash Recovery,'' Proc.
2012 Int'l Symp. on Biometrics and Security Tech., IEEE, pp. 15Â­22, 2012.
YOUNG,  M.,  TEVANIAN,     A.,  Jr.,  RASHID,  R.,   GOLUB,   D.,  EPPINGER,  J.,  CHEW,  J.,
BOLOSKY, W., BLACK, D., and BARON, R.: ``The Duality of Memory and Communi-
cation in the Implementation of a Multiprocessor Operating System,'' Proc. 11th Symp.
on Operating Systems Principles, ACM, pp. 63Â­76, 1987.
YUAN, D., LEWANDOWSKI, C., and CROSS, B.: ``Building a Green Unified Computing IT
Laboratory through Virtualization,'' J. Computing Sciences in Colleges, vol. 28, pp.
76Â­83, June 2013.
YUAN, J., JIANG, X., ZHONG, L., and YU, H.: ``Energy Aware Resource Scheduling Algo-
rithm for Data Center Using Reinforcement Learning,'' Proc. Fifth Int'l Conf. on Intel-
ligent Computation Tech. and Automation, IEEE, pp. 435Â­438, 2012.



SEC. 13.2                 ALPHABETICAL BIBLIOGRAPHY                                   1069
YUAN, W., and NAHRSTEDT, K.: ``Energy-Efficient CPU Scheduling for Multimedia Sys-
tems,'' ACM Trans. on Computer Systems, ACM, vol. 24, pp. 292Â­331, Aug. 2006.
ZACHARY, G.P.: Showstopper, New York: Maxwell Macmillan, 1994.
ZAHORJAN, J., LAZOWSKA, E.D., and EAGER, D.L.: ``The Effect of Scheduling Disci-
pline on Spin Overhead in Shared Memory Parallel Systems,'' IEEE Trans. on Parallel
and Distr. Systems, vol. 2, pp. 180Â­198, April 1991.
ZEKAUSKAS, M.J., SAWDON, W.A., and BERSHAD, B.N.: ``Software Write Detection for a
Distributed Shared Memory,'' Proc. First Symp. on Operating Systems Design and
Implementation, USENIX, pp. 87Â­100, 1994.
ZHANG, C., WEI, T., CHEN, Z., DUAN, L., SZEKERES, L., MCCAMANT, S., SONG, D., and
ZOU, W.: ``Practical Control Flow Integrity and Randomization for Binary Executa-
bles,'' Proc. IEEE Symp. on Security and Privacy, IEEE, pp. 559Â­573, 2013b.
ZHANG, F., CHEN, J., CHEN, H., and ZANG, B.: ``CloudVisor: Retrofitting Protection of
Virtual Machines in Multi-Tenant Cloud with Nested Virtualization,'' Proc. 23rd Symp.
on Operating Systems Principles, ACM, 2011.
ZHANG, M., and SEKAR, R.: ``Control Flow Integrity for COTS Binaries,'' Proc. 22nd
USENIX Security Symp., USENIX, pp. 337Â­352, 2013.
ZHANG,  X.,  DAVIS,  K.,  and  JIANG,  S.:  ``iTransformer:  Using  SSD  to  Improve  Disk
Scheduling for High-Performance I/O,'' Proc. 26th Int'l Parallel and Distributed Pro-
cessing Symp., IEEE, pp. 715-726, 2012b.
ZHANG, Y., LIU, J., and KANDEMIR, M.: ``Software-Directed Data Access Scheduling for
Reducing Disk Energy Consumption,'' Proc. 32nd Int'l Conf. on Distributed Computer
Systems, IEEE, pp. 596Â­605, 2012a.
ZHANG,  Y.,  SOUNDARARAJAN,     G.,    STORER,   M.W.,  BAIRAVASUNDARAM,     L.,      SUB-
BIAH, S., ARPACI-DUSSEAU, A.C., and ARPACI-DUSSEAU, R.H.: ``Warming Up Stor-
age-Level Caches with Bonfire,'' Proc. 11th Conf. on File and Storage Technologies,
USENIX, 2013a.
ZHENG, H., ZHANG, X., WANG, E., WU, N., and DONG, X.: ``Achieving High Reliability
on Linux for K2 System,'' Proc. 11th Int'l Conf. on Computer and Information Sci-
ence, IEEE, pp. 107Â­112, 2012.
ZHOU, B., KULKARNI, M., and BAGCHI, S.: ``ABHRANTA: Locating Bugs that Manifest
at Large System Scales,'' Proc. Eighth USENIX Workshop on Hot Topics in System
Dependability, USENIX, 2012.
ZHURAVLEV, S., SAEZ, J.C., BLAGODUROV, S., FEDOROVA, A., and PRIETO, M.: ``Sur-
vey of scheduling techniques for addressing shared resources in multicore processors,''
Computing Surveys, ACM , vol 45, Number 1, Art. 4, 2012.
ZOBEL, D.: ``The Deadlock Problem: A Classifying Bibliography,'' ACM SIGOPS Operat-
ing Systems Rev., vol. 17, pp. 6Â­16, Oct. 1983.
ZUBERI, K.M., PILLAI, P., and SHIN, K.G.: ``EMERALDS: A Small-Memory Real-Time
Microkernel,'' Proc. 17th Symp. on Operating Systems Principles, ACM, pp. 277Â­299,
1999.



1070  READING LIST AND BIBLIOGRAPHY      CHAP. 13
ZWICKY, E.D.: ``Torture-Testing Backup and Archive Programs: Things You Ought to
Know But Probably Would Rather Not,'' Proc. Fifth Conf. on Large Installation Sys-
tems Admin., USENIX, pp. 181Â­190, 1991.



INDEX



This page intentionally left blank



                                      INDEX
A                                           Activity manager, 827
                                            Ada, 7
Absolute path, 776                          Adapter, I/O, 339Â­340
Absolute path name, 277                     AddAccessAllowedAce, 970
Abstraction, 982                            AddAccessDeniedAce, 970
Access, 116, 617, 657, 672, 801             Adding a level of indirection, 500
Access control entry,                       Address space, 39, 41, 185Â­194
Windows, 968                                Address-space layout randomization,
Access control list, 605Â­608, 874            647Â­648, 973
Access to resources, 602Â­611                Administrator, 41
Access token, 967                           ADSL (see Asymmetric Digital Subscriber Line)
Access violation, 936                       Advanced configuration and power interface,
Accountability, 596                          425, 880
ACE (see Access Control Entry)              Advanced LPC, 890
Acknowledged datagram service, 573          Adversary, 599
Acknowledgement message, 144                Adware, 680
Acknowledgement packet, 573                 Affinitized thread, 908
ACL (see Access Control List)               Affinity, core, 551
ACM Software System Award, 500              Affinity scheduling, multiprocessor, 541
ACPI (see Advanced Configuration and        Agent, 697
   Power Interface)                         Aging, 162, 214
Active attack, 600                          AIDL (see Android Interface Definition Language)
Active message, 556                         Aiken, Howard, 7
ActiveX control, 678, 906                   Alarm, 118, 390, 739
Activity, Android, 827Â­831                  Alarm signal, 40
                                      1073



1074                                         INDEX
Algorithmic paradigm, 989                           I/O in Windows, 945Â­948
Allocating dedicated devices, 366                   Memory management in Windows, 931Â­932
ALPC (see Advanced LPC)                             Native NT, 868Â­871
Alternate data stream, 958                          Process management in Windows, 914Â­919
Amoeba, 610                                         Security in Windows, 969Â­970
Analytical engine, 7                                Win32, 60Â­62, 871Â­875
Andreesen, Marc, 77                                 Application rootkit, 681
Android, 20, 802Â­849                                Application sandbox, Android, 838
history, 803Â­807                                    Application verifier, 901
Android 1.0, 805                                    Architectural coherence, 987Â­988
Android activity, 827Â­831                           Architecture, computer, 4
Android application, 824Â­836                        Archive file, 269Â­270
Android application sandbox, 838                    ASLR (see Address Space Layout Randomization)
Android architecture, 809Â­810                       Associative memory, 202
Android binder, 816Â­822                             Asymmetric digital subscriber line, 771
Android binder IPC, 815Â­824                         Asynchronous call, 554Â­556
Android content provider, 834Â­836                   Asynchronous I/O, 352
Android Dalvik, 814Â­815                             Asynchronous procedure call, 878, 885Â­886
Android design, 807Â­808                             ATA, 29
Android extensions to Linux, 810Â­814                Atanasoff, John, 7
Android framework, 810                              Atomic action, 130
Android init, 809                                   Atomic transaction, 296
Android intent, 836Â­837                             Attack
Android interface definition language, 822          buffer overflow, 640Â­642, 649
Android open source project, 803                    bypassing ASLR, 647
Android out-of-memory killer, 813Â­814               code reuse, 645Â­646
Android package, 825                                command injection, 655Â­656
Android package manager, 826                        dangling pointer, 652Â­653
Android process lifecycle, 846                      format string, 649Â­652
Android process model, 844                          insider, 657Â­660
Android receiver, 833Â­834                           integer overflow, 654Â­655
Android security, 838Â­844                           noncontrol-flow diverting, 648Â­649
Android service, 831Â­833                            null pointer, 653Â­654
Android software development kit, 805               outsider, 639Â­657
Android suspend blocker, 810                        return-oriented-programming, 645Â­647
Android wake lock, 810Â­813                          return-to-libc, 645
Android zygote, 809Â­810, 815Â­816, 845Â­846           time of check to time of use, 656Â­657
Antivirus technique, 687Â­693                        TOCTOU, 656Â­657
behavioral checker, 691Â­692                         Attacker, 599
integrity checker, 691                              Attribute, file, 271
AOSP (see Android Open Source Project)              Authentication, 626Â­638
APC (see Asynchronous Procedure Call)               password, 627Â­632
APK (see Android Package)                           Authentication for message passing, 144
Aperiodic real-time system, 164                     Authentication using biometrics, 636Â­638
API (see Application Programming Interface)         Authentication using physical objects, 633Â­636
App, 36                                             Authenticity, 596
AppContainer, 866                                   Automounting, NFS, 794
Apple Macintosh (see Mac)                           AV disk, 385
Applet, 697                                         Availability, 596
Application programming interface, 60, 483          Available resource vector, 446



                                         INDEX                                       1075
B                                               Bitmaps for memory management, 191
                                                Black hat, 597
B programming language, 715                     Blackberry, 19
Babbage, Charles, 7, 13                         Block cache, 315Â­317
Back door, 658Â­660                              Block device, 338, 359
Backing store for paging, 237Â­239               Block read ahead, 317Â­318
Backing up a file system, 306Â­311               Block size, 300Â­302, 367
Bad disk sector, 383                            Block special file, 44, 268, 768
Bad-news diode, 1020                            Block started by symbol, 754
Balance set manager, 939                        Blocked proces, 92
Ballooning, 490                                 Blocking call, 553Â­556
Bandwidth reservation, Windows, 945             Blocking network, 524
Banker's algorithm                              Blue pill rootkit, 680
multiple resources, 454Â­456                     Blue screen of death, 888
single resource, 453Â­454                        Bluetooth, 399
Barrier, 146Â­148                                Boot block, 281
Base priority, Windows scheduling, 924          Boot driver, 893
Base record, 954                                Boot sector virus, 669Â­670
Base register, 186                              Booting, 34Â­35
Basic block, 480                                Booting Linux, 751Â­753
Basic input output system, 34, 182              Booting Windows, 893Â­894
Batch system, 8                                 Bot, 598
Batch-system scheduling, 156Â­158                Botnet, 597Â­598, 660
Battery management, 417Â­418, 424Â­425            Bottom-up implementation, 1003Â­1004
Battery-powered computer, 1025Â­1026             Bounded-buffer problem, 128Â­130
Behavioral checker, 691                         Bridge, LAN, 570
Bell-LaPadula model, 613Â­614                    Brinch Hansen, Per, 137
Berkeley software distribution, 14, 717         Brk, 56, 755, 757
Berkeley UNIX, 717Â­718                          Broker process, 866
Berners-Lee, Tim, 77, 576                       Brooks, Fred, 11, 981, 1018Â­1019
Berry, Clifford, 7                              Browser hijacking, 679
Best fit algorithm, 193                         Brute force, 1009
Biba model, 614Â­615                             BSD (see Berkeley Software Distribution)
Big kernel lock, 533, 750                       BSOD (see Blue Screen Of Death)
Big.Little procesor, 530                        BSS (see Block Started by Symbol)
Binary exponential backoff, 537, 570            Buddy algorithm, Linux, 761
Binary semaphore, 132                           Buffer cache, 315Â­317
Binary translation, 71, 476, 479                Buffer overflow, 640Â­642, 649, 675
dynamic, 503                                    Buffered I/O, 352
Binder, Android, 821                            Buffering, 363Â­365
Binder interfaces and AIDL, 822                 Burst mode, 346
Binder IPC, Android, 815Â­824                    Bus, 20, 32Â­34
Binder kernel module, Android, 816Â­820          DMA, 33
Binder user-space API, Android, 821Â­822         ISA, 32
BinderProxy, Android, 821                       parallel, 32
Binding time, 1001                              PCI, 32
Biometric authentication, 636Â­638               PCIe, 32Â­34
BIOS (see Basic Input Output System)            SCSI, 33
BitLocker, 894, 964, 976                        serial, 32
Bitmap, 411Â­414, 412                            USB, 33



1076                                    INDEX
Busy waiting, 30, 122, 124, 354                Character special file, 44, 268, 768
Bypassing ASLR, 647Â­648                        Chdir, 54, 59, 667, 745, 783
Byron, Lord, 7                                 Checkerboarding, 243
Byte code, 702                                 Checkpointing, virtual machine migration, 497
                                               Chief programmer team, 1020
                                               Child process, 40, 90, 734
C                                              Chip multiprocessor, 528
                                               Chmod, 54, 59, 664, 801
                                               Chown, 664
C language, introduction, 73Â­77                Chromebook, 417
C preprocessor, 75                             ChromeOS, 417
C programming language, 715                    CIA, 596
C-list, 608                                    Ciphertext, 620
CA (see Certification Authority)               Circuit switching, 548Â­550
Cache, 100                                     Circular buffer, 364
Linux, 772                                     Class driver, 893
Windows, 942Â­943                               Classical IPC problems, 167Â­172
write-through, 317                             dining philosophers, 167Â­170
Cache (L1, L2, L3), 527                        readers and writers, 171Â­172
Cache hit, 25                                  Classical thread model, 102
Cache line, 25, 521                            Cleaner, LFS, 294
Cache manager, 889                             Cleaning policy, 232
Cache-coherence protocol, 521                  Client, 68
Cache-coherent NUMA, 525                       Client stub, 556
Caching, 1015                                  Client-server system, 68, 995Â­997
file system, 315Â­317                           Clock, 388Â­394
Canonical mode, 395                            Clock hardware, 388Â­389
Capability, 608Â­611                            Clock mode,
Amoeba, 610                                    one-shot, 389
cryptographically protected, 609               square-wave, 389
Hydra, 610                                     Clock page replacement algorithm, 212Â­213
IBM AS/400, 609                                Clock software, 390Â­392
kernel, 609                                    Clock tick, 389
tagged architecture, 609                       Clone, 744, 745, 746
Capability list, 608                           Close, 54, 57, 272, 298, 696, 770, 781, 795
Capacitive screen, 415                         Closedir, 280
Carriero, Nick, 584                            Cloud, 473, 495Â­497
Cathode ray tube, 340                          definition, 495
Cavity virus, 668                              Clouds as a service, 496
CC-NUMA (see Cache-Coherent NUMA)              Cloud computing, 13
CD-ROM file system, 325Â­331                    Cluster computer, 545
CDC 6600, 49                                   Cluster of workstations, 545
CDD (see Compatibility Definition              Cluster size, 322
   Document, Android)                          CMOS, 27
CERT (see Computer Emergency Response Team)    CMP (see Chip MultiProcessor)
Certificate, 624                               CMS (see Conversational Monitor System)
Certification authority, 624                   Co-scheduling, multiprocessor, 544
CFS (see Completely Fair Scheduler)            Code injection attack, 644
Challenge-response authentication, 632         Code integrity, 974
Character device, 338, 359                     Code reuse attack, 645Â­647



                                              INDEX                                         1077
Code review, 659                                     Covert channel, 615Â­619
Code signing, 693Â­694                                COW (see Cluster Of Workstations)
Coherency wall, 528                                  CP-40, 474
Colossus, 7                                          CP-67, 474
COM (see Component Object Model)                     CP/CMS, 474
Command injection attack, 655Â­656                    CP/M, 15
Command interpreter, 39                              CPM (see Control Program for Microcomputers)
Committed page, Windows, 929                         CPU-bound process, 152
Common criteria, 890                                 CR3, 476
Common object request broker architecture,           Cracker, 597
582Â­584                                              Crash recovery in stable storage, 386
Communication, synchronous vs. asynchronous,         Creat, 780, 781, 783
1004Â­1005                                            CreateFile, 872, 903, 969
Communication deadlock, 459Â­461                      CreateFileMapping, 932
Communication software, 550Â­552                      CreateProcess, 90, 867, 914, 919, 921, 969
Companion virus, 665Â­666                             CreateProcessA, 871
Compatibility definition document, Android, 803      CreateProcessW, 871
Compatible Time Sharing System, 12                   CreateSemaphore, 897, 917
Competition synchronization, 459                     Critical region, 121Â­122
Completely fair scheduler, Linux, 749                Critical section, 121Â­122
Component object model, 875                          Windows, 918
Compute-bound process, 152                           Crossbar switch, 522
Computer emergency response team, 676                Crosspoint, 522
Computer hardware review, 20Â­35                      CRT (see Cathode Ray Tube)
Condition variable, 136, 139Â­140                     Cryptographic hash function, 622
Conditions for resource deadlock, 440                Cryptography, 600, 619Â­626
Confidentiality, 596                                 public-key, 621Â­622
Configuration manager, 890                           secret-key, 620Â­621
Confinement problem, 615Â­617                         CS (see Connected Standby)
Connected standby, 965                               CTSS (see Compatible Time Sharing System)
Connection-oriented service, 572                     Cube, multicomputer, 547
Connectionless service, 572                          CUDA, 529
Consistency, file system, 312Â­314                    Current allocation matrix, 446
Content provider, Android, 834Â­836                   Current directory, 278
Content-based page sharing, 494                      Current priority, Windows scheduling, 924
Context data structure in Windows, 913               Current virtual time, 218
Context switch, 28, 159                              Cutler, David, 17, 859, 909
Contiguous allocation, 282Â­283                       Cyberwarfare, 598
Control object, 883                                  Cycle stealing, 346
Control program for microcomputers, 15Â­16            Cylinder, 28
Conversational Monitor System, 70                    Cylinder skew, 376
Cooked mode, 395
Coordination-based middleware, 584Â­587
Copy on write, 90, 229, 494, 497, 742, 931           D
CopyFile, 872
CORBA (see Common Object Request
Broker Architecture)                                 D-space, 227
Core, 24, 527                                        DACL (see Discretionary ACL)
Core image, 39                                       Daemon, 89, 368, 734
Core memory, 26                                      DAG (see Directed Acyclic Graph)



1078                                        INDEX
Dalvik, 814Â­815                                    Design techniques for operating systems
Dangling pointer attack, 652Â­653                   brute force, 1009
Darwin, Charles, 47                                caching, 1015Â­1016
Data confidentiality, 596                          error checking, 1009
Data execution prevention, 644, 645Â­645            exploiting locality, 1017
Data paradigm, 989Â­991                             hiding the hardware, 1005
Data rate for devices, 339                         indirection, 1007
Data segment, 56, 754                              optimize the common case, 1017Â­1018
Datagram service, 573                              reentrancy, 1009
Deadlock, 435Â­465                                  reusability, 1008
banker's algorithm for multiple resources,         space-time trade-offs, 1012Â­1015
454Â­456                                            using hints, 1016
banker's algorithm for single resource,            Device context, 410
453Â­454                                            Device controller, 339Â­340
checkpointing to recover from, 449                 Device domain, 492
introduction, 439Â­443                              Device driver, 29, 357Â­361
resource, 439                                      Windows, 891Â­893, 948
safe state, 452Â­453                                Device driver as user process, 358
unsafe state, 452Â­453                              Device driver interface 362Â­363
Deadlock avoidance, 450Â­456                        Device driver virus, 671
Deadlock detection, 444Â­448                        Device independence, 361
Deadlock modeling, 440Â­443                         Device independent bitmap, 412
Deadlock prevention, 456Â­458                       Device isolation, 491
attacking circular wait, 457Â­458                   Device object, 870
attacking hold and wait, 456Â­457                   Device pass through, 491
attacking mutual exclusion, 456                    Device stack, 891
attacking no preemption, 457                       Windows, 951
Deadlock recovery, 449, 449Â­450                    Device-independent block size, 367
killing processes, 450                             DFSS (see Dynamic Fair-Share Scheduling)
preemption, 449                                    Diameter, multicomputer, 547
rollback, 449                                      DIB (see Device Independent Bitmap)
Deadlock trajectory, 450Â­451                       Die, 527
DebugPortHandle, 869                               Digital Research, 15
Dedicated I/O device, 366                          Digital rights management, 17, 879
Deduplication of memory, 489, 494                  Digital signature, 623
Default data stream, 958                           Digram, 621
Defense in depth, 684, 973                         Dining philosophers problem, 167Â­170
Defenses against malware, 684Â­704                  Direct media interface, 33
Deferred procedure call, 883Â­885                   Direct memory access, 31, 344Â­347, 355
Defragmenting a disk, 319Â­320                      Directed acyclic graph, 291
Degree of multiprogramming, 96                     Directory, 42Â­43, 268
Dekker's algorithm, 124                            file, 276Â­281
DeleteAce, 970                                     hierarchical, 276Â­277
Demand paging, 215                                 single-level, 276
Denial-of-service attack, 596                      Directory hierarchy, 578Â­579
Dentry data structure, Linux, 784                  Directory management system calls, 57Â­59
DEP (see Data Execution Prevention)                Directory operation, 280Â­281
Design, Android, 807Â­808                           Directory-based multiprocessor, 525Â­527
Design issues for message passing, 144Â­145         Dirty bit, 200
Design issues for paging systems, 222Â­233          Disabling interrupts, 122Â­123



                                         INDEX                                        1079
Disco, 474                                      DRM (see Digital Rights Management)
Discretionary access control, 612               DSM (see Distributed Shared Memory)
Discretionary ACL, 967                          Dual-use technology, 597
Disk, 27Â­28, 49Â­50                              Dump, file system, 306Â­311
Disk controller cache, 382                      DuplicateHandle, 918
Disk driver, 4                                  Dynamic binary translation, 503
Disk error handling, 382Â­385                    Dynamic disk, Windows, 944
Disk formatting, 375Â­379                        Dynamic fair-share scheduling, 927
Disk hardware, 369Â­375                          Dynamic link library, 63, 229, 862, 905Â­908
Disk interleaving, 378                          Dynamic relocation, 186
Disk operating system, 15
Disk properties, 370
Disk quota, 305Â­306                             E
Disk recalibration, 384
Disk scheduling algorithms, 379Â­382
elevator, 380Â­382                               e-Cos, 185
first-come, first-served, 379Â­380               Early binding, 1001
shortest seek first, 380                        ECC (see Error-Correcting Code)
Disk-arm motion, 318Â­319                        Echoing, 396
Disk-space management, 300Â­306                  Eckert, J. Presper, 7
Disks, 369Â­388                                  EEPROM (see Electrically Erasable PROM)
Dispatcher object, 883, 886Â­887                 Effective UID, 800
Dispatcher thread, 100                          Efficiency, hypervisor, 475
Dispatcher header, 886                          EFS (see Encryption File System)
Distributed operating system, 18Â­19             Electrically Erasable PROM, 26
Distributed shared memory, 233, 558Â­563         Elevator algorithm, disk, 380Â­382
Distributed system, 519, 566Â­587                Linux, 773
loosely coupled, 519                            Embedded system, 37, 1026
tightly coupled, 519                            Encapsulating mobile code, 697Â­703
DLL (see Dynamic Link Library)                  Encapsulation, hardware-independent, 507
DLL hell, 905                                   Encryption file system, 964
DMA (see Direct Memory Access)                  End-to-end argument, 995
DMI (see Direct Media Interface)                Energy management (see Power management)
DNS (see Domain Name System)                    Engelbart, Doug, 16, 405
Document-based middleware, 576Â­577              ENIAC, 7, 417, 517
Domain 492, 603                                 EnterCriticalSection, 918
Domain name system, 575                         EPT (see Extended Page Table)
DOS (see Disk Operating System)                 Errno variable, 116
Double buffering, 364                           Error checking, 1010
Double indirect block, 324, 789                 Error handling, 351
Double interleaving, 378                        disk, 382Â­385
Double torus, multicomputer, 547                Error reporting, 366
Down operation on semaphore, 130                Error-correcting code, 340
DPC (see Deferred Procedure Call)               Escape character, 397
Drive-by download, 639, 677                     Escape sequence, 399
Driver, disk, 4                                 ESX server, 481, 511Â­513
Driver object, 870                              Ethernet, 569Â­570
Windows, 944                                    Event, Windows, 918
Driver verifier, 948                            Event-driven paradigm, 989
Driver-kernel interface, Linux, 772             Evolution of WMware workstation, 511



1080                                           INDEX
Evolution of Linux, 714Â­703                           File, 41Â­44, 264
Evolution of Windows, 857Â­864                         block special, 768
Example file systems, 320Â­331                         character special, 768
ExceptPortHandle, 869                                 File access, 270Â­271
Exclusive lock, 779                                   File allocation table, 285, 285Â­286
Exec, 55, 56, 82, 112, 604, 642, 669, 737,            File attribute, 271, 271Â­272
   738, 742, 758, 815, 844                            File compression, NTFS, 962Â­963
Executable, 862                                       File data structure, Linux, 785
Executable file (UNIX), 269Â­270                       File descriptor, 43, 275, 781
Executable program virus, 666Â­668                     File encryption, NTFS, 963Â­964
Executive, Windows, 877, 887                          File extension, 266Â­267
Execution paradigm, 989                               File handle, NFS, 794
Execve, 54Â­56, 89                                     File key, 268
ExFAT file system, 266                                File link, 291
Existing resource vector, 446                         File management system calls, 56Â­57
Exit, 56, 90, 91, 696, 738, 54                        File mapping, 873
ExitProcess, 91                                       File metadata, 271
Exokernel, 73, 995                                    File naming, 265Â­267
Explicit intent, Android, 836                         File operation, 272Â­273
Exploit, 594                                          File sharing, 580Â­582
Exploiting locality, 1017                             File structure, 267Â­268
Exploiting software, 639Â­657                          File system, 263Â­332
Ext2 file system, 320, 785Â­790                        CD-ROM, 325Â­331
Ext3 file system, 320, 790                            contiguous allocation, 282Â­283
Ext4 file system, 790Â­792                             ExFAT
Extended page table, 488                              ext2, 320, 785Â­790
Extensible system, 997                                ext3, 320, 295
Extent, 284, 791                                      ext4, 790Â­792
External fragmentation, 243                           FAT, 285Â­286
External pager, 239Â­240                               FAT-16, 952
                                                      FAT-32, 952
                                                      ISO 9660, 326Â­331
                                                      Joliet, 330Â­331
F                                                     journaling, 295Â­296
                                                      linked-list allocation, 284Â­285
                                                      Linux, 775Â­798
Fair-share scheduling, 163Â­164                        MS-DOS, 320Â­323
Failure isolation, 983                                network, 297
False sharing in DSM, 561                             NTFS, 295, 95Â­964
FAT (see File Allocation Table)                       Rock Ridge, 329Â­331
FAT-16 file system, 265, 952                          UNIX V7, 323Â­325
FAT-32 file system, 265, 952                          virtual, 296Â­299
FCFS (see First-Come, First-Served algorithm)         Windows, 952Â­964
Fcntl, 783                                            File-system backup, 306Â­311
Fiber, Windows, 909Â­911                               File-system block size, 300Â­302
Fiber management API calls in Windows,                File-system calls in Linux, 780Â­783
   914Â­919                                            File-system cache, 315Â­317
Fidelity, hypervisor, 475                             File-system consistency, 312Â­314
FIFO (see First-In, First-Out page                    File-system examples, 320Â­331
   replacement)                                       File-system filter driver, 892



                                               INDEX                                        1081
File-system fragmentation, 283Â­284                    Fundamental concepts of Windows security, 967
File-system implementation, 281Â­299                   Futex, 134Â­135
File-system layout, 281Â­282
File-system management, 299Â­320
File-system performance, 314Â­319                      G
File-system structure,
Windows NT, 954Â­958
Linux, 785Â­792                                        Gabor wavelet, 637
File-system-based middleware, 577Â­582                 Gadget, 646
File type, 268Â­270                                    Gang scheduling, multiprocessor, 543Â­545
File usage, example, 273Â­276                          GasseÂ´e, Jean-Louis, 405
Filter, 892                                           Gates, Bill, 14, 858
Filter driver, Windows, 952                           GCC (see Gnu C compiler)
Finger daemon, 675                                    GDI (see Graphics Device Interface)
Finite-state machine, 102                             GDT (see Global Descriptor Table)
Firewall, 685Â­687                                     Gelernter, David, 584
personal, 687                                         General-purpose GPU, 529
stateful, 687                                         Generic right, capability, 610
stateless, 686                                        Getpid, 734
Firmware, 893                                         GetTokenInformation, 967
Firmware rootkit, 680                                 Getty, 752
First fit algorithm, 192                              Ghosting, 415
First-come, first-served disk scheduling, 379Â­380     GID (see Group ID)
first-served scheduling, 156Â­157                      Global descriptor table, 249
First-in, first-out page replacement algorithm, 211   Global page replacement, 223Â­224
Flash device, 909                                     Global variable, 116
Flash memory, 26                                      Gnome, 18
Flashing, 893                                         GNU C compiler, 721
Floppy disk, 370                                      GNU Public License, 722
Fly-by mode, 346                                      Goals of I/O software, 351Â­352
Folder, 276                                           Goals of operating system design, 982Â­983
Font, 413Â­414                                         Goat file, 687
Fork, 53, 53Â­55, 54, 55, 61, 82, 89, 90, 106,         Goldberg, Robert, 474
107, 228, 462, 463, 534, 718, 734, 736,               Google Play, 807
737, 741, 742, 743, 744, 745, 763, 815,               GPGPU (see General-Purpose GPU)
844, 845, 851, 852                                    GPL (see GNU Public License)
Formal security model, 611Â­619                        GPT (see GUID Partition Table)
Format string attack, 649Â­651                         GPU (see Graphics Processing Unit)
Formatting, disk, 375Â­379                             Grace period, 148
FORTRAN, 9                                            Grand unified bootloader, 751
Fragmentation, file systems, 283Â­284                  Graph-theoretic processor allocation, 564Â­565
Free, 653                                             Graphical user interface, 1Â­2, 16, 405Â­414, 719, 802
Free block management, 303Â­305                        Graphics adapter, 405
FreeBSD, 18                                           Graphics device interface, 410
Fsck, 312                                             Graphics processing unit, 24, 529
Fstat, 57, 782                                        Grid, multicomputer, 547
Fsuid, 854                                            Group, ACL, 606
Fsync, 767                                            Group ID, 40, 604, 799
Full virtualization, 476                              GRUB (see GRand Unified Bootloader)
Function pointer in C, 644                            Guaranteed scheduling algorithm, 162



1082                                       INDEX
Guest operating system, 72, 477, 505              History of protection hardware, 58
Guest physical address, 488                       History of virtual memory, 50
Guest virtual address, 488                        History of virtualization, 473Â­474
Guest-induced page fault, 487                     History of VMware, 498Â­499
GUI (see Graphical User Interface)                Hive, 875
GUID partition table, 378                         Hoare, C.A.R, 137
                                                  Honeypot, 697
                                                  Host, 461, 571
H                                                 Host operating system, 72, 477, 508
                                                  Host physical address, 488
                                                  Hosted hypervisor, 478
Hacker, 597                                       Huge page, Linux, 763
HAL (see Hardware Abstraction Layer)              Hungarian notation, 408
Handheld computer operating system, 36            Hybrid thread, 112Â­113
Handle, 92, 868, 897Â­898                          Hydra, 610
Hard fault, 936                                   Hyper-V, 474, 879
Hard link, 281                                    Hypercall, 477, 483
Hard miss, 204                                    Hypercube, multicomputer, 547
Hard real-time system, 38, 164                    Hyperlink, 576
Hardening, 600                                    Hyperthreading, 23Â­24
Hardware abstraction layer, 878Â­882, 880          Hypervisor, 472, 475, 879
Hardware issues for power management, 418Â­419        hosted, 478
Hardware support, nested page tables, 488            type 1, 70Â­72, 477Â­478
Hardware-independent encapsulation, 507              type 2, 70, 477Â­478, 481
Head skew, 376                                    Hypervisor rootkit, 680
Header file, 74                                   Hypervisor-induced page fault, 487
Headless workstation, 546                         Hypervisors vs. microkernels, 483Â­485
Heap, 755
Heap feng shui, 653
Heap spraying, 642                                I
Heterogeneous multicore chip 529Â­530
Hibernation, 964
Hiding the hardware, 1005                         I-node, 58, 286Â­287, 325, 784
Hierarchical directory structure, 276Â­277         I-node table, 788
Hierarchical file system, 276Â­277                 I-space, 227
High-level format of disk, 379                    I/O, interrupt driven
High-resolution timer, Linux, 747                 I/O API calls in Windows, 945Â­948
Hint, 1016                                        I/O completion port, 948
History of disks, 49                              I/O device, 28Â­31, 338
History of memory, 48                             I/O hardware, 337Â­351
History of operating systems, 6Â­20                I/O in Linux, 767Â­775
Android, 803Â­807                                  I/O in Windows, 943Â­952
fifth generation, 19Â­20                           I/O manager, 888
first generation, 7Â­8                             I/O MMU, 491
fourth generation, 15Â­19                          I/O port, 341
Linux, 714Â­722                                    I/O port space, 30, 341
MINIX, 719Â­720                                    I/O request packet, 902, 950
second generation, 8Â­9                            I/O scheduler, Linux, 773
third generation, 9Â­14                            I/O software, 351Â­355
Windows, 857Â­865                                     user-space, 367Â­369



                                              INDEX                                           1083
I/O software layers, 356Â­369                         Implicit intent, Android, 837
I/O system calls in Linux, 770Â­771                   Import address table, 906
I/O system layers, 368                               Imprecise interrupt, 350Â­351
I/O using DMA, 355                                   IN instruction, 341
I/O virtualization, 490Â­493                          Incremental dump, 307
I/O-bound process, 152                               Indirect block, 324, 789Â­790
IAAS (see Infrastructure As A Service)               Indirection, 1007
IAT (see Import Address Table)                       Indium tin oxide, 415
IBinder, Android, 821                                Industry standard architecture, 32
IBM AS/400, 609                                      Infrastructure as a service, 496
IBM PC, 15                                           Init, 91, 809
IC (see Integrated Circuit)                          InitializeAcl, 970
Icon, 405                                            InitializeSecurityDescriptor, 970
IDE (see Integrated Drive Electronics)               InitOnceExecuteOnce, 919, 977
Ideal processor, Windows, 925                        Inode, 784
Idempotent operation, 296                            Input software, 394Â­399
Identity theft, 661                                  Input/Output, 45
IDL (see Interface Definition Language)              Insider attacks, 657Â­660
IDS (see Intrusion Detection System)                 Instruction backup, 235Â­236
IF (see Interrupt Flag)                              Integer overflow attack, 654
IIOP (see Internet InterOrb Protocol)                Integrated circuit, 10
Immediate file, 958                                  Integrated drive electronics, 369
Impersonation, 968                                   Integrity checker, 691
Implementation, RPC, 557                             Integrity level, 969
Implementation issues, paging, 233Â­240               Integrity star property, 615
segmentation, 243Â­252                                Integrity-level SID, 971
Implementation of an operating system,               Intent, Android, 836Â­837
993Â­1010                                             Intent resolution, 837
Implementation of I/O in Linux, 771Â­774              Interconnection network, omega, 523Â­524
Implementation of I/O in Windows, 948Â­952            perfect shuffle, 523
Implementation of memory management in               Interconnection technology, 546
Linux, 758Â­764                                       Interface definition language, 582
Implementation of memory management in               Interfaces to Linux, 724Â­725
Windows, 933Â­942                                     Interfacing for device drivers, 362Â­363
Implementation of processes, 94Â­95                   Interleaved memory, 525
Implementation of processes in Linux,                Internal fragmentation, 226
740Â­746                                              Internet, 571Â­572
Implementation of processes in Windows,              Internet interorb protocol, 583
919Â­927                                              Internet protocol, 574, 770
Implementation of security in Linux, 801Â­802         Interpretation, 700Â­701
Implementation of security in Windows,               Interpreter, 475
970Â­975                                              Interprocess communication, 40, 119Â­149
Implementation of the file system in Linux,          Windows, 916Â­917
784Â­792                                              Interrupt, 30, 347Â­351
Implementation of the NT file system in              imprecise, 350Â­351
Windows, 954Â­964                                     precise, 349Â­351
Implementation of the object manager in              Interrupt controller, 31
Windows, 894Â­896                                     Interrupt flag, 482
Implementing directories, 288Â­291                    Interrupt handler, 356Â­357
Implementing files, 282Â­287                          Interrupt remapping, 491Â­492



1084                                            INDEX
Interrupt service routine, 883                         K
Interrupt vector, 31, 94, 348
Interrupt-driven I/O, 354Â­355                          KDE, 18
Introduction to scheduling, 150                        Kerckhoffs' principle, 620
Intruder, 599                                          Kernel, Windows, 877, 882
Intrusion detection system, 687, 695                   Kernel handle, 897
model-based, 695Â­697                                   Kernel lock, 533
Invalid page, Windows, 929                             Kernel mode, 1
Inverted page table, 207Â­208                           Kernel rootkit, 680
IoCallDrivers, 948Â­949                                 Kernel thread, 997
IoCompleteRequest, 948, 961, 962                       Kernel-mode driver framework, 949
Ioctl, 770, 771                                        Kernel-space thread, 111Â­112
IopParseDevice, 902, 903                               Kernel32.dll, 922
iOS, 19                                                Kernighan, Brian, 715
IP (see Internet Protocol)                             Key
IP address, 574                                        object type Windows, 894
IPC (see InterProcess Communication)                   file, 268
iPhone, 19                                             Key. cryptographic, 620
IPSec, 619                                             Keyboard software, 394Â­398
Iris recognition, 637                                  Keylogger, 661
IRP (see I/O Request Packet)                           Kildall, Gary, 14Â­15
ISA (see Industry Standard Architecture)               Kill, 54, 59, 91, 739
ISO 9660 file system, 326Â­331                          KMDF (see Kernel-Mode Driver Framework)
ISR (see Interrupt Service Routine)                    Kqueues, 904
ITO (see Indium Tin Oxide)                             KVM, 474
J                                                      L
Jacket (around system call), 110                       L1 cache, 26
Jailing, 694Â­695                                       L2 cache, 26
Java Development Kit, 702                              LAN (see Local Area Network)
Java security, 701                                     Laptop mode, Linux, 767
Java Virtual Machine, 72, 700, 702                     Large scale integration, 15
JBD (see Journaling Block Device)                      Large-address-space operating system,
JDK (see Java Development Kit)                            1024Â­1025
Jiffy, 747                                             Late binding, 1001
JIT compilation (see Just-In-Time compilation)         Layered system, 64, 993Â­994
Job, 8                                                 Layers of I/O software, 368
Windows, 909Â­911                                       LBA (see Logical Block Addressing)
Job management API calls, Windows, 914Â­919             LDT (see Local Descriptor Table)
Jobs, Steve, 16, 405                                   Least auhority, principle
Joliet extensions, 330Â­331                             Least recently used, simulation in software, 214
Journal, 874                                           Least recently used page replacement algorithm,
Journaling, NTFS, 963                                     213Â­214, 935
Journaling block device, 791                           LeaveCriticalSection, 918
Journaling file system, 295, 295Â­296, 790Â­792          Library rootkit, 681
Just-in-time compilation, 814                          Licensing issues for virtual machines, 494Â­495
JVM (see Java Virtual Machine)                         Lightweight process, 103



                                                 INDEX                                           1085
Limit register, 186                                     Linux pipe, 735
Limits to clock speed, 517                              Linux process, 733Â­753
Linda, 584Â­587                                          implementation, 740Â­746
Line discipline, 774                                    introduction, 733Â­736
Linear address, 250                                     Linux process creation, 735
Link, 54, 57, 58, 280, 783                              Linux process management system calls, 736Â­739
file, 291, 777                                          Linux process scheduling, 746Â­751
Linked lists for memory management, 192Â­194             Linux processes, implementation, 740Â­746
Linked-list allocation, 284                             Linux runqueue, 747
Linked-list allocation using a table in memory,         Linux security, 798Â­802
285                                                     implementation, 801Â­802
Linker, 76                                              Linux security system calls, 801
Linux, 14, 713Â­802                                      Linux signal, 735Â­736
history, 720Â­722                                        Linux slab allocator, 762
overview, 723Â­733                                       Linux synchronization, 750Â­751
Linux booting, 751                                      Linux system call,
Linux buddy algorithm, 762                              file-system calls, 780Â­783
Linux dentry data structure, 784                        I/O, 770Â­771
Linux elevator algorithm, 773                           memory management, 756Â­758
Linux ext2 file system, 785Â­790                         process management, 736Â­739
Linux ext4 file system, 790Â­792                         security, 801
Linux extensions for Android, 810Â­814                   Linux system calls (see Access, Alarm, Brk,
Linux file system, 775Â­798                              Chdir, Chmod, Chown, Clone, Close, Closedir,
implementation, 784Â­792                                 Creat, Exec, Exit, Fstat, Fsuid, Fsync, Getpid,
introduction, 775Â­780                                   Ioctl, Kill, Link, Lseek, Mkdir, Mmap, Mount,
Linux file-system calls, 780Â­783                        Munmap, Nice, Open, Opendir, Pause, Pipe,
Linux goals, 723                                        Read, Rename, Rewinddir, Rmdir, Select, Setgid,
Linux header file, 730                                  Setuid, Sigaction, Sleep, Stat, Sync, Time,
Linux I/O, 767Â­775                                      Unlink, Unmap, Wait, Waitpid, Wakeup, Write)
implementation, 771Â­774                                 Linux task, 740
introduction, 767Â­769                                   Linux thread, 743Â­746
Linux I/O scheduler, 773                                Linux timer, 747
Linux I/O system calls, 770Â­771                         Linux utility programs, 729Â­730
Linux interfaces, 724Â­725                               Linux virtual address space, 763Â­764
Linux journaling file system, 790Â­792                   Linux virtual file system, 731Â­732, 784Â­785
Linux kernel structure, 731Â­733                         Live migration, 497
Linux layers, 724                                       Livelock, 461Â­463
Linux laptop mode, 767                                  Load balancing, multicomputer, 563Â­566
Linux loadable module, 775Â­76                           Load control, 225
Linux login, 752                                        Loadable module, Linux, 775Â­776
Linux memory allocation, 761Â­763                        Local area network, 568
Linux memory management, 753Â­767                        Local descriptor table, 249
implementation, 758Â­764                                 Local page replacement, 222Â­223
introduction, 754Â­756                                   Local procedure call, 867
Linux memory management system calls,                   Local vs. global allocation policy, 222
756Â­758                                                 Locality of reference, 216
Linux networking, 769Â­770                               Location independence, 580
Linux O(1) scheduler, 747                               Location transparency, 579
Linux page replacement algorithm, 765Â­767               Lock variable, 123
Linux paging, 764Â­765                                   Lock-and-key memory protection, 185



1086                                        INDEX
Locking, 778Â­779                                   Malware (continued)
Locking pages in memory, 237                       virus, 664Â­674
Log-structured file system, 293Â­293                worm, 674Â­676
Logic bomb, 657Â­658                                Managing free memory, 190Â­194
Logical block addressing, 371                      Mandatory access control, 612
Logical dump, file system, 309                     Manycore chip, 528Â­529, 1023Â­1024
Login Linux, 752                                   Mapped file, 231
Login spoofing, 659Â­660                            Mapped page writer, 941
LookupAccountSid, 970                              Maroochy Shire sewage spill, 598
Loosely coupled distributed system, 519            Marshalling, 552, 557, 822
Lord Byron, 7                                      Master boot record, 281, 378, 751
Lottery scheduling, 163                            Master file table, 954
Lovelace, Ada, 7                                   Master-slave multiprocessor, 532Â­533
Low-level communication software, 550Â­552          Mauchley, William, 7
Low-level format, 375                              MBR (see Master Boot Record)
Low-rights IE, 971                                 MDL (see Memory Descriptor List)
LPC (see Local Procedure Call)                     Mechanism, 67
LRU (see Least Recently Used page replacement)     Mechanism vs. policy, 165, 997Â­998
LRU block cache, 315                               Memory, 24Â­27
Lseek, 54, 57, 83, 297, 744, 745, 782              interleaved, 525
LSI (see Large Scale Integration)                  Memory compaction, 189
Lukasiewicz, Jan, 408                              Memory deduplication, 489, 494
                                                   Memory descriptor list, 950
                                                   Memory hierarchy, 181
M                                                  Memory management, 181Â­254
                                                   Linux, 753Â­767
                                                   Windows, 927Â­942
Mac, 33                                            Memory management algorithm
Mac OS X, 16                                       best fit algorithm, 193
Machine physical address, 488                      first fit, 192
Machine simulator, 71                              next fit algorithm, 192
Macro, 74                                          quick fit algorithm, 193
Macro virus, 671                                   worst fit algorithm, 193
Magic number, file, 269                            Memory management API calls in Windows, 931Â­932
Magnetic disk, 369Â­371                             Memory management system calls in Linux, 756
Mailbox, 145                                       Memory management unit, 28, 196
Mailslot, 916                                      I/O, 491
Mainframe, 8                                       Memory management with bitmaps, 191
Mainframe operating system, 35                     Memory management with linked lists, 192Â­194
Major device, 768                                  Memory management with overlays, 194
Major device number, 363                           Memory manager, 181, 889
Major page fault, 204                              Memory migration, pre-copy, 497
Making single-threaded code multithreaded,         Memory overcommitment, 489
   116Â­119                                         Memory page, 194
Malloc, 652, 757                                   Memory pressure, 938
Malware, 639, 660Â­684                              Memory virtualization, 486Â­490
keylogger, 661                                     Memory-allocation mechanism, Linux, 761Â­763
rootkit, 680Â­684                                   Memory-mapped file, 756
spyware, 676Â­680                                   Memory-mapped I/O, 340Â­344
Trojan horse, 663Â­664                              Memory-resident virus, 669



                                          INDEX                                         1087
Mesh, multicomputer, 547                         Morris, Robert, 674Â­676
Message passing, 144Â­146                         Morris worm, 674Â­676
Message-passing interface, 146                   Motif, 402
Metadata, file, 271                              Mount, 43, 54, 58, 59, 796
Metafile, Windows, 412                           Mounted device, 351
Method, 407, 582                                 Mouse software, 398Â­399
Metric units, 79Â­80                              MPI (see Message-Passing Interface)
MFT (see Master File Table)                      MS-DOS, 15, 16, 320, 858
Mickey, 399                                      MSDK (see Microsoft Development Kit)
Microcomputer, 15                                Multicomputer, 545Â­566
Microkernel, 65Â­68, 995Â­997                      Multicomputer hardware, 546Â­550
Microkernels vs. hypervisors, 483Â­485            Multicomputer load balancing, 563Â­566
Microsoft Development Kit, 865                   Multicomputer scheduling, 563
Microsoft disk operating system, 15              Multicomputer topology, 547Â­549
Middleware, 568                                  Multicore chip, 527Â­530
document-based, 576Â­577                          heterogeneous, 529Â­530
file-system-based, 577Â­582                       programming, 530
object-based, 582Â­584                            Multicore CPUs, virtualization
Migration, live, 497                             MULTICS (see MUltiplexed Information and
Mimicry attack, 697                              computing service)
Miniport, 893                                    Multilevel page table, 205Â­207
MINIX, 14                                        Multilevel security, 612Â­615
history, 719Â­720                                 Multiple processor systems, 517Â­589
MINIX 3, 66Â­68, 719Â­720                          Multiple programs without memory abstraction, 183
MINIX file system, 775Â­776, 785Â­786              Multiple queue scheduling, 161
Minor device, 59, 768                            Multiplexed information and computing service
Minor device number, 363                         13, 49, 50, 65, 243Â­247, 714
Minor page fault, 204                            Multiplexing, resource, 6
MinWin, 863                                      Multiprocessor, 86Â­87, 520Â­545
Missing block, 312                               directory-based, 525Â­527
Mitigation, 973                                  master-slave, 532Â­533
Mkdir, 54, 57, 783                               NUMA, 525Â­527
Mmap, 654, 757, 813, 853                         omega network, 523Â­524
MMU (see Memory Management Unit)                 shared-memory, 520Â­545
Mobile code, 698                                 space sharing, 542Â­543
encapsulating, 697Â­703                           symmetric, 533Â­534
Mobile computer, 19Â­20                           UMA, 520Â­525
Model-based intrusion detection, 695Â­697         Multiprocessor hardware, 520Â­530
static, 695                                      Multiprocessor operating system, 36, 531Â­534
Modeling multiprogramming, 95Â­97                 Multiprocessor scheduling, 539Â­545
Modern software development kit, 865             affinity, 541
Modified bit, 200                                co-scheduling, 544
ModifiedPageWriter, 939, 941                     gang, 544Â­545
Modules in Linux, 774                            smart, 541
Monitor, 137Â­144                                 two-level, 541
Monitor/mwait instruction, 539                   Multiprocessor synchronization, 534Â­537
Monoalphabetic substitution cipher, 620          Multiprogramming, 11, 86, 95Â­97
Monolithic operating system, 63Â­64               Multiqueue network cards, 551
Moore, Gordon, 527                               Multistage switching network, 523Â­525
Moore's law, 527                                 Multithreaded and multicore chip, 23



1088                                         INDEX
Multithreaded Web server, 100Â­101                   NFU (see Not Frequently Used algorithm)
Multithreaded word processor, 99Â­100                Nice, 747, 852
Multithreading, 23Â­24, 103                          No memory abstraction, 181Â­185
Multitouch, 415                                     Node-to-network interface communication, 551Â­552
Munmap, 757                                         Non cache-coherent NUMA, 525
Murphy's law, 120                                   Nonblocking call, 554Â­556
Mutation engine, 690                                Nonblocking network, 522
Mutex, 132Â­134                                      Noncanonical mode, 395
Mutexes in Pthreads, 135Â­137                        Nonce, 626
Mutual exclusion, 121                               Noncontrol-flow diverting attack, 648Â­649
busy waiting, 124                                   Nonpreemptable resource, 437
disabling interrupts, 122Â­123                       Nonpreemptive scheduling, 153
lock variable, 123                                  Nonrepudability, 596
Peterson's solution, 124Â­125                        Nonresident attribute, 956
priority inversion, 128                             Nonuniform memory access, 520, 925
sleep and wakeup, 127Â­130                           Nonvolatile RAM, 387
spin lock, 124                                      Nop sled, 642
strict alternation, 123Â­124                         Not frequently used page replacement algorithm, 214
TSL instruction                                     Not recently used page replacement algorithm, 210Â­211
Mutual exclusion with busy waiting, 122             Notification event, Windows, 918
Mythical man month, 1018Â­1019                       Notification object, 886
                                                    NRU (see Not Recently Used page replacement)
                                                    NSA (see National Security Agency)
N                                                   NT file system, 265Â­266
                                                    NT namespace, 870
                                                    NtAllocateVirtualMemory, 869
Naming, 999Â­1001                                    NtCancelIoFile, 947
Naming transparency, 579Â­580                        NtClose, 900, 901
National Security Agency, 13                        NtCreateFile, 869, 901, 946, 947
Native NT, API, 868Â­871                             NtCreateProcess, 867, 869, 915, 922, 978, 979
NC-NUMA (see Non Cache-coherent NUMA)               NtCreateThread, 869, 915
Nested page table, 488                              NtCreateUserProcess, 916, 919, 920, 921, 922
Netbook, 862                                        NtDeviceIoControlFile, 947
Network, nonblocking, 522                           NtDuplicateObject, 869
Network device, 774                                 NtFlushBuffersFile, 947
Network File System, 297, 792Â­798                   NTFS (see NT File System)
Network File System architecture, 792Â­793           NtFsControlFile, 947, 963
Network File System implementation, 795Â­798         NtLockFile, 947
Network File System protocol, 794Â­795               NtMapViewOfSection, 869
Network File System V4, 798                         NtNotifyChangeDirectoryFile, 947, 963
Network hardware, 568Â­572                           Ntoskrnl.exe, 864
Network interface, 548Â­550                          NtQueryDirectoryFile, 946
Network operating system, 18                        NtQueryInformationFile, 947
Network processor, 530, 549Â­550                     NtQueryVolumeInformationFile, 947
Network protocol, 574, 574Â­576                      NtReadFile, 899, 946
Network services, 572Â­574                           NtReadVirtualMemory, 869
Networking, Linux, 769Â­770                          NtResumeThread, 916, 922
Next fit algorithm, 192                             NtSetInformationFile, 947
NFS (seeNetwork File System)                        NtSetVolumeInformationFile, 947
NFS implementation, 795                             NtUnlockFile, 947



                                                 INDEX                                       1089
NtWriteFile, 899, 946                                   MINIX, 14, 66Â­68, 719Â­720, 775Â­776, 785Â­786
NtWriteVirtualMemory, 869                               monolithic, 63Â­64
Null pointer dereference attack, 653                    MS-DOS, 858
NUMA (see NonUniform Memory Access)                     multiprocessor, 36
NUMA multiprocessor, 525Â­527                            OS/2, 859
NX bit, 644                                             PDP-11, 715Â­716
                                                        personal computer, 36
                                                        real time, 37Â­39
                                                        sensor node, 27
O                                                       server, 35Â­36
                                                        smart card, 38
                                                        System V, 717
ObCreateObjectType, 903                                 UNIX, 14
Object, 582                                             UNIX 32V, 717
security, 605                                           UNIX v7 323Â­325
Object adapter, 583                                     Vista, 862Â­863
Object cache, 762                                       Win32, 860
Object file, 75                                         Windows 2000, 17, 861
Object manager, 870, 888                                Windows 3.0, 860
Object manager implementation, 894Â­896                  Windows 7, 863, 863Â­864
Object namespace, 898Â­905                               Windows 8, 857Â­976
Object request broker, 582                              Windows 95, 16, 859
Object-based middleware, 582Â­584                        Windows 98, 16, 859
ObOpenObjectByName, 901                                 Windows ME, 17, 859
Off line operation, 9                                   Windows NT, 16, 859, 860
Omega network, 523Â­524                                  Windows NT 4.0, 861
One-shot mode, clock, 389                               Windows Vista, 17, 862Â­863
One-time password, 631                                  Windows XP, 17, 861
One-way function, 609, 622                              Operating system as a resource manager, 5Â­6
One-way hash chain, 631                                 Operating system as an extended machine, 4Â­5
Ontogeny recapitulates phylogeny, 47Â­50                 Operating system concepts, 38Â­50
Open, 54, 56, 57, 116, 272, 278, 297, 320, 333,         Operating system defined, 1
   366, 437, 443, 608, 696, 718, 768, 781,              Operating system design, 981Â­1027
   785, 786, 795, 796, 798                              difficulties, 983Â­985
Open-file-description table, 789                        goals, 982Â­983
Opendir, 280                                            interfaces, 985Â­993
OpenGL, 529                                             principles, 985Â­987
OpenSemaphore, 897                                      system-call interface, 991Â­993
Operating system                                        trends, 1022Â­1026
Android, 802Â­849                                        useful techniques, 1005Â­1010
BSD, 717Â­718                                            Operating system implementation, 993Â­1010
embedded, 37                                            Operating system issues for power management,
guest, 477                                              419Â­425
handheld device, 36                                     Operating system paradigm, 987Â­983
history, 6Â­20                                           Operating system performance, 1010Â­1018
host, 477                                               caching, 1015Â­1016
Linux, 713Â­802                                          exploiting locality, 1017
mainframe, 35                                           hints, 1016
MD-DOS, 858                                             optimize the common case, 1017Â­1018
Me, 859                                                 space-time trade-offs, 1012Â­1015



1090                                         INDEX
Operating system structure, 62Â­73, 993Â­997          Page frame, 196
client-server, 68                                   Page frame number, 200
client-server system, 995Â­997                       Windows, 939
exokernel, 73, 995                                  Page frame number database, Windows, 939
extensible system, 997                              Page frame reclaiming algorithm, 764, 765
layered, 64Â­65                                      Page map level 4, 207
layered system, 993Â­994                             Page replacement algorithm, 209Â­222
microkernel, 65Â­68                                  aging, 214
virtual machine, 69Â­72                              clock, 212Â­213
Operating system type, 35Â­38                        first-in, first-out, 211
Operating systems security, 599Â­602                 global, 223Â­224
Optimal page replacement algorithm, 209Â­210         least recently used, 213Â­214
Optimize the common case, 1017                      Linux, 765Â­767
ORB (see Object Request Broker)                     local, 222Â­223
Orthogonality, 998Â­999                              not frequently used, 214
OS X, 16                                            not recently used, 210Â­211
OS/2, 859                                           optimal, 209Â­210
OS/360, 11                                          page fault frequency, 224Â­225
Ostrich algorithm, 443                              second-chance, 212
Out instruction, 341                                summary, 221
Out-of-memory killer, Android, 813Â­814              Windows, 937Â­939
Output software, 399Â­416                            working set, 215
Overcommitting memory, 489                          WSClock, 219
Overlapped seek, 369                                Page sharing, content-based, 494
Overlay, 194                                        transparent, 494
Overwriting virus, 666                              Page size, 225Â­227
                                                    Page table, 196Â­198, 198Â­201
                                                    extended, 488
P                                                   large memory, 205Â­208
                                                    multilevel, 205Â­207
                                                    nested, 488
P operation on semaphore, 130                       shadow, 486
PAAS (see Platform As A Service)                    Page table entry, 199Â­201
Package manager, Android, 826                       Windows, 937
Packet switching, 547Â­548                           Page-fault handling, Windows, 934Â­937
PAE (see Physical Address Extension)                Page table walk, 204
Page, memory, 194, 196                              Pagefile, Windows, 930Â­931
Page allocator, Linux, 761                          Paging, 195Â­208
Page daemon, Linux, 764                             algorithms, 209Â­222
Page descriptor, Linux, 760                         basics, 195Â­201
Page directory, 207, 251                            copy on write, 229
Page directory pointer table, 207                   design issues, 222Â­233
Page fault, 198                                     fault handling, 233Â­235
guest-induced, 487                                  implementation issues, 233Â­240
hypervisor-induced, 487                             instruction backup, 235Â­236
major, 204                                          large memories, 205Â­208
minor, 204                                          Linux, 764Â­765
Page fault frequency page replacement algorithm,    locking pages, 237
   224                                              separation of policy and mechanism, 239Â­240
Page fault handling, 233Â­235                        shared pages, 228Â­229



                                             INDEX                                           1091
Paging daemon, 232                                  PFF (see Page Fault Frequency algorithm)
Paradigm, data, 989Â­991                             PFN (see Page Frame Number)
operating system, 987Â­993                           PFRA (see Page Frame Reclaiming Algorithm)
Parallel bus architecture, 32                       Phase-change memory, 909
Parallels, 474                                      Physical address, guest, 488
Parasitic virus, 668                                host, 488
Paravirt op, 485                                    Physical address extension, 763
Paravirtualization, 72, 476, 483                    Physical dump, file system, 308
Parcel, Android, 821                                Physical function, 493
Parent process, 90, 734                             Physical memory management, Linux, 758Â­761
Parse routine, 898                                  Windows, 939Â­942
Partition, 59, 879                                  PID (see Process IDentifier)
Passive attack, 600                                 Pidgin Pascal, 137
Password security, 628Â­632                          Pinned memory, 759
Password strength, 628Â­629                          Pinning pages in memory, 237
Patchguard, 974                                     Pipe, 44, 782
Path name, 43, 277Â­280                              Linux, 735
absolute, 277                                       Pipeline, 21
relative, 278                                       PKI (see Public Key Infrastructure)
Pause, 93, 739                                      Plaintext, 620
PC, 15                                              Platform as a service, 496
PCI bus (see Peripheral Component Interconnect)     Platform configuration register, 625
PCIe (see Peripheral Component Interconnect         PLT (see Procedure Linkage Table)
Express)                                            Plug and play, 33, 889
PCR (see Platform Configuration Register)           Pointer, 74
PDA (see Personal Digital Assistant)                POLA (see Principle of Least Authority)
PDE (see Page-Directory Entry)                      Policy, 67
PDP-1, 14                                           Policy vs. mechanism, 165, 997Â­998
PDP-11, 49                                          paging, 239Â­240
PDP-11 UNIX, 715                                    Polling, 354
PEB (see Process Environment Block)                 Polymorphic virus, 689Â­691
Per-process items, 104                              Pop-up thread, 114Â­115, 556
Per-thread items, 104                               Popek, Gerald, 474
Perfect shuffle, 523                                Port number, 686
Performance, 1010Â­1018                              Portable C compiler, 716
caching, 1015Â­1016                                  Portable UNIX, 716Â­717
exploiting locality, 1017                           Portscan, 597
file system, 314Â­319                                Position-independent code, 231
hints, 1016                                         POSIX, 14, 50Â­62, 718
optimize the common case, 1017Â­1018                 POSIX threads, 106Â­108
space-time trade-offs, 1012Â­1015                    Power management, 417Â­426
Periodic real-time system, 164                      application issues, 425Â­426
Peripheral component interconnect, 32               battery, 424Â­425
Peripheral component interconnect express, 32Â­33    CPU, 421Â­423
Persistence, file, 264                              display, 420
Personal computer operating system, 36              driver interface, 425
Personal digital assistant, 36                      hard disk, 420Â­421
Personal firewall, 687                              hardware issues, 418Â­419
Peterson's algorithm, 124Â­125                       memory, 423
PF (see Physical Function)                          operating system issues, 419Â­425



1092                                            INDEX
Power management (continued)                           Process scheduling
thermal management, 424                                Linux, 746Â­751
Windows, 964Â­966                                       Windows, 922Â­927
wireless communication, 423Â­424                        Process state, 92
PowerShell, 876                                        Process switch, 159
Pre-copy memory migration, 497                         Process table, 39, 94
Preamble, 340                                          Process termination, 90Â­91
Precise interrupt, 349Â­351                             Process vs. program, 87
Preemptable resource, 436                              Process-level virtualization, 477
Preemptive scheduling, 153                             Processes in Linux, 733Â­753
Prepaging, 216                                         Processor, 21Â­24
Present/absent bit, 197, 200                           Processor allocation algorithm, 564Â­566
Primary volume descriptor, 327                         graph-theoretic, 564Â­565
Principal, security, 605                               receiver-initiated, 566
Principle of least authority, 603                      sender-initiated, 565Â­566
Principles of operating system design, 985Â­987         ProcHandle, 869
Printer daemon, 120                                    Producer-consumer problem, 128Â­132
Priority inversion, 128, 927                           with messages, 145Â­146
Priority scheduling, 159Â­161                           with monitors, 137Â­139
Privacy, 596, 598                                      with semaphores, 130Â­132
Privileged instruction, 475                            Program counter, 21
Proc file system, 792                                  Program status word, 21
Procedure linkage table, 645                           Program vs. process, 87
Process, 39Â­41, 85Â­173, 86                             Programmed I/O, 352Â­354
blocked, 92                                            Programming with multiple cores, 530
CPU-bound, 152                                         Project management, 1018Â­1022
I/O-bound, 152                                         Prompt, 46
implementation, 94Â­95                                  Proportionality, 155
Linux, 740Â­746                                         Protected process, 916
ready, 92                                              Protection, file system, 45
running, 92                                            Protection command, 611
Windows, 908Â­927                                       Protection domain, 603Â­605
Process behavior, 151Â­156                              Protection hardware, 48Â­49
Process control block, 94                              Protection mechanism, 596
Process creation, 88Â­90                                Protection ring, 479
Process dependency, Android, 847                       Protocol, 574
Process environment block, 908                         communication, 460
Process group, Linux, 735                              NFS, 794
Process hierarchy, 91Â­92                               Protocol stack, 574
Process ID, 53                                         Pseudoparallelism, 86
Process identifier, Linux, 734                         PSW (see Program Status Word)
Process lifecycle, Android, 846                        PTE (see Page Table Entry)
Process management API calls in Windows,               Pthreads, 106Â­108
914Â­919                                                function calls, 107
Process management system calls, 53Â­56                 mutexes, 135Â­137
Process management system calls in Linux,              Public key infrastructure, 624
736Â­739                                                Public-key cryptography, 621Â­622
Process manager, 889                                   Publish/subscribe, model, 586
Process model, 86Â­88                                   PulseEvent, 919
Android, 844                                           Python, 73



                                                 INDEX                                            1093
Q                                                       Red queen effect, 639
                                                        Redirection of input and output, 46
Quality of service, 573                                 Redundant array of inexpensive disks, 371Â­375
Quantum, scheduling 158                                 levels, 372
QueueUserAPC, 885                                       striping, 372
Quick fit algorithm, 193                                Reentrancy, 1009
                                                        Reentrant code, 118, 361
                                                        Reference monitor, 602, 700
R                                                       Referenced bit, 200
                                                        Referenced pointer, 896
                                                        ReFS (see Resilient File System)
R-node, NFS, 796                                        Regedit, 876
Race condition, 119Â­121, 121, 656                       Registry, Windows, 875Â­877
RAID (see Redundant Aray of Inexpensive Disks)          Regular file, 268
RAM (see Random Access Memory)                          Reincarnation server, 67
Random access memory, 26                                Relative path, 777
Random-access file, 270                                 Relative path name, 278
Raw block file, 774                                     ReleaseMutex, 918
Raw mode, 395                                           ReleaseSemaphore, 918
RCU (see Read-Copy-Update)                              Releasing dedicated devices, 366
RDMA (see Remote DMA)                                   Relocation, 184
RDP (see Remote Desktop Protocol)                       Remapping, interrupt, 491Â­492
Read, 23, 39, 50, 50Â­51, 51, 54, 57, 60, 67,            Remote attestation, 625
   100, 101, 106, 110, 111, 174, 271, 273,              Remote desktop protocol, 927
   275, 280, 297, 298, 299, 352, 363, 580,              Remote direct memory access, 552
   581, 603, 696, 718, 725, 747, 756, 767, 768,         Remote procedure call, 556Â­558, 816, 864
   781, 782, 785, 788, 789, 795, 796, 797, 802          implementation, 557Â­558
Read ahead, block, 317Â­318                              Remote-access model, 577
NFS, 797                                                Rename, 273, 280, 333
Read only memory, 26                                    Rendezvous, 145
Read-copy-update, 148Â­149                               Reparse point, 954
Read-side critical section, 148                         NTFS, 961
Readdir, 280, 783                                       Replication in DSM, 561
Readers and writers problem, 171Â­172                    Request matrix, 446
ReadFile, 961                                           Request-reply service, 573
Ready proces, 92                                        Requirements for virtualization, 474Â­477
Real time, 390                                          Research, deadlocks, 464
Real-time, hard, 38                                     file systems, 331Â­332
soft, 38                                                input/output, 426Â­428
Real-time operating system, 37Â­38, 164                  memory management, 252Â­253
aperiodic, 165                                          multiple processor systems, 587Â­588
periodic, 164                                           operating systems , 77Â­78
Real-time scheduling, 164Â­167                           processes and threads, 172Â­173
Recalibration, disk, 384                                security, 703Â­704
Receiver, Android, 833Â­834                              virtual machine, 514Â­515
Receiver-initiated processor allocation, 566            Research on deadlock, 464
Reclaiming memory, 488Â­490                              Research on file systems, 331
Recovery console, 894                                   Research on I/O, 426Â­427
Recovery through killing processes, 450                 Research on memory management, 252
Recycle bin, 307                                        Research on multiple processor systems, 587



1094                                           INDEX
Research on operating systems, 77Â­78                  Router, 461, 571
Research on security, 703                             RPC (see Remote Procedure Call)
Research on virtualization and the cloud, 514         RSA cipher (see Rivest-Shamir-Adelman cipher)
Reserved page, Windows, 929                           Running process, 92
ResetEvent, 918                                       Runqueue, Linux, 747
Resilient file system, 266                            Rwx bit, 45
Resistive screen, 414
ResolverActivity, 837
Resource, 436Â­439                                     S
nonpremptable, 437
preemptable, 436
X, 403                                                SAAS (see Software As A Service)
Resource access, 602Â­611                              SACL (see System Access Control List)
Resource acquisition, 437Â­439                         Safe boot, 894
Resource allocation graph, 440Â­441                    Safe state, 452Â­453
Resource deadlock, 439                                Safety, hypervisor, 475
conditions for, 440                                   Salt, 630
Resource graph, 445                                   SAM (see Security Access Manager)
Resource trajectory, 450Â­452                          Sandboxing, 471, 698Â­700
Resource vector                                       SATA (see Serial ATA)
available, 446                                        Scan code, 394
existing, 446                                         Schedulable real-time system, 165
Response time, 155                                    Scheduler, 149
Restricted token, 909                                 Scheduler activation, 113Â­114, 912
Return-oriented programming, 645Â­647, 973             Scheduling, 149Â­167
Return to libc attack, 645Â­647, 973                   introduction, 150Â­156
Reusability, 1008                                     multicomputer, 563
Rewinddir, 783                                        multiprocessor, 539Â­545
Right, 603                                            real-time, 164Â­167
RIM Blackberry, 19                                    thread, 166Â­167
Ritchie, Dennis, 715                                  when to do, 152
Rivest-Shamir-Adelman cipher, 622                     Scheduling algorithm, 149, 153
Rmdir, 54, 57, 783                                    aging, 162
Rock Ridge extensions, 329Â­331                        batch system, 156Â­158
Role, ACL, 606                                        categories, 153
Role of experience, 1021                              fair-share, 163Â­164
ROM (see Read Only Memory)                            first-come, first-served, 156Â­157
Root, 800                                             goals, 154Â­156
Root directory, 43, 276                               guaranteed, 162
Root file system, 43                                  interactive system, 158Â­164
Rootkit, 680Â­684, application                         introduction, 150Â­156
blue pill, 680                                        lottery, 163
firmware, 680                                         multiple queues, 161
hypervisor, 680                                       nonpreemptive, 153
kernel, 680                                           priority, 159Â­161
library, 681                                          round-robin, 158Â­159
Sony, 683Â­684                                         shortest job first, 157Â­158
Rootkit detection, 681Â­683                            shortest process next, 162
ROP (see Return-Oriented Programming)                 shortest remaining time next, 158
Round-robin scheduling, 158Â­159                       Scheduling group, 927



                                               INDEX                                       1095
Scheduling mechanism, 165                             Select, 110, 111, 175
Scheduling of processes                               Self-map, 921
Linux, 746Â­751                                        Semantics of file sharing, 580Â­582
Windows, 922Â­927                                      Semaphore, 130, 130Â­132
Scheduling policy, 165                                Send and receive, 553
Script kiddy, 599                                     Sender-initiated processor allocation, 565Â­566
Scroll bar, 406                                       Sensitive instruction, 475
SCSI (see Small Computer System Interface)            Sensor-node operating system, 37
SDK (see Software Development Kit)                    Separate instruction and data space, 227Â­28
Seamless data access, 1025                            Separation of policy and mechanism, 165, 997Â­998
Seamless live migration, 497                          paging, 239Â­240
Second system effect, 1021                            Sequential access, 270
Second-chance page replacement algorithm, 212         Sequential consistency, 580Â­581
Secret-key cryptography, 620Â­621                      Sequential consistency in DSM, 562Â­563
Section, 869, 873                                     Sequential process, 86
SectionHandle, 869                                    Serial ATA, 4, 29
Secure hash algorithm, 623                            Serial ATA disk, 369
Secure virtual machine, 476                           Serial bus architecture, 32
Security, 593Â­705                                     Server, 68
Android, 838Â­844                                      Server operating system, 35Â­36
authentication, 626Â­638                               Server stub, 557
controlling access. 602Â­611                           Service, Android, 831Â­833
defenses against malware, 684Â­704                     Service pack, 17
insider attacks, 657Â­660                              Session semantics, 582
outsider attacks, 639Â­657                             SetEvent, 918, 919
password, 628Â­632                                     Setgid, 802
use of cryptography, 619Â­626                          SetPriorityClass, 923
Security access manager, 875                          SetSecurityDescriptorDacl, 970
Security calls                                        SetThreadPriority, 923
Linux, 801                                            Setuid, 604, 802, 854
Windows, 969Â­970                                      Setuid bit, 800
Security by obscurity, 620                            Setuid root programs, 641
Security descriptor, 868, 968                         Sewage spill, 598
Security environment, 595Â­599                         Sfc, 312
Security exploit, drive-by-download, 639              SHA (see Secure Hash Algorithm)
Security ID, 967                                      SHA-1 (see Secure Hash Algorithm)
Security in Linux, 798Â­802                            SHA-256 (see Secure Hash Algorithm)
introduction, 798Â­800                                 SHA-512 (see Secure Hash Algorithm)
Security in Windows, 966Â­975                          Shadow page table, 486
Security mitigation, 973                              Shared bus architecture, 32
Security model, 611Â­619                               Shared files, 290Â­293
Security reference monitor, 890                       Shared hosting, 70
Security system calls in Linux, 801                   Shared library, 63, 229Â­231
Seek, 271                                             Shared lock, 779
Segment, 241                                          Shared page, 228Â­229
Segmentation, 240Â­252                                 Shared text segment, 756
implementation, 243                                   Shared-memory multiprocessor, 520Â­545
Intel x86, 247Â­252                                    Shell, 1Â­2, 39, 45Â­46, 726Â­728
MULTICS, 243Â­247                                      Shell filter, 727
Segmentation fault, 205                               Shell magic character, 727



1096                                           INDEX
Shell pipe symbol, 728                                Soft fault, 929, 936
Shell pipeline, 728                                   Soft miss, 204
Shell prompt, 726                                     Soft real-time system, 38, 164
Shell script, 728                                     Soft timer, 392Â­394
Shell wild card, 727                                  Software as a service, 496
Shellcode, 642                                        Software development kit, Android, 805
Shim, 922                                             Software fault isolation, 505
Short name, NTFS, 957                                 Software TLB management, 203Â­205
Shortest job first scheduling, 157Â­158                Solid state disk, 28, 318
Shortest process next scheduling, 162                 Sony rootkit, 683Â­684
Shortest remaining time next scheduling, 158          Source code virus, 672
Shortest seek first disk scheduling, 380              Space sharing, multiprocessor, 542Â­543
SID (see Security ID)                                 Space-time trade-offs, 1012Â­1015
Side-by-side DLLs, 906                                Sparse file, NTFS, 958
Side-channel attack, 636                              Special file, 44, 767
Sigaction, 739                                        block, 268
Signal, 139, 140, 356                                 character, 268
alarm, 40                                             Spin lock, 124, 536
Linux, 735Â­736                                        Spinning vs. switching, 537Â­539
Signals in multithreaded code, 118                    Spooler directory, 120
Signature block, 623                                  Spooling, 12, 367
Silver bullet, lack of, 1022                          Spooling directory, 368
SIMMON, 474                                           Spyware, 676Â­680
Simonyi, Charles, 408                                 actions taken, 679
Simple integrity property, 615                        browser hijacking, 679
Simple security property, 613                         drive-by-download, 677
Simulating LRU in software, 214                       Square-wave mode, clock, 389
Simultaneous peripheral operation on line, 12         SR-IOV (see Single Root I/O Virtualization)
Single indirect block, 324, 789                       SSD (see Solid State Disk)
Single interleaving, 378                              SSF (see Shortest Seek First disk scheduling)
Single large expensive disk, 372                      St. ExupeÂ´ry, Antoine de, 985Â­986
Single root I/O virtualization, 492Â­493               Stable read, 386
Single-level directory system, 276                    Stable storage, 385Â­388
Singularity, 907                                      Stable write, 386
Skeleton, 582                                         Stack canary, 642Â­644
Skew, disk, 376                                       Stack pointer, 21
Slab allocator, Linux, 762                            Stack segment, 56
SLED (see Single Large Expensive Disk)                Standard error, 727
Sleep, 128, 130, 140, 179                             Standard input, 727
Sleep and wakeup, 127Â­130                             Standard output, 727
Small computer system interface, 33                   Standard UNIX, 718
Smart card, 634                                       Standby list, 930
Smart card operating system, 38                       Standby mode, 965
Smart scheduling, multiprocessor, 541                 Star property, 613
Smartphone, 19Â­20                                     Starting processes, Android, 845
SMP (see Symmetric MultiProcessor)                    Starvation, 169, 463Â­464
Snooping, bus, 528                                    Stat, 54, 57, 782, 786, 788
SoC (see System on a Chip)                            Stateful file system, NFS, 798
Socket, 917                                           Stateful firewall, 687
Berkeley, 769                                         Stateless file system, NFS, 795



                                             INDEX                                      1097
Stateless firewall, 686                             System access control list, 969
Static relocation, 185                              System bus, 20
Static vs. dynamic structures, 1002Â­1003            System call, 22, 50Â­62
Steganography, 617Â­619                              System-call interface, 991
Storage allocation, NTFS, 958Â­962                   System calls (see also Windows API calls)
Store manager, Windows, 941                         directory management, 57Â­59
Store-and-forward packet switching, 547Â­548         file management, 56Â­57
Stored-value card, 634                              Linux file system, 780Â­783
Strict alternation, 123Â­124                         Linux I/O, 770Â­771
Striping, RAID, 372                                 Linux memory management, 756Â­758
Structure, operating system, 993Â­997                Linux process management, 736Â­739
Stuxnet attack on nuclear facility, 598             Linux security, 801
Subject, security, 605                              miscellaneous, 59Â­60
Substitution cipher, 620                            process management, 53Â­56
Subsystem, 864                                      System on a chip, 528
Subsystems, Windows, 905Â­908                        System process, Windows, 914
Summary of page replacement algorithms, 221Â­22      System structure, Windows, 877Â­908
Superblock, 282, 784, 785                           System V, 14
SuperFetch, 934                                     System V interface definition, 718
Superscalar computer, 22                            System/360, 10
Superuser, 41, 800
Supervisor mode, 1
Suspend blocker, Android, 810                       T
Svchost.exe, 907
SVID (see System V Interface Definition)
SVM (see Secure Virtual Machine)                    Tagged architecture, 608
Swap area, Linux, 765                               Task, Linux, 740
Swap file, Windows, 942                             TCB (see Trusted Computing Base)
Swapper process, Linux, 764                         TCP (see Transmission Control Protocol)
Swappiness, Linux, 766                              TCP/IP, 717
Swapping, 187Â­190                                   Team structure, 1019Â­1021
Switching multiprocessor, 523Â­525                   TEB (see Thread Environment Block)
SwitchToFiber, 910                                  Template, Linda, 585
Symbian, 19                                         Termcap, 400
Symbolic link, 281, 291                             Terminal, 394
Symmetric multiprocessor, 533Â­534                   Terminal server, 927
Symmetric-key cryptography, 620Â­621                 TerminateProcess, 91
Sync, 316, 317, 767                                 Test and set lock, 535
Synchronization, barrier, 146Â­148                   Text segment, 56, 754
Linux, 750Â­751                                      Text window, 399Â­400
multiprocessor, 534Â­537                             THE operating system, 64Â­65
Windows, 917Â­919                                    Thermal management, 424
Synchronization event, Windows, 918                 Thin client, 416Â­417
Synchronization object, 886                         Thompson, Ken, 715
Synchronization using semaphores, 132               Timer, high resolution, 747
Synchronized method, Java, 143                      Thrashing, 216
Synchronous call, 553Â­554                           Thread, 97Â­119
Synchronous I/O, 352                                hybrid, 112Â­113
Synchronous vs. asynchronous communication,         kernel, 111Â­112
1004Â­1005                                           Linux, 743Â­746



1098                                              INDEX
Thread (continued)                                       Trusted computing base, 601
user-space, 108Â­111                                      Trusted platform module, 624Â­626
Windows, 908Â­927                                         Trusted system, 601
Thread environment block, 908                            TSL instruction, 126Â­127
Thread local storage, 908                                Tuple, 584
Thread management API calls in Windows, 914Â­919          Tuple space, 584
Thread of execution, 103                                 Turing, Alan, 7
Thread pool, Windows, 911Â­914                            Turnaround time, 155
Thread scheduling, 166Â­167                               Two-level multiprocessor scheduling, 541
Thread table, 109                                        Two-phase locking, 459
Thread usage, 97Â­102                                     Type 1 hypervisor, 70, 477Â­478
Threads, POSIX, 106Â­108                                  VMware, 511Â­513
Threat, 596Â­598                                          Type 2 hypervisor, 72, 477Â­478, 481
Throughput, 155
Tightly coupled distributed system, 519
Time, 54, 60                                             U
Time bomb, 658
Time of check to time of use attack, 656Â­657
Time of day, 390                                         UAC (see User Account Control)
Time sharing, multiprocessor 540Â­542                     UDF (see Universal Disk Format)
Timer, 388                                               UDP (see User Datagram Protocol)
Timesharing, 12                                          UEFI (see Unified Extensible Firmware Interface)
TinyOS, 37                                               UID (see User ID)
TLB (see Translation Lookaside Buffer)                   UMA (see Uniform Memory Access)
TOCTOU (see Time Of Check to Time Of                     UMA multiprocessor, bus-based, 520Â­521
Use attack)                                              crossbar, 521Â­523
Token, 874                                               switching, 523Â­525
Top-down implementation, 1003Â­1004                       UMDF (see User-Mode Driver Framework)
Top-down vs. bottom-up implementation, 1003Â­1004         Umount, 54, 59
Topology, multicomputer, 547Â­549                         UMS (see User-Mode Scheduling)
Torvalds, Linus, 14, 720                                 Undefined external, 230
Touch screen, 414Â­416                                    Unicode, 870
TPM (see Trusted Platform Module)                        UNICS, 714
Track, 28                                                Unified extensible firmware interface, 893
Transaction, Android, 817                                Uniform memory access, 520
Transactional memory, 909                                Uniform naming, 351
Transfer model, 577Â­678                                  Uniform resource locator, 576
Translation lookaside buffer, 202Â­203, 226, 933,         Universal Coordinated Time, 389
hard miss                                                Universal disk format, 284
soft miss, 204                                           Universal serial bus, 33
Transmission control protocol, 575, 770                  UNIX, 14, 17Â­18
Transparent page sharing, 494                            history, 714Â­722
Trap, 51Â­52                                              PDP-11, 715Â­716
Trap system call, 22                                     UNIX 32V, 717
Trap-and-emulate, 476                                    UNIX password security, 630Â­632
Traps vs. binary translation, 482                        UNIX system V, 14
Trends in operating system design, 1022Â­1026             UNIX V7 file system, 323Â­325
Triple indirect block, 324, 790                          Unlink, 54, 58, 82, 281, 783
Trojan horse, 663Â­664                                    Unmap, 758
TrueType fonts, 413                                      Unmarshalling, 822



                                              INDEX                                         1099
Unsafe state, 452Â­453                                Virtual kernel mode, 479
Up operation on semaphore, 130                       Virtual machine, 69Â­72
Upcall, 114                                          licensing, 494Â­495
Upload/download model, 577                           Virtual machine interface, 485
URL (see Uniform Resource Locator)                   Virtual machine migration, 496Â­497
USB (see Universal Serial Bus)                       Virtual machine monitor, 472 (see also Hypervisor)
Useful techniques, 1005Â­1010                         Virtual machines on multicore CPUs, 494
User account control, 972                            Virtual memory, 28, 50, 188, 194Â­208
User datagram protocol, 770                          paging, 194Â­240
User ID, 40, 604, 798                                segmentation, 240Â­252
User interface paradigm, 988                         Virtual memory interface, 232
User interfaces, 394Â­399                             Virtual processor, 879
User mode, 2                                         VirtualBox, 474
User shared data, 908                                Virtualization, 471Â­515
User-friendly software, 16                           cost, 482
User-level communication software, 553Â­556           I/O, 490Â­493, 492Â­493
User-mode driver framework, Windows, 948             memory, 486Â­490
User-mode scheduling, Windows, 912                   process-level, 477
User-mode services, Windows, 905Â­908                 requirements, 474Â­477
User-space I/O software, 367Â­369                     x86, 500Â­502
User-space thread, 108Â­111                           Virtualization and the cloud, 1023
UTC (see Universal Coordinated Time)                 Virtualization techniques, 478Â­483
                                                     Virtualization technology, 476
                                                     Virtualizing the unvirtualizable, 479
V                                                    Virus, 595, 664Â­674
                                                     boot sector, 669Â­670
                                                     cavity, 668
V operation on semaphore, 130                        companion, 665Â­666
V-node, NFS, 795                                     device driver, 671
VAD (see Virtual Address Descriptor)                 executable program, 666Â­668
ValidDataLength, 943                                 macro, 671
Vampire tap, 569                                     memory-resident, 669
Vendor lock-in, 496                                  overwriting, 666
Vertical integration, 500                            parasitic, 668
VFS (see Virtual File System)                        polymorphic, 689Â­691
VFS interface, 297                                   source code, 672
Video RAM, 340, 405                                  Virus avoidance, 692Â­693
Virtual address, 195                                 Virus payload, 665
guest, 488                                           Virus scanner, 687
Virtual address allocation, Windows, 929Â­931         Viruses, operation, 665
Virtual address descriptor, 933                      Viruses distribution, 672Â­674
Virtual address space, 195                           Vista, Windows, 17
Linux, 763Â­764                                       VM exit, 487
Virtual appliance, 493                               VM/370, 69Â­70, 474
Virtual disk, 478                                    VMI (see Virtual Machine Interface)
Virtual file system, 296Â­299                         VMM (see Virtual Machine Monitor)
Linux, 731Â­732, 784Â­785                              VMotion, 499
Virtual function, 493                                VMware, 474, 498Â­514
Virtual hardware platform, 506Â­508                   history, 498Â­499
Virtual i-node, NFS, 795                             VMware ESX server, 481



1100                                        INDEX
VMware workstation, 478                            Windows API call
VMware Workstation, 498Â­500                        I/O, 945Â­948
Linux, 498                                         memory management, 931Â­932
Windows, 498                                       process management, 914Â­919
VMX, 509                                           security, 969Â­970
VMX driver, 509                                    Windows API calls (see AddAccessAllowedAce,
Volume shadow copy, Windows, 944                   AddAccessDeniedAce, BitLocker, CopyFile,
VT (see Virtualization Technology)                 CreateFile, CreateFileMapping, CreateProcess,
Vulnerability, 594                                 CreateSemaphore, DebugPortHandle, DeleteAce,
                                                   DuplicateHandle, EnterCriticalSection,
                                                   ExceptPortHandle, GetTokenInformation,
W                                                  InitializeAcl, InitOnceExecuteOnce,
                                                   InitializeSecurityDescriptor, IoCallDrivers,
                                                   IoCompleteRequest, IopParseDevice,
Wait, 139, 140, 356                                LeaveCriticalSection, LookupAccountSid,
WaitForMultipleObjects, 886, 895, 918, 977         ModifiedPageWriter, NtAllocateVirtualMemory,
WaitForSingleObject, 918                           NtCancelIoFile, NtClose, NtCreateFile,
WaitOnAddress, 919                                 NtCreateProcess, NtCreateThread,
Waitpid, 54Â­55, 55, 56, 736, 737, 738              NtCreateUserProcess, NtDeviceIoControlFile,
Waitqueue, 750                                     NtDuplicateObject, NtFlushBuffersFile,
Wake lock, Android, 810Â­813                        NtFsControlFile, NtLockFile,
WakeByAddressAll, 919                              NtMapViewOfSection, NtNotifyChangeDirectoryFile,
WakeByAddressSingle, 919                           NtQueryDirectoryFile, NtQueryInformationFile,
Wakeup, 127Â­130, 128                               NtQueryVolumeInformationFile, NtReadFile,
Wakeup waiting bit, 129                            NtReadVirtualMemory, NtResumeThread,
WAN (see Wide Area Network)                        NtSetInformationFile, NtSetVolumeInformationFile,
War dialer, 629                                    NtUnlockFile, NtWriteFile, NtWriteVirtualMemory,
Watchdog timer, 392                                ObCreateObjectType, ObOpenObjectByName,
WDF (see Windows Driver Foundation)                OpenSemaphore, ProcHandle, PulseEvent,
WDK (see Windows Driver Kit)                       QueueUserAPC, ReadFile, ReleaseMutex,
WDM (see Windows Driver Model)                     ReleaseSemaphore, ResetEvent, SectionHandle,
Weak passwords, 628                                SetEvent, SetPriorityClass,
Web app, 417                                       SetSecurityDescriptorDacl, SetThreadPriority,
Web browser, 576                                   SwitchToFiber, ValidDataLength,
Web page, 576                                      WaitForMultipleObjects, WaitForSingleObject,
White hat, 597                                     WaitOnAddress, WakeByAddressAll,
Wide area network, 568Â­569                         WakeByAddressSingle)
Widget, 402                                        Windows critical section, 917Â­919
Wildcard, 607                                      Windows defender, 974
WIMP, 405                                          Windows device driver, 891Â­893
Win32, 60Â­62, 860, 871Â­875                         Windows driver foundation, 948
Window, 406                                        Windows driver kit, 948
Window manager, 402                                Windows driver model, 948
Windows 2000, 17, 861                              Windows event, 918
Windows 3.0, 860                                   Windows executive, 887Â­891
Windows 7, 17, 863Â­864                             Windows fiber, 909Â­911
Windows 8, 857Â­976                                 Windows file system, introduction, 953Â­954
Windows 8.1, 864                                   Windows I/O, 943Â­952
Windows 95, 16, 859                                implementation, 948Â­952
Windows 98, 16, 859                                introduction, 944Â­945



                                             INDEX                                     1101
Windows IPC, 916Â­917                                Working directory, 43, 278, 777
Windows job, 909Â­911                                Working set, 216
Windows kernel, 882                                 Working set model, 216
Windows Me, 17, 859                                 Working set page replacement algorithm, 215
Windows memory management, 927Â­942                  World switch, 482, 510
implementation, 933Â­942                             Worm, 595, 674Â­676
introduction, 928Â­931                               Morris, 674Â­676
Windows memory management API calls, 931Â­932        Wormhole routing, 548
Windows metafile, 412                               Worst fit algorithm, 193
Windows notification facility, 890                  WOW (see Windows-on-Windows)
Windows NT, 16, 860                                 Wrapper (around system call), 110
Windows NT 4.0, 861, 891                            Write, 54, 57, 273, 275, 297, 298, 317, 364, 367,
Windows NT file system, 265Â­266, 952Â­964               580, 603, 696, 756, 767, 768, 770, 781, 782,
introduction, 952Â­954                                  785, 791, 797, 802
implementation, 954Â­964                             Write-through cache, 317
Windows page replacement algorithm, 937Â­939         WSClock page replacement algorithm, 219
Windows page-fault handling, 934Â­937                W^X, 644
Windows pagefile, 930Â­931
Windows power management, 964Â­966
Windows process, introduction, 908Â­914              X
Windows process management API calls, 914Â­919
Windows process scheduing, 922Â­927                  X, 401Â­405
Windows processes, 908Â­927                          X client, 401
introduction, 908Â­914                               X Intrinsics, X11, 401
implementation, 919Â­927                             X resource, 403
Windows programming model, 864Â­877                  X server, 401
Windows registry, 875Â­877                           X window system, 18, 401Â­405, 720, 725
Windows security, 966Â­975                           X11 (see X window system)
implementation, 970Â­975                             X86, 18
introduction, 967Â­969                               X86Â­32, 18
Windows security API calls, 969Â­970                 X86Â­64, 18
Windows subsystems, 905Â­908                         Xen, 474
Windows swap file, 942                              Xlib, 401
Windows synchronization, 917Â­919                    XP (see Windows XP)
Windows synchronization event, 918
Windows system process, 914
Windows system structure, 877Â­908                   Z
Windows thread, 908Â­927
Windows thread pool, 911Â­914                        Z/VM, 69
Windows threads, implementation, 919Â­927            Zero day attack, 974
Windows update, 974                                 ZeroPage thread, 941
Windows Vista, 17, 862Â­863                          Zombie, 598, 660
Windows XP, 17, 861                                 Zombie software, 639
Windows-on-Windows, 872                             Zombie state, 738
WinRT, 865                                          ZONE DMA, Linux, 758
WinTel, 500                                         ZONE DMA32, Linux, 758
WMware Workstation, evolution, 511                  ZONE HIGHMEM, Linux, 758
WndProc, 409                                        ZONE NORMAL, Linux, 758
WNF (see Windows Notification Facility)             Zuse, Konrad, 7
Worker thread, 100                                  Zygote, 809Â­810, 815Â­816, 845Â­846



This page intentionally left blank



Also by Andrew S. Tanenbaum and Albert S. Woodhull
Operating Systems: Design and Implementation, 3rd ed.
All other textbooks on operating systems are long on theory and short on practice. This one is
different. In addition to the usual material on processes, memory management, file systems, I/O, and
so on, it contains a CD-ROM with the source code (in C) of a small, but complete, POSIX-confor-
mant operating system called MINIX 3 (see www.minix3.org). All the principles are illustrated by
showing how they apply to MINIX 3. The reader can also compile, test, and experiment with MINIX
3, leading to in-depth knowledge of how an operating system really works.



Also by Andrew S. Tanenbaum and David J. Wetherall
Computer Networks, 5th ed.
This widely read classic, with a fifth edition co-authored with David Wetherall, provides the
ideal introduction to today's and tomorrow's networks. It explains in detail how modern networks are
structured. Starting with the physical layer and working up to the application layer, the book covers a
vast number of important topics, including wireless communication, fiber optics, data link protocols,
Ethernet, routing algorithms, network performance, security, DNS, electronic mail, the World Wide
Web, and multimedia. The book has especially thorough coverage of TCP/IP and the Internet.



               Also by Andrew S. Tanenbaum and Todd Austin
Structured Computer Organization, 6th ed.
Computers are getting more complicated every year but this best-selling book makes computer
architecture and organization easy to understand. It starts at the very beginning explaining how a tran-
sistor works and from there explains the basic circuits from which computers are built. Then it moves
up the design stack to cover the microarchitecture, and the assembly language level. The final chapter
is about parallel computer architectures. No hardware background is needed to understand any part
of this book.



Also by Andrew S. Tanenbaum and Maarten van Steen
Distributed Systems: Principles and Paradigms, 2nd ed.
Distributed systems are becoming ever-more important in the world and this book explains their
principles and illustrates them with numerous examples. Among the topics covered are architectures,
processes, communication, naming, synchronization, consistency, fault tolerance, and security. Exam-
ples are taken from distributed object-based, file, Web-based, and coordination-based systems.



