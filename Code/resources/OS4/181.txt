Summary
A computer user and the operating system have           with one another. They achieve this by employing
different views of execution of programs. The user      the process synchronization means provided in the
is concerned with achieving execution of a pro-         operating system.
gram in a sequential or concurrent manner as            The operating system allocates resources to a
desired, whereas the OS is concerned with allo-         process and stores information about them in the
cation of resources to programs and servicing of        process context of the process. To control opera-
several programs simultaneously, so that a suit-        tion of the process, it uses the notion of a process
able combination of efficient use and user service      state. The process state is a description of the cur-
may be obtained. In this chapter, we discussed var-     rent activity within the process; the process state
ious aspects of these two views of execution of         changes as the process operates. The fundamental
programs.                                               process states are: ready, running, blocked, termi-
     Execution of a program can be speeded up           nated, and suspended. The OS keeps information
through either parallelism or concurrency. Paral-       concerning each process in a process control block
lelism implies that several activities are in progress  (PCB). The PCB of a process contains the process
within the program at the same time. Concurrency        state, and the CPU state associated with the process
is an illusion of parallelism--activities appear to     if the CPU is not currently executing its instruc-
be parallel, but may not be actually so.                tions. The scheduling function of the kernel selects
     A process is a model of execution of a pro-        one of the ready processes and the dispatching
gram. When the user issues a command to execute         function switches the CPU to the selected process
a program, the OS creates the primary process           through information found in its process context
for it. This process can create other processes by      and the PCB.
making requests to the OS through system calls;         A  thread     is   an  alternative  model  of  execu-
each of these processes is called its child process.    tion of a program. A thread differs from a process
The OS can service a process and some of its            in that no resources are allocated to it. This dif-
child processes concurrently by letting the same        ference makes the overhead of switching between
CPU execute instructions of each one of them            threads much less than the overhead of switch-
for some time, or service them in parallel by exe-      ing between processes. Three models of threads,
cuting their instructions on several CPUs at the        called kernel-level threads, user-level threads, and
same time. The processes within a program must          hybrid threads, are used. They have different impli-
work harmoniously toward a common goal by               cations for switching overhead, concurrency, and
sharing data or by coordinating their activities        parallelism.



                                                                Chapter 5  Processes and Threads                161
TEST  YOUR CONCEPTS                                                                                                 ·
5.1   An application comprises several processes--              e. When a user-level thread of a process makes a
      a   primary   process    and    some  child   pro-        system call that leads to blocking, all threads
      cesses. This arrangement provides computation             of the process become blocked.
      speedup if                                                f. Kernel-level threads provide more concur-
      a. The computer system contains many CPUs                 rency than user-level threads in both unipro-
      b. Some of the processes are I/O bound                    cessor and multiprocessor systems.
      c. Some of the processes are CPU bound                    g. When a process terminates, its termination
      d. None of the above                                      code should be remembered until its parent
5.2   Classify each of the following statements as true         process terminates.
      or false:                                            5.3  Which of the following state transitions for a
      a. The OS creates a single process if two users           process can cause the state transition blocked 
          execute the same program.                             ready for one or more other processes?
      b. The state of a process that is blocked on a            a. A  process  starts  an    I/O  operation     and
          resource request changes to running when the          becomes blocked.
          resource is granted to it.                            b. A process terminates.
      c. There is no distinction between a terminated           c. A  process  makes   a     resource  request  and
          process and a suspended process.                      becomes blocked.
      d.  After  handling  an  event,  the  kernel  need        d. A process sends a message.
          not perform scheduling before dispatching if          e. A process makes the state transition blocked
          none of the process states has changed.                blocked swapped.
EXERCISES                                                                                                           ·
5.1   Describe the actions of the kernel when pro-              b. Give a sequence of state transitions through
      cesses  make  system     calls  for  the  following       which it can reach the ready state.
      purposes:                                                 Is more than one sequence of state transitions
      a. Request to receive a message                           possible in each of these cases?
      b. Request to perform an I/O operation               5.6  The designer of a kernel has decided to use a sin-
      c. Request for status information concerning a            gle swapped state. Give a diagram analogous to
          process                                               Figure 5.5 showing process states and state tran-
      d. Request to create a process                            sitions. Describe how the kernel would perform
      e. Request to terminate a child process                   swapping and comment on the effectiveness of
5.2   Describe the conditions under which a kernel              swapping.
      may perform dispatching without performing           5.7  Compare and contrast inherent parallelism in
      scheduling.                                               the following applications:
5.3   Give an algorithm to implement a Unix-like                a. An online banking application which per-
      wait call using the PCB data structure shown              mits users to perform banking transactions
      in Table 5.6. Comment on comparative lifetimes            through a Web-based browser.
      of a process and its PCB.                                 b. A Web-based airline reservation system.
5.4   Describe how each signal listed in Table 5.9 is      5.8  An airline reservation system using a centralized
      raised and handled in Unix.                               database services user requests concurrently. Is
5.5   A process is in the blocked swapped state.                it preferable to use threads rather than pro-
      a. Give a sequence of state transitions through           cesses in this system? Give reasons for your
          which it could have reached this state.               answer.



162      Part 2  Process Management
5.9   Name two system calls a thread should avoid           5.14  Comment on computation speedup of the fol-
      using if threads are implemented at the user level,         lowing applications in computer systems having
      and explain your reasons.                                   (i) a single CPU and (ii) many CPUs.
5.10  As described in Example 5.7 and illustrated in              a. Many threads are created in a server that
      Figure 5.16, if a process has user-level threads,              handles user requests at a large rate, where
      its own state depends on states of all of its                  servicing of a user request involves both CPU
      threads. List the possible causes of each of the               and I/O activities.
      fundamental state transitions for such a process.           b. Computation of an expression z := a  b +
5.11  Explain whether you agree with the following                   cd      is  performed      by  spawning  two  child
      statement on the basis of what you read in this                processes to evaluate a  b and c  d.
      chapter: "Concurrency increases the scheduling              c. A server creates a new thread to handle every
      overhead without providing any speedup of an                   user request received, and servicing of each
      application program."                                          user request involves accesses to a database.
5.12  On the basis of the Solaris case study, write a             d. Two matrices contain m rows and n columns
      short note on how to decide the number of user                 each, where m and n are both very large. An
      threads and lightweight processes (LWPs) that                  application obtains the result of adding the
      should be created in an application.                           two matrices by creating m threads, each of
5.13  An OS supports both user-level threads and                     which performs addition of one row of the
      kernel-level threads. Do you agree with the fol-               matrices.
      lowing  recommendations    about      when  to  use   5.15  Compute the best computation speedup in the
      user-level threads and when kernel-level threads?           real-time      data  logging  application   of  Exam-
      Why, or why not?                                            ple 5.1 under the following conditions: The over-
      a. If a candidate for a thread is a CPU-bound               head of event handling and process switching
         computation, make it a kernel-level thread               is negligible. For each sample, the copy_sample
         if the system contains multiple processors;              process requires 5 microseconds (s) of CPU
         otherwise, make it a user-level thread.                  time, and does not involve any I/O operation,
      b. If a candidate for a thread is an I/O-bound              record_sample requires 1.5 ms to record the sam-
         computation, make it a user-level thread if              ple and consumes only 1 s of CPU time, while
         the process containing it does not contain               housekeeping consumes 200 s of CPU time and
         a kernel-level thread; otherwise, make it a              its write operation requires 1.5 ms.
         kernel-level thread.
CLASS PROJECT: IMPLEMENTING A SHELL                                                                                  ·
Write a program in C/C++, which will act as a shell in      ls                   Lists information about files
a Unix or Linux system. When invoked, the program                                in the current directory.
will display its own prompt to the user, accept the user's  rm                   Deletes indicated files.
command from the keyboard, classify it, and invoke an                            Supports options -r, -f, -v.
appropriate routine to implement it. The command "sys-      history n            Prints the most recent n
tem" should not be used in implementing any command                              commands issued by the user,
other than the ls command. The shell must support the                            along with their serial numbers.
following commands:                                                              If n is omitted, prints all
                                                                                 commands issued by the user.
                                                            issue n              Issues the nth command in the
Command                 Description                                              history once again.
                                                            <program_name>       Creates a child process to run
cd <directory_name>     Changes current directory                                <program_name>. Supports
                        if user has appropriate                                  the redirection operators > and
                        permissions.                                             < to redirect the input and



                                                                         Chapter 5     Processes and Threads               163
                         output of the program to                        rmexcept <list_of_files> which removes all files
                         indicated files.                                except those in <list_of_files> from the current
<program_name> &         The child process for                           directory.
                         <program_name> should be                   2.   Support a command <program_name> m that cre-
                         run in the background.                          ates a child process to execute program_name, but
quit                     Quits the shell.                                aborts the process if it does not complete its opera-
After implementing a basic shell supporting these com-                   tion in m seconds. (Hint: Use an appropriate routine
mands, you should add two advanced features to the                       from the library to deliver a SIGALRM signal after
shell:                                                                   m seconds, and use a signal handler to perform
                                                                         appropriate actions.)
1.    Design   a   new  command        that    provides  a  use-
      ful facility. As an example, consider a command
BIBLIOGRAPHY                                                                                                                    ·
The process concept is discussed in Dijkstra (1968),                     management of parallelism," ACM Transactions
Brinch Hansen (1973), and Bic and Shaw (1974). Brinch                    on Computer Systems, 10 (1), 53­79.
Hansen (1988) describes implementation of processes in              2.   Bach, M. J. (1986): The Design of the Unix
the RC 4000 system.                                                      Operating System, Prentice Hall, Englewood
      Marsh et al. (1991) discusses user-level threads and               Cliffs, N.J.
issues concerning thread libraries. Anderson et al. (1992)          3.   Beck, M., H. Bohme, M. Dziadzka, U. Kunitz,
discusses use of scheduler activations for communica-                    R. Magnus, C. Schroter, and D. Verworner
tion between the kernel and a thread library. Engelschall                (2002): Linux Kernel Programming, 3rd ed.,
(2000) discusses how user-level threads can be imple-                    Pearson Education, New York.
mented in Unix by using standard Unix facilities, and               4.   Bic, L., and A. C. Shaw (1988): The Logical
also    summarizes     properties  of  other   multithreading            Design of Operating Systems, 2nd ed., Prentice
packages.                                                                Hall, Englewood Cliffs, N.J.
      Kleiman (1996), Butenhof (1997), Lewis and Berg               5.   Brinch Hansen, P. (1970): "The nucleus of a
(1997), and Nichols et al. (1996) discuss programming                    multiprogramming system," Communications of
with POSIX threads. Lewis and Berg (2000) discusses                      the ACM, 13, 238­241, 250.
multithreading in Java.                                             6.   Brinch Hansen, P. (1973): Operating System
      Bach (1986), McKusick (1996), and Vahalia (1996)                   Principles, Prentice Hall, Englewood
discuss processes in Unix. Beck et al. (2002) and Bovet                  Cliffs, N.J.
and Cesati (2005) describes processes and threads in                7.   Bovet, D. P., and M. Cesati (2005): Understanding
Linux. Stevens and Rago (2005) describes processes and                   the Linux Kernel, 3rd ed., O'Reilly, Sebastopol.
threads in Unix, Linux, and BSD; it also discusses dae-             8.   Butenhof, D. (1997): Programming with POSIX
mon     processes  in   Unix.  O'Gorman        (2003)    discusses       threads, Addison-Wesley, Reading,
implementation      of  signals    in  Linux.  Eykholt   et  al.         Mass.
(1992) describes threads in SunOS, while Vahalia (1996)             9.   Custer, H. (1993): Inside Windows/NT, Microsoft
and     Mauro  and     McDougall       (2006)  describe  threads         Press, Redmond, Wash.
and LWPs in Solaris. Custer (1993), Richter (1999), and             10.  Dijkstra, E. W. (1968): "The structure of THE
Russinovich and Solomon (2005) describe processes and                    multiprogramming system," Communications of
threads in Windows. Vahalia (1996) and Tanenbaum                         the ACM, 11, 341­346.
(2001) discuss threads in Mach.                                     11.  Engelschall, R. S. (2000): "Portable
                                                                         Multithreading: The signal stack trick for
1.      Anderson, T. E., B. N. Bershad, E. D. Lazowska,                  user-space thread creation," Proceedings of the
        and H. M. Levy (1992): "Scheduler activations:                   2000 USENIX Annual Technical Conference,
        effective kernel support for the user-level                      San Diego.



164  Part 2         Process Management
12.  Eykholt, J. R, S. R. Kleiman, S. Barton,                Implementation of the 4.4 BSD Operating System,
     S. Faulkner, A. Shivalingiah, M. Smith, D. Stein,       Addison Wesley, Reading, Mass.
     J. Voll, M. Weeks, and D. Williams (1992):         19.  Nichols, B., D. Buttlar, and J. P. Farrell (1996):
     "Beyond multiprocessing: multithreading the             Pthreads Programming, O'Reilly, Sebastopol.
     SunOS kernel," Proceedings of the Summer 1992      20.  O'Gorman, J. (2003): Linux Process Manager:
     USENIX Conference, 11­18.                               The internals of Scheduling, Interrupts and
13.  Kleiman, S., D. Shah, and B. Smaalders (1996):          Signals, John Wiley, New York.
     Programming with Threads, Prentice Hall,           21.  Richter, J. (1999): Programming Applications for
     Englewood Cliffs, N.J.                                  Microsoft Windows, 4th ed., Microsoft Press,
14.  Lewis, B., and D. Berg (1997): Multithreaded            Redmond, Wash.
     Programming with Pthreads, Prentice Hall,          22.  Russinovich, M. E., and D. A. Solomon (2005):
     Englewood Cliffs, N.J.                                  Microsoft Windows Internals, 4th ed., Microsoft
15.  Lewis, B., and D. Berg (2000): Multithreaded            Press, Redmond, Wash.
     Programming with Java Technology, Sun              23.  Silberschatz, A., P. B. Galvin, and G. Gagne
     Microsystems.                                           (2005): Operating System Principles, 7th ed., John
16.  Mauro, J., and R. McDougall (2006): Solaris             Wiley, New York.
     Internals, 2nd ed., Prentice Hall, Englewood       24.  Stevens, W. R., and S. A. Rago (2005): Advanced
     Cliffs, N.J.                                            Programming in the Unix Environment, 2nd ed.,
17.  Marsh, B. D., M. L. Scott, T. J. LeBlanc, and           Addison-Wesley, Reading, Mass.
     E. P. Markatos (1991): "First-class user-level     25.  Tanenbaum, A. S. (2001): Modern Operating
     threads," Proceedings of the Thirteenth ACM             Systems, 2nd ed., Prentice Hall, Englewood
     Symposium on Operating Systems Principles,              Cliffs, N.J.
     October 1991, 110­121.                             26.  Vahalia, U. (1996): Unix Internals--The
18.  McKusick, M. K., K. Bostic, M. J. Karels,               New Frontiers, Prentice Hall, Englewood
     and J. S. Quarterman (1996): The Design and             Cliffs, N.J.
