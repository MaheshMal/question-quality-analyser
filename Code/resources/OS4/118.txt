Case Studies
Previous sections discussed the structure of an operating system, that is, arrange-
ment of its parts, and properties of these arrangements. In this section, we discuss
both structure and architecture of some modern operating systems, where archi-
tecture concerns the structure of the operating system as well as functionalities
of its components and relationships between them. Design and implementation
features of specific OS components are described in relevant chapters of Parts 2 ­ 4
of this text.



98  Part 1  Overview
            4.8.1 Architecture of Unix
            Unix is a kernel-based operating system. Figure 4.8 is a schematic diagram of the
            Unix kernel. It consists of two main components--process management and file
            management. The process management component consists of a module for inter-
            process communication, which implements communication and synchronization
            between processes, and the memory management and scheduling modules. The
            file management component performs I/O through device drivers. Each device
            driver handles a specific class of I/O devices and uses techniques like disk schedul-
            ing to ensure good throughput of an I/O device. The buffer cache is used to reduce
            both the time required to implement a data transfer between a process and an
            I/O device, and the number of I/O operations performed on devices like disks (see
            Section 1.4.4).
                      The process management and file management components of the kernel are
            activated through interrupts raised in the hardware, and system calls made by
            processes and nonkernel routines of the OS. The user interface of the OS is a
            command interpreter, called a shell, that runs as a user process. The Unix kernel
            cannot be interrupted at any arbitrary moment of time; it can be interrupted only
            when a process executing kernel code exits, or when its execution reaches a point
            at which it can be safely interrupted. This feature ensures that the kernel data
            structures are not in an inconsistent state when an interrupt occurs and another
            process starts executing the kernel code, which considerably simplifies coding of
            the kernel (see Section 2.3.2).
                      The Unix kernel has a long history of over four decades. The original kernel
            was small and simple. It provided a small set of abstractions, simple but power-
            ful features like the pipe mechanism, which enabled users to execute several
            programs concurrently, and a small file system that supported only one file
            organization called the byte stream organization. All devices were represented
            as files, which unified the management of I/O devices and files. The kernel was
                                               Nonkernel routines
                                                                  System calls
                           Interrupts                                                         Kernel
                           File management                        Interprocess
                                               Scheduler          communi-            Memory
                             Buffer cache                          cation             management
                           Device drivers                         Process management
                                               Hardware
            Figure    4.8  Kernel of the Unix  operating system.



                                             Chapter 4            Structure of Operating  Systems  99
written in the C language and had a size of less than 100 KB. Hence it was easily
portable.
     However, the Unix kernel was monolithic and not very extensible. So it
had  to  be  modified  as  new  computing    environments,  like  the     client­server
environment, evolved. Interprocess communication and threads were added to
support client­server computing. Networking support similarly required kernel
modification.
     A major strength of Unix was its use of open standards. It enabled a large
number of organizations ranging from the academia to the industry to partic-
ipate in its development, which led to widespread use of Unix, but also led
to the development of a large number of variants because of concurrent and
uncoordinated development. The kernel became bulky, growing to a few million
bytes in size, which affected its portability. Around this time, a feature was added
to dynamically load kernel modules in memory. It enabled kernel modules to be
loaded only when needed. This feature reduced the memory requirement of the
kernel, but not its code size. Hence it did not enhance its portability.
     Several efforts have been made to redesign the Unix kernel to make it modular
and extensible. The Mach kernel, which has a specific emphasis on multiprocessor
systems, is an example of this trend. Later Mach developed into a microkernel-
based operating system.
4.8.2 The Kernel of Linux
The Linux operating system provides the functionalities of Unix System V
and Unix BSD; it is also compliant with the POSIX standard. It was initially
implemented on the Intel 80386 and has since been implemented on later Intel
processors and several other architectures.
     Linux has a monolithic kernel. The kernel is designed to consist of a set of
individually loadable modules. Each module has a well-specified interface that
indicates how its functionalities can be invoked and its data can be accessed by
other modules. Conversely, the interface also indicates the functions and data
of other modules that are used by this module. Each module can be individu-
ally loaded into memory, or removed from it, depending on whether it is likely
to be used in near future. In principle, any component of the kernel can be
structured as a loadable module, but typically device drivers become separate
modules.
     A few kernel modules are loaded when the system is booted. A new kernel
module is loaded dynamically when needed; however, it has to be integrated
with the kernel modules that already existed in memory so that the modules
can collectively function as a monolithic kernel. This integration is performed as
follows: The kernel maintains a table in which it records the addresses of functions
and data that are defined in the modules existing in memory. While loading a new
module, the kernel analyzes its interface and finds which functions and data of
other modules it uses, obtains their addresses from the table, and inserts them in
appropriate instructions of the new module. At the end of this step, the kernel



100  Part 1  Overview
             updates its table by adding the addresses of functions and data defined in the new
             module.
                       Use of kernel modules with well-specified interfaces provides several advan-
             tages. Existence of the module interface simplifies testing and maintenance of
             the kernel. An individual module can be modified to provide new functionalities
             or enhance existing ones. This feature overcomes the poor extensibility typically
             associated with monolithic kernels. Use of loadable modules also limits the mem-
             ory requirement of the kernel, because some modules may not be loaded during
             an operation of the system. To enhance this advantage, the kernel has a feature
             to automatically remove unwanted modules from memory--it produces an inter-
             rupt periodically and checks which of its modules in memory have not been used
             since the last such interrupt. These modules are delinked from the kernel and
             removed from memory. Alternatively, modules can be individually loaded and
             removed from memory through system calls.
                       The Linux 2.6 kernel, which was released in 2003, removed many of the
             limitations of the Linux 2.5 kernel and also enhanced its capabilities in several
             ways. Two of the most prominent improvements were in making the system more
             responsive and capable of supporting embedded systems. Kernels up to Linux 2.5
             were non-preemptible, so if the kernel was engaged in performing a low-priority
             task, higher-priority tasks of the kernel were delayed. The Linux 2.6 kernel is
             preemptible, which makes it more responsive to users and application programs.
             However, the kernel should not be preempted when it is difficult to save its state,
             or when it is performing sensitive operations, so the kernel disables and enables
             its own preemptibility through special functions. The Linux 2.6 kernel can also
             support architectures that do not possess a memory management unit (MMU),
             which makes it suitable for embedded systems. Thus, the same kernel can now be
             used in embedded systems, desktops and servers. The other notable feature in the
             Linux 2.6 kernel is better scalability through an improved model of threads, an
             improved scheduler, and fast synchronization between processes; these features
             are described in later chapters.
             4.8.3 The Kernel of Solaris
             Early operating systems for Sun computer systems were based on BSD Unix;
             however, later development was based on Unix SVR4. The pre-SVR4 versions
             of the OS are called SunOS, while the SVR4-based and later versions are called
             Solaris. Since the 1980s, Sun has focused on networking and distributed com-
             puting; several networking and distributed computing features of its operating
             systems have become industry standards, e.g., remote procedure calls (RPC), and
             a file system for distributed environments (NFS). Later, Sun also focused on mul-
             tiprocessor systems, which resulted in an emphasis on multithreading the kernel,
             making it preemptible (see Section 2.3.2), and employing fast synchronization
             techniques in the kernel.
                       The Solaris kernel has an abstract machine layer that supports a wide range
             of processor architectures of the SPARC and Intel 80x86 family, including multi-
             processor architectures. The kernel is fully preemptible and provides real-time



                                                      Chapter 4   Structure of Operating  Systems  101
capabilities. Solaris 7 employs the kernel-design methodology of dynamically
loadable kernel modules (see Section 4.6.1). The kernel has a core module that
is always loaded; it contains interrupt servicing routines, system calls, process
and memory management, and a virtual file system framework that can sup-
port different file systems concurrently. Other kernel modules are loaded and
unloaded dynamically. Each module contains information about other modules
on which it depends and about other modules that depend on it. The ker-
nel maintains a symbol table containing information about symbols defined
in currently loaded kernel modules. This information is used while loading
and linking a new module. New information is added to the symbol table
after a module is loaded and some information is deleted after a module is
deleted.
   The Solaris kernel supports seven types of loadable modules:
·  Scheduler classes
·  File systems
·  Loadable system calls
·  Loaders for different formats of executable files
·  Streams modules
·  Bus controllers and device drivers
·  Miscellaneous modules
   Use of loadable kernel modules provides easy extensibility. Thus, new file
systems, new formats of executable files, new system calls, and new kinds of buses
and devices can be added easily. An interesting feature in the kernel is that when a
new module is to be loaded, the kernel creates a new thread for loading, linking,
and initializing working of the new module. This arrangement permits module
loading to be performed concurrently with normal operation of the kernel. It also
permits loading of several modules to be performed concurrently.
4.8.4 Architecture of Windows
Figure 4.9 shows architecture of the Windows OS. The hardware abstraction layer
(HAL) interfaces with the bare machine and provides abstractions of the I/O
interfaces, interrupt controllers, and interprocessor communication mechanisms
in a multiprocessor system. The kernel uses the abstractions provided by the
HAL to provide basic services such as interrupt processing and multiprocessor
synchronization. This way, the kernel is shielded from peculiarities of a specific
architecture, which enhances its portability. The HAL and the kernel are together
equivalent to a conventional kernel (see Figure 4.6). A device driver also uses the
abstractions provided by the HAL to manage I/O operations on a class of devices.
   The kernel performs the process synchronization and scheduling functions.
The executive comprises nonkernel routines of the OS; its code uses facilities in
the kernel to provide services such as process creation and termination, virtual
memory management, an interprocess message passing facility for client­server
communication called the local procedure call (LPC), I/O management and a file
cache to provide efficient file I/O, and a security reference monitor that performs
