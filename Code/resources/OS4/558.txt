Summary
Computer users have many expectations of a file                 organizations suit sequential and random access
system--convenience, good performance of a file                 to records in a file, respectively. Several hybrid
processing activity, and efficient use of I/O devices.          organizations, such as the index sequential organi-
To deal with these concerns effectively, the file sys-          zation, are also widely used. Second, a file system
tem is structured into two layers: The file system              allows users to group related files logically and con-
layer deals with convenience issues such as sharing             veniently by creating files and directories to any
and protection of files and reliability; the input-             desired level. Third, it allows a user to specify which
output control system (IOCS) layer implements file              other users may access his files in what manner,
operations and deals with efficiency issues. In this            which facilitates sharing and protection of files.
chapter, we discussed the techniques of file systems.           The file system allocates disk space to a file
A file may be a structured file, i.e., it may con-              such that fragmentation of disk space is avoided
tain records of data, or it may be an unstructured,             and file data can be accessed efficiently. Indexed
or byte stream, file. A file system provides con-               allocation of disk space to a file uses a disk block
venience to its users through three means. First,               or an extent as the unit of disk space for alloca-
it provides different file organizations, where each            tion. The disk blocks or extents allocated to a file
organization suits a specific pattern of accessing              are confined to cylinder groups to ensure efficient
records in a file--it provides a method of arranging            access to file data. Information concerning the disk
records of a file on an I/O device and access-                  space allocated to a file is stored in a file map table
ing them efficiently. The sequential and direct file            (FMT).



538       Part 4     File Systems and I/O Management
     Before reading from or writing into a file, a             inconsistent by faults such as power outages. It is
process has to open the file by specifying its path            achieved through an atomic action, which ensures
name in the directory structure. The file system               that all actions in a set of related actions are com-
traverses the path name, determines which file is              pleted even if faults occur. An atomic action incurs
being opened, and sets up a file control block (FCB)           considerable overhead, therefore journaling file sys-
to contain information such as the file's type and             tems provide a menu of reliability modes that guard
organization, address of its FMT, and address of its           data and metadata to different extents, so that a
next record. When the process wishes to perform                system administrator can choose the mode that is
a read or write operation, the file system passes              cost-effective for a computing environment.
the FCB to the IOCS, and the IOCS implements                   A virtual file system (VFS) is a software layer
the operation, using the information accessible                that permits several file systems to be in opera-
through the FCB. The file system specifies the file            tion on a computer system simultaneously, so that
sharing semantics, which determine how the results             a user can choose the file system that is most
of a file update made by a process should be visible           suitable for his application. The VFS provides a
to other processes using the file concurrently.                unified method of accessing different file systems.
     The file system ensures reliability of opera-             A process invokes the VFS layer using generalized
tion by ensuring that the file data and metadata               commands to access files, and the VFS layer directs
such as FMTs and FCBs are not lost or made                     the commands to the appropriate file system.
TEST  YOUR CONCEPTS                                                                                                    ·
13.1  Classify each of the following statements as true        g.    During creation of a new file in a mounted
      or false:                                                      file system, the file is allocated disk space
      a. Allocation of contiguous disk space for a                   in the logical disk used by the mounted file
          sequential-access file leads to more efficient             system.
          file processing than allocation of noncontigu-       h.    The effect of mounting a file system is similar
          ous disk space.                                            to that of setting up a link in the directory
      b. Cycles in the directory structure create diffi-             structure, except that the effect is obliterated
          culties with the file deletion operation.                  when the file system is unmounted.
      c. Absolute path names for two different files           i.    When a user updates the data in a single-
          cannot be identical, whereas their relative                image mutable file, changes made to the file
          path names could be identical.                             are not immediately visible to users concur-
      d. The purpose of the file control block (FCB)                 rently using the file.
          is to facilitate a file open operation; the FCB      j.    When a fault occurs, a single incremental
          can be deleted immediately after the file is               backup is adequate for restoring the entire
          opened.                                                    file system to a previous consistent state.
      e.  When    a  file   is  closed  after  updating,  the  k.    Journaling incurs overhead during operation
          directory containing the file may have to be               of a file system.
          updated as well.                                     l.    A virtual file system permits use of many file
      f. Maintaining a file's file map table (FMT)                   systems in a computer; however, these file
          in memory while the file is being processed                systems cannot be used concurrently.
          reduces the number of disk accesses during           13.2  Select the appropriate alternative in each of
          file processing.                                           the following questions:



                                                                                     Chapter 13      File Systems           539
      a. The       file  control  block     (FCB)      of  a  file  b.    The stable storage technique is:
          alpha:                                                          i.    A fault tolerance technique that is used to
             i.    Contains only information copied from                        recover from two faulty blocks on a disk
                   the directory entry of alpha                           ii.   A recovery technique used to recover the
             ii.   Is used to avoid frequent accesses to the                    file system after a power failure
                   directory entry of alpha                               iii.  A fault tolerance technique that is used to
             iii.  Is    used  only     to  protect  file  alpha                recover from one faulty block on a disk
                   against invalid accesses                               iv.   None of the above
EXERCISES                                                                                                                        ·
13.1  A file named data is frequently accessed by                         If all records in the index sequential file have the
      users in a system. The following alternatives are                   same probability of being accessed, show that
      proposed to simplify access to data.                                access efficiency of the file will be affected by the
      a. Set up links from every user's home directory                    presence of records in the overflow area. Can
          to data.                                                        access efficiency be restored by rewriting the file
      b. Copy data into every user's home directory.                      as a new file that does not contain any overflow
      Compare the advantages and drawbacks of these                       records?
      approaches.                                                   13.4  The Amoeba distributed operating system uses
13.2  An index sequential file contains 10,000 records.                   contiguous allocation of disk space. When a file
      Its index contains 100 entries. Each index entry                    is updated, it writes the updated file as a new file
      describes an area of the file that contains 100                     and deletes its old copy.
      records.     If    all   records  in  the  file  have   the         Comment on the advantages and drawbacks of
      same probability of being accessed, calculate                       this approach.
      the average number of disk operations involved                13.5  Does noncontiguous allocation of disk space
      in  accessing      a    record.   Compare      this  number         influence  the  feasibility   and  effectiveness       of
      with the number of disk operations required if                      the fundamental file organizations discussed in
      the same records were stored in a sequential                        Section 13.3?
      file.                                                         13.6  A file system uses indexed disk space allocation.
13.3  Consider the index sequential file of Figure 13.5.                  The size of each disk block is 4 KB and each disk
      The following problem arises when a new record,                     block address is 4 bytes in length. The size of the
      say record for employee number 8 (we will call                      FMT is one disk block. It contains 12 pointers
      it record 8), is added to it. There is no space                     to data blocks. All other pointers point to index
      to store the new record on the track. Hence the                     blocks.
      access method takes out record 13 from the track                    A sequential file info contains 5000 records,
      and shifts records 10 and 12 to make space for                      each of size 4 KB. Characteristics of the disk and
      the new record. Record 13 is now put into an                        of a process that reads and processes all records
      overflow area. A new field called overflow area                     in file info are as follows:
      pointer is added to each entry in the track index.                  Average time to read a disk block = 3 ms
      This field in the first entry of the track index is                 Average time to process a record = 5 ms
      set to point to record 13 in the overflow area. If
      more records overflow out of the first track, they                  Calculate the elapsed time of the process under
      are put into a linked list and the overflow area                    the following conditions:
      pointer of the track index points to the head of                    a. The file system keeps the FMT in memory,
      the list. Similar linked lists may be formed for                    but does not keep any index blocks in memory
      several tracks over a period of time.                               while processing info.



540          Part 4  File Systems and I/O Management
       b. The file system keeps the FMT and one index                           directory structure rooted at X is mounted in
           block of info in memory.                                             directory Y/A. It should be possible to access
13.7   A new record is to be added to the file info of                          file D as ..Y/A/B/D.
       Problem 13.15.1. What is the minimum number                          b. Multiple    mounts:     The    directory       structure
       of disk operations required to reflect this change                       rooted at some directory, say, W, is mounted
       in info on the disk? What is the maximum                                 at many mount points simultaneously.
       number?                                                       13.13  When indexed allocation is used for files, explain
13.8   A file system uses indexed allocation of disk                        how a disk block may occur in more than one
       space;    however,     it  permits     a  sequential    file         file if a fault occurs.
       to  contain   partially       full  disk  blocks.   What      13.14  Let  Algorithm    13.1     be  rewritten      as  follows:
       are the advantages and disadvantages of this                         1. dj .next := d1.next;
       scheme?                                                              2. d1.next := address (dj );
13.9   A file system uses contiguous allocation of disk                     3. Write dj to disk.
       space. The sequential access method handles                          4. Write d1 to disk.
       bad blocks on a disk as follows: If an error occurs                  Does this modified algorithm           prevent    mix-up
       while reading/writing a block, it consults the bad                   between files in the event of a fault?
       blocks table that is itself stored on the disk and            13.15  Explain how the byte offset into a Unix file can
       accesses the alternative disk block assigned to                      be converted into the pair (<disk block id>,
       the bad block. Assuming all disk accesses to                         <byte offset>).
       require identical access times, calculate degra-              13.16  By   default,  Unix      assigns  the  files   stdin  and
       dation in file access performance if 2 percent                       stdout to the keyboard and terminal, respec-
       of the disk blocks allocated to a file are bad                       tively. A user can use the redirection operators
       blocks. Suggest a method to improve the access                       < and > in a command to override the default
       performance.                                                         assignments and use some other files for input
13.10  To reduce the overhead of file access valida-                        and output. The "redirect and append" operator
       tion  (see    Step  2  of     Section     13.9.2),  an  OS           >> appends the output of a process to the end
       designer proposes to perform validation only at                      of an existing file. The default assignments of
       file "open" time. As mentioned in Section 13.9.1,                    the files are restored at the end of the command.
       the open statement specifies the kind of accesses                    These features can be implemented by perma-
       which will be made to the file, e.g., open          (abc,            nently associating FCBs for stdin and stdout with
       `read',       ..).  Is     a  single   access  validation            each process.
       check at file open time adequate? If not, explain                    a. Describe the file system actions involved in
       why. In either case, suggest an implementation                           implementing      the  default     assignments    for
       outline.                                                                 stdin and stdout and the redirection operators
13.11  Step 2 of Section 13.9.1 creates an FCB for every                        < and >.
       directory appearing in a path name.                                  b. Describe the file system actions involved in
       a. Is this arrangement adequate when a relative                          implementing the >> operator.
           path name is used?                                        13.17  Disk blocks allocated to a file are added to
       b. Are these entries necessary if a file is being                    the free list when the file is deleted. Write an
           opened for reading?                                              algorithm to perform this operation in Unix.
       c. Can the number of FCBs created per file be                 13.18  The Unix file system associates a lock field with
           reduced?                                                         the free list (see Section 13.14.1). Classify the
13.12  Explain how the following features can be incor-                     following statement as true or false: "Locking
       porated in a file system:                                            of the free list is necessary due to the nature
       a.  Cascaded  mounts:         Directory   C    contains  a           of   Unix  processes.    Such     locking  is     unneces-
           file D. The directory structure rooted at C                      sary in an OS using the conventional process
           is mounted at mount point X/B. Later, the                        model."



                                                                                             Chapter 13  File Systems             541
BIBLIOGRAPHY                                                                                                                      ·
Organick (1972) is historically the most important paper                  3.   Bina, E. J., and P. A. Emrath (1989): "A faster
on directory structures, since the MULTICS directory                           fsck for BSD UNIX," Proceedings of the Winter
structure has influenced most contemporary file sys-                           1989 USENIX Technical Conference, 173­185.
tems like Unix, Linux, Solaris, and Windows. USENIX                       4.   Bovet, D. P., and M. Cesati (2005): Understanding
(1992)    contains      proceedings    of   a   file  system      work-        the Linux Kernel, 3rd ed., O'Reilly, Sebastopol,
shop. Grosshans (1986), Weiderhold (1987), and Livadas                         Calif.
(1990) discuss file organizations and file systems.                       5.   Burrows, M., C. Jerian, B. Lampson, and
        McKusick et al. (1990) describes a memory-based                        T. Mann (1992): "On-line data compression in a
file system, which provides memory-mapped files and                            log-structured file system," ACM Sigplan Notices,
directory  structures      implemented         in  pageable       mem-         27, 9, 2­9.
ory. Levy and Silberschatz (1990) discusses file shar-                    6.   Florido, J. I. S. (2000): "Journal file systems,"
ing     semantics.      Lampson  (1981)     describes      the    stable       Linux Gazette, issue 55.
storage   technique     for    reliability  of     disk    data,  while   7.   Grosshans, D. (1986): File Systems: Design and
Svobodova      (1984)   surveys        how  atomic         actions  are        Implementation, Prentice Hall, Englewood Cliffs,
performed in various file servers. Florido (2000) dis-                         N.J.
cusses design of journaling file systems. Kleiman (1986)                  8.   Kleiman, S. R. (1986): "Vnodes: an architecture
describes the virtual file system design. Vahalia (1996)                       for multiple file system types in Sun Unix,"
describes the Unix virtual file system interface. Rosen-                       Proceedings of the Summer 1986 USENIX
blum and Ousterhout (1992) discusses design of the                             Technical Conference, 238­247.
Sprite log-structured file system, while Matthews et al.                  9.   Kowalski, T. (1978): "Fsck--the Unix system
(1997) discusses adaptive methods for improving the                            check program," Bell Laboratories, Murray Hill,
performance of log-structured file systems. McKusick                           N.J.
et   al.  (1996)    discusses  the   log-structured        file   system  10.  Lampson, B. W. (1981): "Atomic transactions," in
of Unix 4.4 BSD.                                                               Distributed systems--Architecture and
        Bach (1986) and Vahalia (1996) describe the Unix                       Implementation: An Advanced Course, Goos, G.,
file system. Kowalski (1978) describes the Unix program                        and J. Hartmanis (eds), Springer Verlag, Berlin,
used to check file system integrity. This program looks                        246­265.
through every file system data structure on disk. Bina                    11.  Levy, H. M., and A. Silberschatz (1990):
and Emrath (1989) discusses how the file system integrity                      "Distributed file systems: concepts and
checks can be speeded up in the Unix file system. Beck                         examples," ACM Computing Surveys, 22, 4,
et al. (2002) and Bovet and Cesati (2005) discuss the                          321­374.
ext2 file system of Linux. Mauro and McDougall (2006)                     12.  Livadas, P. (1990): File Structures: Theory and
discusses the Solaris file system. Nagar (1997) and Russi-                     Practice, Prentice Hall, Englewood Cliffs, N.J.
novich    and     Solomon      (2005)  describe       the  NTFS     file  13.  Love, R. (2005): Linux Kernel Development,
system of Windows.                                                             2nd ed., Novell Press.
                                                                          14.  Matthews, J. N., D. Roselli, A. M. Costello,
    1.                                                                         R. Y. Wang, and T. E. Anderson (1997):
          Bach, M. J. (1986): The Design of the Unix                           "Improving the performance of log-structured file
          Operating System, Prentice Hall, Englewood                           systems with adaptive methods," Proceedings of
          Cliffs, N.J.                                                         Sixteenth Symposium on Operating Systems
    2.    Beck, M., H. Bohme, M. Dziadzka, U. Kunitz,                          Principles, 238­251.
          R. Magnus, C. Schroter, and D. Verworner                        15.  Mauro, J., and R. McDougall (2006): Solaris
          (2002): Linux Kernel Programming, Pearson                            Internals, 2nd ed., Prentice-Hall, Englewood
          Education, New York.                                                 Cliffs, N.J.



542  Part 4  File Systems and I/O Management
16.  McKusick, M. K., K. Bostic, M. Karels, and           log-structured file system," ACM Transactions on
     J. S. Quarterman (1996): The Design and              Computer Systems, 10, 2, 26­52.
     Implementation of the 4.4BSD Operating System,  21.  Russinovich, M. E., and D. A. Solomon (2005):
     Addison Wesley, Reading, Mass.                       Microsoft Windows Internals, 4th ed., Microsoft
17.  McKusick, M. K., M. Karels, and K. Bostic            Press, Redmond, Wash.
     (1990): "A pageable memory based filesystem,"   22.  Svobodova, L. (1984): "File servers for
     Proceedings of the Summer 1990 USENIX                network-based distributed systems," ACM
     Technical Conference, 137­144.                       Computing Surveys, 16, 4, 353­398.
18.  Nagar, R. (1997): Windows NT File System        23.  USENIX (1992): Proceedings of the File Systems
     Internals, O'Reilly, Sebastopol, Calif.              Workshop, Ann Arbor, Mich., May 1992.
19.  Organick, E. I. (1972): The MULTICS System,     24.  Vahalia, U. (1996): Unix Internals: The New
     MIT Press, Cambridge, Mass.                          Frontiers, Prentice Hall, Englewood Cliffs, N.J.
20.  Rosenblum, M., and J. K. Ousterhout (1992):     25.  Weiderhold, G. (1987): File Organization for
     "The design and implementation of a                  Database Design, McGraw-Hill, New York.
