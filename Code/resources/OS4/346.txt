Higher-Level Protocols Using Message Passing
In this section, we discuss three protocols that use the message passing paradigm
to provide diverse services. The simple mail transfer protocol (SMTP) delivers
electronic mail. The remote procedure call (RPC) is a programming language
facility for distributed computing; it is used to invoke a part of a program that
is located in a different computer. Parallel virtual machine (PVM) and message
passing interface (MPI) are message passing standards for parallel programming.
9.4.1 The Simple Mail Transfer Protocol (SMTP)
SMTP is used to deliver electronic mail to one or more users reliably and effi-
ciently. It uses asymmetric naming (see Section 9.1.1). A mail would be delivered
to a user's terminal if the user is currently active; otherwise, it would be deposited
in the user's mailbox. The SMTP protocol can deliver mail across a number of
interprocess communication environments (IPCEs), where an IPCE may cover a
part of a network, a complete network, or several networks. SMTP is an applica-
tions layer protocol. It uses the TCP as a transport protocol and IP as a routing
protocol. Details of these networking layers, and details of reliable delivery are,
however, beyond the scope of this chapter; they are discussed later in Chapter 16.
     SMTP consists of several simple commands. The relevant ones for our pur-
poses are as follows: The MAIL command indicates who is sending a mail.
It contains a reverse path in the network, which is an optional list of hosts and
the name of the sender mailbox. The RCPT command indicates who is to receive
the mail. It contains a forward path that is an optional list of hosts and a desti-
nation mailbox. One or more RCPT commands can follow a MAIL command.
The DATA command contains the actual data to be sent to its destinations. After
processing the DATA command, the sender host starts processing of the MAIL



326  Part 2  Process Management
             command to send the data to the destination(s). When a host accepts the data
             for relaying or for delivery to the destination mailbox, the protocol generates a
             timestamp that indicates when the data was delivered to the host and inserts it at
             the start of the data. When the data reaches the host containing the destination
             mailbox, a line containing the reverse path mentioned in the MAIL command
             is inserted at the start of the data. The protocol provides other commands to
             deliver a mail to the user's terminal, to both the user's terminal and the user's
             mailbox, and either to the user's terminal or the user's mailbox. SMTP does not
             provide a mailbox facility in the receiver, hence it is typically used with either the
             Internet Message Access Protocol (IMAP) or the Post Office Protocol (POP);
             these protocols allow users to save messages in mailboxes.
             9.4.2 Remote Procedure Calls
             Parts of a distributed program are executed in different computers. The remote
             procedure call (RPC) is a programming language feature that is used to invoke
             such parts. Its semantics resemble those of a conventional procedure call. Its
             typical syntax is
                                 call <proc_id> (<message>);
             where <proc_id> is the id of a remote procedure and <message> is a list of param-
             eters. The call results in sending <message> to remote procedure <proc_id>. The
             result of the call is modeled as the reply returned by procedure <proc_id>. RPC
             is implemented by using a blocking protocol. We can view the caller­callee rela-
             tionship as a client­server relationship. Thus, the remote procedure is the server
             and a process calling it is a client. We will call the computers where the client and
             the server processes operate as the client node and server node, respectively.
             Parameters may be passed by value or by reference. If the architecture of the
             server node is different from that of the client node, the RPC mechanism performs
             appropriate conversion of value parameters. For reference parameters, the caller
             must construct systemwide capabilities for the parameters (see Chapter 15). These
             capabilities would be transmitted to the remote procedure in the message. Type
             checks on parameters can be performed at compilation time if the caller and
             the callee are integrated during compilation; otherwise, type checks have to be
             performed dynamically when a remote procedure call is made.
             The schematic diagram of Figure 9.9 depicts the arrangement used to imple-
             ment a remote procedure call. The server procedure is the remote procedure that
             is to be invoked. The client process calls the client stub procedure, which exists
             in the same node. The client stub marshals the parameters--collects the parame-
             ters, converts them into a machine-independent format, and prepares a message
             containing this representation of parameters. It now calls the server stub, which
             exists in the node that contains the remote procedure. The server stub converts
             the parameters into a machine-specific form and invokes the remote procedure.
             Results of the procedure call are passed back to the client process through the
             server stub and the client stub. Details concerning naming of the remote procedure
             and reliability of the remote procedure call are discussed later in Chapter 16.



                                                                                 Chapter 9  Message  Passing  327
               Client          Client                    Server          Server
               process         stub                      stub    procedure
                       Client                                    Server
                        node                                     node
Figure  9.9  Overview of a remote procedure call (RPC).
   Two standards for remote procedure calls--SunRPC and OSF/DCE--have
emerged and are in use widely. Their use simplifies making of RPCs, and makes
programs using RPCs portable across computers and their operating systems.
These standards specify an external representation of data for passing parameters
and results between the client and the server, and an interface compiler that
handles the drudgery of marshaling of parameters.
   The remote method invocation (RMI) feature of Java is an implementation of
the remote procedure call that is integrated with the Java language. The remote
method to be invoked is a method of some object. Parameters that are local objects
are passed by value, while nonlocal objects are passed by reference. Integra-
tion with the Java language simplifies naming of the remote method and reliably
passing parameters and results between the client and the server.
9.4.3 Message Passing Standards for Parallel Programming
A parallel program consists of a set of tasks that can be performed in parallel.
Such programs can be executed on a heterogeneous collection of computers or
on a massively parallel processor (MPP). Parallel programs use message passing
libraries that enable parallel activities to communicate through messages. Parallel
virtual machine (PVM) and message passing interface (MPI) are the two standards
that are used in coding message passing libraries. Both standards provide the
following facilities:
·  Point-to-point communication between two processes, using both symmet-
   ric and asymmetric naming, and collective communication among pro-
   cesses, which includes an ability to broadcast a message to a collection of
   processes.
·  Barrier synchronization between a collection of processes wherein a process
   invoking the barrier synchronization function is blocked until all processes
   in that collection of processes have invoked the barrier synchronization
   function.
·  Global operations for scattering disjoint portions of data in a message to
   different processes, gathering data from different processes, and performing
   global reduction operations on the received data.
