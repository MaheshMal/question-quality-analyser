Summary
Virtual memory is a part of the memory hierarchy       used in practice because they require less memory
consisting of memory and a disk. During operation      than the conventional page table.
of a process, some components of its address space     The virtual memory manager has to make two
exist in memory, while others reside on a disk. This   key decisions that influence the performance of a
arrangement permits the total memory require-          process: Which page should it remove from mem-
ments of a process to exceed size of the system's      ory to make space for a new page required by a
memory. It also permits a larger number of pro-        process, and how much memory should it allocate
cesses to exist in memory simultaneously, because      to a process? It uses a page replacement algorithm to
each of them occupies less memory than its own         decide which page should be removed from mem-
size. The performance of a process depends on the      ory. The empirical principle of locality of reference
rate at which its parts have to be loaded in mem-      indicates that a recently accessed page is more
ory from the disk. In this chapter, we studied the     likely to be accessed in future than a page that
techniques used by the kernel to ensure efficient      has not been recently accessed. Accordingly, the
operation of a process and good performance of         least recently used (LRU) page replacement algo-
the system.                                            rithm removes the page that has been least recently
Two basic actions in the operation of virtual          used. It possesses the stack property, which guaran-
memory using paging are address translation and        tees that the page fault rate would not increase if
demand loading of pages. The memory management         the memory allocation to a process is increased.
unit (MMU), which is a hardware unit, and the vir-     However,  it      is  expensive  to  collect  information
tual memory manager, which is a part of the kernel,    about when a page was last referenced. Hence
jointly implement these two actions. The mem-          MMUs typically provide a single bit for collecting
ory is divided into parts called page frames, whose    information about page references, and a class of
size matches the size of pages. The virtual memory     page replacement algorithms called the not recently
manager maintains a page table for each process        used (NRU) algorithms are used in practice. Clock
to indicate which of its pages exist in which page     algorithms are a widely used subclass of NRU
frames of memory. When an operand in the current       algorithms.
instruction in a process exists in one of the pages    The working set of a process is the collection
that is present in memory, the MMU obtains the         of distinct pages referenced by it recently. Its size
page frame number where it exists from the page        provides a useful pointer to how many pages of
table and uses it to compute the effective memory      the process should be in memory to ensure good
address of the operand. If the page is not in mem-     performance of the process. The virtual memory
ory, the MMU raises an interrupt called a page         manager can use the notion of working sets to
fault, and the virtual memory manager loads the        avoid the situation called thrashing in which most
page in memory. A fast translation look-aside buffer   processes in the system have insufficient amounts
(TLB) is used to speed up address translation; it      of memory allocated to them, so they produce page
caches some entries of page tables of processes. The   faults at a high rate and little useful work gets done
inverted page table and the multilevel page table are  in the system.



470         Part 3  Memory Management
     An operating system uses special techniques           memory, while memory mapping of files enables a
that exploit the virtual memory to speed up oper-          file to be treated as a part of the address space
ation of processes. The copy-on-write technique            of a process, thereby speeding up accesses to its
avoids keeping identical copies of shared pages in         data.
TEST  YOUR CONCEPTS                                                                                                     ·
12.1  Classify each of the following statements as true               the reference bit in the entry of page pi of
      or false:                                                       process Pk indicates:
      a. In a computer providing virtual memory, the                  i. Whether page pi is likely to be referenced
      number of bits in a logical address can exceed                        in the future
      the number of bits in a physical address.                       ii. Whether page pi will be the next page to
      b. A  page-out       operation  is  always  needed                    be referenced during operation of Pk
      in a page replacement operation, irrespec-                      iii. Whether page pi has been referenced since
      tive of whether the page being replaced is                            it was last loaded in memory
      dirty.                                                          iv. Whether        page  pi  is  the  most   recently
      c. Loss of protection can result if an entry in the                   referenced page of Pk
      translation look-aside buffer (TLB) that was                b.  During operation of a process Pk, the trans-
      made during operation of one process is used                    lation look-aside buffer contains:
      during operation of another process.                            i. Some arbitrary entries from the page table
      d. The inverted page table organization requires                      of Pk
      more       accesses   to   memory   during  address             ii. The most recently referenced entries of
      translation than the conventional organiza-                           the page table of Pk
      tion of page tables.                                            iii. The last few entries of the page table of
      e. The FIFO page replacement policy guaran-                           Pk
      tees that allocating more page frames to a                      iv. The least recently referenced entries of the
      program would reduce its page fault rate.                             page table of Pk
      f. If the virtual memory hardware provides a                c.  The stack property of a page replacement
      single reference bit and the reference bits in                  algorithm implies that if more memory would
      the page table entries of all memory-resident                   have been allocated to a process:
      pages      are  set,  the  LRU  page  replacement               i. Fewer page faults would have occurred
      algorithm degenerates to FIFO replacement.                      ii. More page faults would have occurred
      g. Page faults would not occur during operation                 iii. The number of page faults would have
      of a process if all pages included in the work-                       been smaller or the same
      ing set of a process are in memory at every                     iv. None of (i)­(iii)
      instant.                                                    d.  If pfri and pfrj are the page fault rates of
      h. Heavy page traffic implies that thrashing has                processes Pi and Pj when process Pi has 5
      occurred.                                                       percent of its pages in memory, process Pj
      i. If a single copy of a program C is shared by                 has 10 percent of its pages in memory, and the
      two processes A and B, pages of C should                        page replacement policy possesses the stack
      occupy identical positions in the page tables                   property, then:
      of processes A and B.                                           i.    pfri < pfrj
12.2  Select the most appropriate alternative in each                 ii.   pfri  pfrj
      of the following questions:                                     iii.  pfri > pfrj
      a. If the virtual memory hardware provides a                    iv.   Nothing can    be  said    about  the  relative
      single reference bit in an entry of a page table,                     magnitudes of pfri and pfrj



                                                                             Chapter 12      Virtual Memory           471
      e.   If pfri and pfri are the page fault rates of pro-                 iv. Nothing can be said about the relative
           cess Pi when it is operated with 5 percent                        magnitudes of pfri and pfri
           of its pages and 10 percent of its pages in                   f.  Thrashing can be overcome if
           memory, respectively, and the page replace-                       i. The  degree  of     multiprogramming           is
           ment   policy     possesses  the  stack  property,                increased
           then:                                                             ii. The I/O speed is increased
           i. pfri < pfri                                                    iii. Memory allocation for a process is con-
           ii. pfri  pfri                                                    trolled by its working set size
           iii. pfri > pfri                                                  iv. None of (i)­(iii)
EXERCISES                                                                                                                      ·
12.1  Page tables are stored in a memory that has an                     page replacement policy is used with alloc = 5
      access time of 100 nanoseconds. The translation                    than when the optimal page replacement policy
      look-aside buffer (TLB) can hold 64 page table                     is used with alloc = 5.
      entries and has an access time of 10 nanosec-               12.6   A process makes r page references during its
      onds. During operation of a process, it is found                   operation. The page reference string of the pro-
      that 85 percent of the time a required page table                  cess contains d distinct page numbers in it. The
      entry exists in the TLB and only 2 percent of                      size of the process is p pages and it is allocated f
      the references lead to page faults. The average                    page frames all through its operation.
      time for page replacement is 2 ms. Compute the                     a. What is the least number of page faults that
      effective memory access time.                                          can occur during its operation?
12.2  Using    the    access    speeds  and  hit  ratios  men-           b. What is the maximum number of page faults
      tioned in Exercise 12.1, compute the effective                         that can occur during its operation?
      memory access time in two-level, three-level, and           12.7   Prove the validity of the following statement if
      four-level page table organizations.                               the page replacement policy uses a fixed memory
12.3  Three approaches to paging of the kernel in                        allocation and local page replacement: "If a pro-
      virtual memory are:                                                cess does not modify any of its pages, then it is
      a. Make       the     kernel  permanently     memory-              optimal to replace the page whose next reference
           resident.                                                     is farthest in the page reference string." Show
      b. Page the kernel in a manner analogous to the                    that this policy may not lead to the minimum
           paging of user processes.                                     number of page-in and page-out operations if
      c. Make the kernel a compulsory part of the                        the process modifies some of its pages.
           logical address space of every process in the          12.8   What is Belady's anomaly? Show that a page
           system and manage its pages as shared pages.                  replacement algorithm that possesses the stack
      Which approach would you recommend? Give                           property cannot exhibit Belady's anomaly.
      reasons.                                                    12.9   Prove that the LRU page replacement policy
12.4  Execution performance of a process in virtual                      possesses the stack property.
      memory depends on locality of reference dis-                12.10  Optimal page replacement can be implemented
      played during its operation. Develop a set of                      by replacing the page whose next reference is
      guidelines      that   a  programmer   can    follow    to         farthest in the page reference string. Does this
      obtain good performance of a process. Describe                     policy possess the stack property? Does the clock
      the  rationale        behind  each  guideline.      (Hint:         algorithm possess the stack property?
      Consider array references occurring in nested               12.11  For the page reference string (12.6),
      loops!)                                                            a. Show the working set at each time instant if
12.5  Give a sample page reference string for a process                      the size of the working set window is (i) three
      that produces more page faults when the LRU                            instructions, (ii) four instructions.



472         Part 3  Memory Management
       b. Compare the operation and performance of                        most recently executed instruction is said to be
            the working set allocator with the FIFO and                   "1 instruction in the past" of the process, the
            LRU allocators.                                               instruction before it is said to be "2 instruc-
12.12  A working set allocator is used for a page refer-                  tions  in  the   past,"   etc.  A  memory     allocator
       ence string with two values of         ,   1<   2. pfr1            refers to the page reference in the instruction
       and pfr2 are page fault rates when              1 and  2           that is i instructions in the past as the -i page
       are used, respectively. Is pfr1  pfr2 if working                   reference. It uses a parameter w, and the fol-
       sets are recomputed (a) after every instruction                    lowing rules for memory allocation and page
       and (b) after every n instructions for some n?                     replacement:
12.13  Describe the actions of a virtual memory man-                      a. Do nothing if the next page reference matches
       ager using a working set memory allocator when                     the -w page reference.
       it  decides  to  reduce  the    degree     of   multipro-          b. Else, if the next page reference matches the
       gramming.    Clearly     indicate  how      it  uses   and         -i     page reference     for some i     <    w,  do the
       manipulates its data structures for this purpose.                  following: if the -w page reference does not
12.14  Explain, with the help of examples, why the                        match with the -j page reference for some
       working set size of a process may increase or                      j < w, then reduce the memory allocation for
       decrease during its operation.                                     the process by one page frame and remove
12.15  Justify the following statement: "Thrashing can                    the least recently used page, otherwise do
       arise when a working set memory allocator is                       nothing.
       used. However, it cannot last for long."                           c. Else,   if  the  next  page     reference  causes  a
12.16  A virtual memory manager uses the following                        page fault and the -w page reference does
       page replacement policy: When a combination                        not       match     with  the   page  reference   in  the
       of a high page fault rate in the system and low                    -j     instruction for some j         <  w, then per-
       CPU efficiency is noticed, reduce the allocation                   form a page replacement using the LRU page
       for each process and load one more process.                        replacement policy.
       Comment on the effectiveness of this policy.                       d. Else, increase the memory allocation for the
12.17  Explain why the two-handed clock algorithm for                     process by one page frame and load the page
       page replacement is superior to the one-handed                     contained in the next page reference.
       clock algorithm (see Section 12.8.1).                              Show that the actions of the memory alloca-
12.18  A virtual memory manager implements a work-                        tor are equivalent to actions of the working set
       ing set memory allocator and uses dynamic shar-                    memory allocator with           = w.
       ing of pages. Describe the housekeeping actions             12.22  Compare        the  following      memory     manage-
       performed by it in the following situations.                       ment   proposals    in    virtual     memory      using
       a. When a page fault occurs.                                       segmentation-with-paging.
       b. When a shared page drops out of the working                     a. Use the LRU policy within a process.
            set of one of the sharing processes.                          b. Use the LRU policy within a segment.
12.19  The amount of memory allocated to a process in              12.23  Comment on the validity of the following state-
       a system using virtual memory is held constant                     ment: "In virtual memory using segmentation-
       and the page size is varied. (This action varies                   with-paging, the role of segmentation is limited
       the number of pages of the process in memory.)                     to sharing. It does not play any role in memory
       Draw a graph of page size versus expected page                     management."
       fault rate.                                                 12.24  An I/O operation consists of the execution of a
12.20  The degree of multiprogramming in a system                         sequence of I/O commands. A self-describing I/O
       using virtual memory is varied by changing the                     operation is an I/O operation some of whose I/O
       memory allocation for processes. Draw a graph                      commands are read in by a previous I/O com-
       of degree of multiprogramming versus CPU effi-                     mand of the same I/O operation. For example,
       ciency. Explain the nature of the graph in the                     consider the I/O operation
       region of high degree of multiprogramming.
12.21  We   refer   to  "instructions     in  the  past"     dur-         1. Read d, 6, aaa
       ing  operation   of   a  process       as  follows:    The         2. Read d, count, bbb



                                                                                   Chapter 12   Virtual Memory           473
       where  d  is  the  id  of  the  I/O  device.  The  first            the swap space when it is used for the first time.
       I/O command reads 6 bytes into the memory                           Discuss the advantages and drawbacks of the
       area with address aaa. Let this be the area where                   optimization.
       the fields containing count (2 bytes) and bbb (4          12.26     Performance of a virtual memory is determined
       bytes) of the second I/O command are stored.                        by the interplay of three factors--CPU speed,
       Thus, the first I/O command modifies the sec-                       size of memory, and peak throughput of the
       ond I/O command. Let n and ccc be the values                        paging device. Possible causes of low or high
       read into fields count and bbb, respectively, by                    efficiency of the CPU and the paging disk can
       the first I/O command. After I/O for the first                      be summarized as follows:
       I/O command is completed, the second I/O com-
       mand reads n bytes into the memory area with                                       High          Low
       address ccc. The data for this I/O operation                                       utilization   utilization
       would be
                     n, ccc,                                               CPU            Processes     Only few of the
                                                                                          are CPU-      processes are
                              n bytes of data                                             bound, or     CPU-bound,
                                                                                          CPU is slow   or thrashing is
       Can  the  methods      of  performing   I/O   in   vir-                                          present
       tual memory described in Section 12.2.4 handle                      Paging         Thrashing is  Memory is
       self-describing I/O operations correctly? Clearly                   disk           present, or   overcommited
       justify your answer. In a simplified form of self-                                 disk is slow  to each process
       describing I/O, the first I/O command reads in
       only 2 bytes and stores them in the count field.
       Can the methods described in Section 12.2.4                         Performance of virtual memory may improve
       handle such I/O operations correctly?                               if one or several of the following changes are
12.25  While initiating a process, the virtual memory                      made: the CPU is replaced by a faster CPU,
       manager copies the code of the process, which                       the paging disk is replaced by a faster disk, the
       exists in a file, into the swap space reserved for                  memory is increased, or the degree of multi-
       the process. From the swap space, code pages are                    programming is increased. In each of the fol-
       loaded into memory when needed. Explain the                         lowing situations, which of the above changes
       advantages of this arrangement. Why not load                        would you recommend for improving system
       code pages directly from the file when needed?                      performance?
       Some code pages may not be used during a run,                       a. Low CPU efficiency, low disk efficiency
       hence it is redundant to copy them into the swap                    b. Low CPU efficiency, high disk efficiency
       space. To avoid redundant copying, some vir-                        c. High CPU efficiency, low disk efficiency
       tual memory managers copy a code page into                          d. High CPU efficiency, high disk efficiency
CLASS PROJECT: SIMULATION OF VIRTUAL MEMORY MANAGER                                                                            ·
A virtual memory manager uses the two-thread arrange-            illustrated in Figure 12.20. It performs page replacement
ment shown in Figure 12.19, where the thread called              on a global basis.
free frames manager tries to maintain a sufficient num-          The working of this virtual memory manager is to
ber of free page frames at all times and the thread called       be simulated. The simulation is controlled by commands
page I/O manager performs page-out operations on dirty           in an input file, where each command has the format
page frames. The virtual memory manager uses the two-            <action> <parameters>. Details of the actions are as
handed clock algorithm discussed in Example 12.8 and             follows:



474       Part 3  Memory Management
                      Action name                  Parameters and explanation
                      Memory_size                  Number of page frames (integer)
                      Lower_threshold              Minimum number of free page frames (integer)
                      Upper_threshold              Maximum number of free page frames (integer)
                      Distance                     Distance between clock hands, in terms of number of page
                                                   frames (integer)
                      #processes                   Number of processes (integer). Process id's are P0, P1, . . .
                      Process_size                 Process id, number of pages (both are integers)
                      Read                         Process id, Page number : The indicated process reads the
                                                   indicated page (both are integers)
                      Modify                       Process id, Page number : The indicated process modifies
                                                   the indicated page (both are integers)
                      Page_table                   No parameters. Simulator displays the page tables of
                                                   processes
                      IO_list                      No parameters. Simulator displays the list of page frames
                                                   on which page-out operations need to be performed
                      Hit_ratio                    Simulator displays hit ratios for processes
                      Reset_counters               Simulator resets counters used for calculation of hit ratios
Develop a simulator of the virtual memory manager.           numbers in this list. The page I/O manager performs
The  simulator  must  maintain  page  tables  and  swap      page-out operations on the page frames in a suitable
spaces of the processes. It must also maintain a list of     order; it informs the free frames manager when the
page frames on which page-out operations should be           page-out operation of a page frame has been completed.
performed. The free frames manager puts page frame
BIBLIOGRAPHY                                                                                                          ·
Randell (1969) is an early paper on the motivation for vir-  (1998) compares virtual memory features in MIPS, Pen-
tual memory systems. Ghanem (1975) discusses memory          tium, and PowerPC architectures. Swanson et al. (1998)
partitioning in virtual memory systems for multipro-         and Navarro et al. (2002) describe superpages.
gramming. Denning (1970) is a survey article on virtual           Car and Hennessy (1981) discusses the clock algo-
memory. Hatfield (1971) discusses aspects of program         rithm. Bach (1986) and Vahalia (1996) describe Unix
performance in a virtual memory system.                      virtual memory, Beck et al. (2002), Gorman (2004),
     Belady (1966) discusses the anomaly that carries his    Bovet and Cesati (2005), and Love (2005) discuss Linux
name. Mattson et al. (1970) discusses stack property of      virtual  memory,   Mauro   and  McDougall       (2006)  dis-
page replacement algorithms. Denning (1968a, 1968b)          cusses virtual memory in Solaris, while Russinovich and
discusses thrashing and the fundamental working set          Solomon (2005) discusses Windows virtual memory.
model. Denning (1980) is a comprehensive discussion on            Organick      (1972)  describes  virtual  memory    in
working sets. Smith (1978) is a bibliography on paging       MULTICS.
and related topics. Wilson et al. (1995) discusses memory
allocation in virtual memory environments. Johnstone          1.  Aho, A. V., P. J. Denning, and J. D. Ullman
and Wilson (1998) discusses the memory fragmentation              (1971): "Principles of optimal page replacement,"
problem.                                                          Journal of ACM, 18 (1), 80­93.
     Chang and Mergen (1988) describes the inverted           2.  Bach, M. J. (1986): The Design of the Unix
page table, while Tanenbaum (2001) discusses the two-             Operating System, Prentice Hall, Englewood
level page tables used in Intel 30386. Jacob and Mudge            Cliffs, N.J.



                                                                            Chapter 12  Virtual Memory          475
3.   Beck, M., H. Bohme, M. Dziadzka, U. Kunitz,         19.  Jacob, B., and T. Mudge (1998): "Virtual memory
     R. Magnus, C. Schroter, and D. Verworner                 in contemporary microprocessors," IEEE Micro
     (2002): Linux Kernel Programming, 3rd ed.,               Magazine, 18, 60­75.
     Pearson Education, New York.                        20.  Johnstone, M. S., and P. R. Wilson (1998):
4.   Belady, L. A. (1966): "A study of replacement            "The memory fragmentation problem: solved?,"
     algorithms for virtual storage computers," IBM           Proceedings of the First International Symposium
     Systems Journal, 5 (2), 78­101.                          on Memory Management, 26­36.
5.   Bensoussen, A., C. T. Clingen, and R. C. Daley      21.  Love, R. (2005): Linux Kernel Development, 2nd
     (1972): "The MULTICS virtual                             ed. Novell Press.
     memory--concepts and design," Communications        22.  Mauro, J., and R. McDougall (2006): Solaris
     of the ACM, 15 (5), 308­318.                             Internals, 2nd ed., Prentice-Hall, Englewood
6.   Bryant, P. (1975): "Predicting working set sizes,"       Cliffs, N.J.
     IBM Journal of R and D, 19 (5), 221­229.            23.  Mattson, R. L., J. Gecsei, D. R. Slutz, and
7.   Bovet, D. P., and M. Cesati (2005): Understanding        I. L. Traiger (1970): "Evaluation techniques for
     the Linux Kernel, 3rd ed., O'Reilly, Sebastopol,         storage hierarchies," IBM Systems Journal, 9 (2),
     Calif.                                                   78­117.
8.   Carr, W. R., and J. L. Hennessy (1981):             24.  Navarro, J., S. Iyer, P. Druschel, and A. Cox
     "WSClock--a simple and effective algorithm for           (2002): "Practical, transparent operating system
     virtual memory management," Proceedings of the           support for superpages," ACM SIGOPS
     ACM Symposium on Operating Systems                       Operating Systems Review, 36, issue SI, 89­104.
     Principles, 87­95.                                  25.  Organick, E. I. (1972): The MULTICS System,
9.   Chang, A., and M. Mergen (1988): "801 storage:           MIT Press, Cambridge, Mass.
     architecture and programming," ACM                  26.  Randell, B. (1969): "A note on storage
     Transactions on Computer Systems, 6, 28­50.              fragmentation and program segmentation,"
10.  Daley, R. C., and J. B. Dennis (1968): "Virtual          Communications of the ACM, 12 (7), 365­369.
     memory, processes and sharing in MULTICS,"          27.  Rosell, J. R., and J. P. Dupuy (1973): "The design,
     Communications of the ACM, 11 (5), 305­322.              implementation and evaluation of a working set
11.  Denning, P. J. (1968a): "The working set model           dispatcher," Communications of the ACM, 16,
     for program behavior," Communications of the             247­253.
     ACM, 11 (5), 323­333.                               28.  Russinovich, M. E., and D. A. Solomon (2005):
12.  Denning, P. J. (1968b): "Thrashing : Its causes          Microsoft Windows Internals, 4th ed., Microsoft
     and prevention," Proceedings of AFIPS FJCC,              Press, Redmond, Wash.
     33, 915­922.                                        29.  Smith, A. J. (1978): "Bibliography on paging and
13.  Denning, P. J. (1970): "Virtual Memory,"                 related topics," Operating Systems Review, 12 (4),
     Computing Surveys, 2 (3), 153­189.                       39­56.
14.  Denning, P. J. (1980): "Working sets past and       30.  Swanson, M., L. Stoller, and J. Carter (1998):
     present," IEEE Transactions on Software                  "Increasing TLB reach using superpages backed
     Engineering, 6 (1), 64­84.                               by shadow memory," Proceedings of the 25th
15.  Ghanem, M. Z. (1975): "Study of memory                   International Symposium on Computer
     partitioning for multiprogramming systems with           Architecture, 204­213.
     virtual memory," IBM Journal of R and D, 19,        31.  Tanenbaum, A. S. (2001): Modern Operating
     451­457.                                                 Systems, 2nd ed., Prentice Hall, Englewood
16.  Gorman, M. (2004): Understanding the Linux               Cliffs, N.J.
     Virtual Memory Manager, Prentice Hall,              32.  Vahalia, U. (1996): Unix Internals--The New
     Englewood Cliffs, N.J.                                   Frontiers, Prentice Hall, Englewood Cliffs, N.J.
17.  Guertin, R.L.(1972): "Programming in a paging       33.  Wilson, P. R., M. S. Johnstone, M. Neely and
     environment," Datamation, 18 (2), 48­55.                 D. Boles (1995): "Dynamic storage allocation: a
18.  Hatfield, D. J., and J. Gerald (1971): "Program          survey and critical review," Proceedings of the
     restructuring for virtual memory," IBM Systems           International Workshop on Memory Management,
     Journal, 10 (3), 169­192.                                1­116.






                                                                    part                     4