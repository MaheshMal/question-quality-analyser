Summary
Portability of an operating system refers to the ease   Portability and extensibility have become crucial
with which the OS can be implemented on a com-          requirements because of long life-spans of mod-
puter having a different architecture. Extensibility    ern operating systems. In this chapter we discussed
of an operating system refers to the ease with which    different ways of structuring operating systems to
its functionalities can be modified or enhanced         meet these requirements.
to   adapt  it  to  a  new  computing  environment.



                                                                             Chapter 4   Structure of Operating Systems               103
     An OS functionality typically contains a pol-                              The virtual machine operating system (VM OS)
icy, which specifies the principle that is to be used                     supported operation of several operating systems
to perform the functionality, and a few mechanisms                        on a computer simultaneously, by creating a virtual
that perform actions to implement the functional-                         machine for each user and permitting the user to
ity. Mechanisms such as dispatching and context                           run an OS of his choice in the virtual machine.
save interact closely with the computer, so their                         The VM OS interleaved operation of the users'
code      is  inherently     architecture-dependent;             poli-    virtual machines on the host computer through
cies are architecture-independent. Hence porta-                           a  procedure   analogous   to      scheduling.  When        a
bility    and        extensibility     of   an  OS       depends    on    virtual  machine      was  scheduled,      its  OS     would
how the code of its policies and mechanisms is                            organize execution of user applications running
structured.                                                               under it.
     Early     operating         systems        had   a   monolithic            In a kernel-based design of operating systems,
structure. These operating systems had poor porta-                        the kernel is the core of the operating system, which
bility    because       architecture-dependent             code   was     invokes the nonkernel routines to implement opera-
spread        throughout      the      OS.  They      also     suffered   tions on processes and resources. The architecture-
from high design complexity. The layered design                           dependent code in an OS typically resides in the
of operating systems used the principle of abstrac-                       kernel;  this  feature     enhances       portability  of   the
tion to control complexity of designing the OS.                           operating system.
It   viewed    the      OS   as     a  hierarchy      of   layers,  in          A microkernel is the essential core of OS code.
which     each       layer  provided        a   set  of   services  to    It is small in size, contains a few mechanisms,
the  layer     above    it,   and      itself   used     the   services   and does not contain any policies. Policy mod-
in the layer below it. Architecture dependencies                          ules  are     implemented  as      server  processes;      they
were often restricted to lower layers in the hier-                        can be changed or replaced without affecting the
archy; however, the design methodology did not                            microkernel, thus providing high extensibility of
guarantee it.                                                             the OS.
TEST      YOUR CONCEPTS                                                                                                               ·
     4.1  Classify each of the following statements as true                        (refer to relevant sections of Chapters 1 and 3):
          or false:                                                                a. Preempting a program
              a. Mechanisms      of    the      OS    are      typically           b. Priority-based scheduling used in multipro-
              architecture-independent.                                                 gramming systems
              b. A layered OS organization reduces the sem-                        c. Loading     a  swapped-out     program          into
              antic gap between the top layer of the OS and                             memory
              the bare machine.                                                    d. Checking whether a user program can be
              c. In a virtual machine OS, each user can run                             permitted to access a file
              an OS of his choice.                                           4.3   Which of the following operating systems has
              d. A   kernel-based      OS       structure      provides            the highest portability?
              extensibility.                                                       a. An OS with a monolithic structure.
              e. In  a  microkernel-based       OS,       the  process             b. An OS with a layered structure.
              scheduler may run as a user process.                                 c. A virtual machine OS.
     4.2  Classify each of the following functions per-                            d. A kernel-based OS.
          formed by an OS as a policy or a mechanism



104       Part 1      Overview
EXERCISES                                                                                                           ·
4.1  The    scheduling    mechanism     "manipulate  sch-        requires less-than-full virtualization of its re-
     eduling lists" (see Table 4.3) is invoked to modify         sources; however, it may degrade efficiency of
     scheduling lists in response to events in the sys-          operation of a guest OS."
     tem and actions of the scheduler. Describe the         4.3  What are the consequences of merging nonker-
     functions this mechanism should perform for (a)             nel routines with (a) the user interface, (b) the
     round-robin scheduling and (b) priority-based               kernel? (Hint: Refer to Section 1.1.)
     scheduling (as used in a multiprogramming OS).         4.4  List the differences between a kernel employ-
4.2  Justify the following statement: "Secure oper-              ing dynamically loadable modules and (a) a
     ation  of     a  virtual  machine  operating  system        monolithic kernel and (b) a microkernel.
BIBLIOGRAPHY                                                                                                        ·
Dijkstra (1968) describes the structure of the THE multi-   3.   Beck, M., H. Bohme, M. Dziadzka, U. Kunitz,
programming system. The virtual machine operating                R. Magnus, C. Schroter, and D. Verworner
system VM/370 is based on CP/67, and is described in             (2002): Linux Kernel Programming, 3rd ed.,
Creasy (1981). The XEN and VMware virtual machine                Pearson Education, New York.
products are described in Barham et al. (2003) and          4.   Bovet, D. P., and M. Cesati (2005): Understanding
Sugarman et al. (2001), respectively. The May 2005 issue         the Linux Kernel, 3rd ed., O'Reilly, Sebastopol.
of IEEE Computer is a special issue on virtualization       5.   Creasy, R. J. (1981): "The origin of the VM/370
technologies. Rosenblum and Garfinkel (2005) discusses           time-sharing system," IBM Journal of Research
trends in the design of virtual machine monitors.                and Development, 25 (5), 483­490.
     Warhol (1994) discusses the strides made by micro-     6.   Dijkstra, E. W. (1968): "The structure of THE
kernels in the early 1990s while Liedtke (1996) describes        multiprogramming system," Communications of
the principles of microkernel design. Hartig et al. (1997)       the ACM, 11, 341­346.
describes porting and performance of the Linux OS           7.   Engler D. R., M. F. Kasshoek, and J. O'Toole
on the L4 microkernel. Engler et al. (1995) discusses            (1995): "Exokernel: An operating system
design of an Exokernel. Bach (1986), Vahalia (1996), and         architecture for application-level resource
McKusick et al. (1996) describe the Unix kernel. Beck            management," Symposium on OS Principles,
et al. (2002), Bovet and Cesati (2005), and Love (2005)          251­266.
describe the Linux kernel, while Mauro and McDougall        8.   Hartig, H., M. Hohmuth, J. Liedtke,
(2006) describes the kernel of Solaris. Tanenbaum (2001)         S. Schonberg, and J. Wolter (1997): "The
describes microkernels of the Amoeba and Mach operat-            performance of microkernel-based systems,"
ing systems. Russinovich and Solomon (2005) describes            16th ACM Symposium on Operating System
architecture of Windows.                                         Principles.
1.   Bach, M. J. (1986): The Design of the Unix             9.   Liedtke J. (1996): "Towards real microkernels,"
     Operating System, Prentice Hall, Englewood                  Communications of the ACM, 39 (9), 70­77.
     Cliffs, N.J.                                           10.  Love, R. (2005): Linux Kernel Development,
2.   Barham, P., B. Dragovic, K. Fraser, S. Hand,                2nd ed., Novell Press.
     T. Harris, A. Ho, R. Neugebauer, I. Pratt, and         11.  Mauro, J., and R. McDougall (2006): Solaris
     A. Warfield (2003): "XEN and the art of                     Internals, 2nd ed., Prentice Hall, Englewood
     virtualization," ACM Symposium on Operating                 Cliffs, N.J.
     System Principles, 164­177.



                                                        Chapter 4  Structure of Operating Systems               105
12.  McKusick, M. K., K. Bostic, M. J. Karels,          16.  Sugarman, J., G. Venkitachalam, and
     and J. S. Quarterman (1996): The Design and             B. H. Lim (2001): "Virtualizing I/O devices on
     Implementation of the 4.4 BSD Operating System,         VMware workstation's hosted virtual machine
     Addison-Wesley, Reading, Mass.                          monitor," 2001 USENIX Annual Technical
13.  Meyer, J., and L. H. Seawright (1970): "A virtual       Conference.
     machine time-sharing system," IBM Systems          17.  Tanenbaum, A. S. (2001): Modern Operating
     Journal, 9 (3), 199­218.                                Systems, 2nd ed., Prentice Hall, Englewood
14.  Rosenblum, M., and T. Garfinkel (2005): "Virtual        Cliffs, N.J.
     machine monitors: current technology and future    18.  Vahalia, U. (1996): UNIX Internals--the New
     trends," IEEE Computer, 38 (5), 39­47.                  Frontiers, Prentice-Hall, Englewood Cliffs, N.J.
15.  Russinovich, M. E., and D. A. Solomon (2005):      19.  Warhol, P. D. (1994): "Small kernels hit it big,"
     Microsoft Windows Internals, 4th ed., Microsoft         Byte, January 1994, 119­128.
     Press, Redmond, Wash.






                                                                                                       107
                                                                                part                2
         Process Management
A process is an execution of a program. An application may be designed
         to have many processes that operate concurrently and interact among
         themselves to jointly achieve a goal. This way, the application may be
able to provide a quicker response to the user.
An OS contains a large number of processes at any time. Process management
involves creating processes, fulfilling their resource requirements, scheduling them
for use of a CPU, implementing process synchronization to control their interac-
tions, avoiding deadlocks so that they do not wait for each other indefinitely,
and terminating them when they complete their operation. The manner in which
an OS schedules processes for use of a CPU determines the response times of
processes, resource efficiency, and system performance.
A thread uses the resources of a process but resembles a process in all other
respects. An OS incurs less overhead in managing threads than in managing
processes. We use the term process as generic to both processes and threads.
                                 Road Map for Part 2