OPERATION OF DISTRIBUTED CONTROL ALGORITHMS
     A distributed operating system implements a control function through a dis-
     tributed control algorithm, whose actions are performed in several nodes of the
     system and whose data is also spread across several nodes. This approach has the
     following advantages over a centralized implementation of control functions:
     ·  The delays and overhead involved in collecting the global state of a system
        are avoided.
     ·  The control function can respond speedily to events in different nodes of the
        system.
     ·  Failure of a single node does not cripple the control function.
714



                                                       Chapter 18       Distributed Control Algorithms  715
Table 18.1  Overview of Control Functions in a Distributed OS
Function               Description
Mutual exclusion       Implement a critical section (CS) for a data item ds for use
                       by processes in a distributed system. It involves
                       synchronization of processes operating in different nodes
                       of the system so that at most one process is in a CS for ds
                       at any time.
Deadlock handling      Prevent or detect deadlocks that arise from resource
                       sharing within and across nodes of a distributed system.
Scheduling             Perform load balancing to ensure that computational loads
                       in different nodes of a distributed system are comparable.
                       It involves transferring processes from heavily loaded
                       nodes to lightly loaded nodes.
Termination detection  Processes of a distributed computation may operate in
                       several nodes of a distributed system. Termination
                       detection is the act of determining whether such a
                       computation has completed its operation. It involves
                       checking whether any of the processes is active
                       and whether any interprocess message is in transit
                       between them.
Election               A coordinator (also called a leader process) is the one that
                       performs some privileged function like resource allocation.
                       An election is performed when a coordinator fails or is
                       terminated. It selects one of the active processes to become
                       the new coordinator and informs the identity of the new
                       coordinator to all other processes.
   A distributed control algorithm provides a service whose clients include both
user applications and the kernel. Table 18.1 describes control functions in a dis-
tributed OS. Mutual exclusion and election are services provided to user processes,
deadlock handling and scheduling are services offered to the kernel, while the ter-
mination detection service may be used by both user processes and the kernel.
In OS literature, names of these functions are generally prefixed with the word
"distributed" to indicate that the functions are performed in a distributed man-
ner. Note that fault tolerance and recovery issues are not discussed here; they are
discussed separately in Chapter 19.
   A distributed control algorithm operates in parallel with its clients, so that
it can respond readily to events related to its service. The following terminol-
ogy is used to distinguish between actions of a client and those of a control
algorithm.
·  Basic computation: Operation of a client constitutes a basic computation.
   A basic computation may involve processes in one or more nodes of the
   system. The messages exchanged by these processes are called basic messages.



716  Part 5  Distributed  Operating  Systems
                                                         Kernel calls
                                                   cpi   Control part     Control
                                                                          messages
                                     Process       Request  Reply
                                              Pi
                                                   bpi   Basic part       Basic
                                                                          messages
                                                         Kernel calls
                   Figure 18.1  Basic and control parts of a process Pi.
                      ·  Control computation: Operation of a control algorithm constitutes a control
                         computation. Messages exchanged by processes of a control computation are
                         called control messages.
                         To understand operation of a distributed control algorithm, we visualize
                   each process to consist of two parts that operate in parallel--a basic part and
                   a control part. Figure 18.1 illustrates the two parts of a process Pi. The basic
                   part of a process participates in a basic computation. It exchanges basic mes-
                   sages with basic parts of other processes. When it requires a service offered by
                   a control algorithm, it makes a request to the control part of the process. All
                   other requests are made directly to the kernel. The control part of a process par-
                   ticipates in a control computation. It exchanges control messages with control
                   parts of other processes, and may interact with the kernel to implement its part
                   in the control function. The basic part of a process may become blocked when it
                   makes a resource request; however, the control part of a process never becomes
                   blocked--this feature enables it to respond to events related to its service in a
                   timely manner.
·
     Example 18.1  Basic and Control Parts of a Process
                   A distributed application consists of four processes P1­P4. Let process P2 be
                   currently in a CS for shared data ds. When process P1 wishes to enter a CS
                   for ds, bp1 makes a request to cp1, which is a part of some distributed mutual
                   exclusion algorithm discussed later in Section 18.3. To decide whether P1 may
                   be allowed to enter a CS for ds, cp1 exchanges messages with cp2, cp3, and
                   cp4. From their replies, it realizes that some other process is currently in a CS
                   for ds, so it makes a kernel call to block bp1. Note that cp2 participates in this
                   decision even while bp2 was executing in a CS. When process P2 wishes to exit
                   the CS, bp2 makes a request to cp2, which interacts with control parts of other
                   processes and decides that process P1 may enter a CS for ds. Accordingly, cp1
                   makes a kernel call to activate bp1.
                   ·
