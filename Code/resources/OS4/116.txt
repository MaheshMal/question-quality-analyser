Microkernel-Based Operating Systems
Putting all architecture-dependent code of the OS into the kernel provides
good portability. However, in practice, kernels also include some architecture-
independent code. This feature leads to several problems. It leads to a large
kernel size, which detracts from the goal of portability. It may also necessitate
kernel modification to incorporate new features, which causes low extensibil-
ity. A large kernel supports a large number of system calls. Some of these
calls may be used rarely, and so their implementations across different ver-
sions of the kernel may not be tested thoroughly. This compromises reliability of
the OS.
     The microkernel was developed in the early 1990s to overcome the problems
concerning portability, extensibility, and reliability of kernels. A microkernel is
an essential core of OS code, thus it contains only a subset of the mechanisms
typically included in a kernel and supports only a small number of system calls,
which are heavily tested and used. This feature enhances portability and reliability



96  Part 1  Overview
                                                     Servers            User processes
                                          Round-
                                          robin      ...      Memory    ...
                                          process             handler
                                          scheduler
                                                          Microkernel
                                                          Bare machine
            Figure    4.7  Structure  of  microkernel-based operating   systems.
            of the microkernel. Less essential parts of OS code are outside the microkernel
            and use its services, hence these parts could be modified without affecting the
            kernel; in principle, these modifications could be made without having to reboot
            the OS! The services provided in a microkernel are not biased toward any specific
            features or policies in an OS, so new functionalities and features could be added
            to the OS to suit specific operating environments.
                      Figure 4.7 illustrates the structure of a microkernel-based OS. The micro-
            kernel includes mechanisms for process scheduling and memory management,
            etc., but does not include a scheduler or memory handler. These functions are
            implemented as servers, which are simply processes that never terminate. The
            servers and user processes operate on top of the microkernel, which merely per-
            forms interrupt handling and provides communication between the servers and
            user processes.
                      The small size and extensibility of microkernels are valuable properties for
            the embedded systems environment, because operating systems need to be both
            small and fine-tuned to the requirements of an embedded application. Exten-
            sibility of microkernels also conjures the vision of using the same microkernel
            for a wide spectrum of computer systems, from palm-held systems to large
            parallel and distributed systems. This vision has been realized to some extent.
            The Mach microkernel has been used to implement several different versions
            of Unix. The distributed operating system Amoeba uses an identical micro-
            kernel on all computers in a distributed system ranging from workstations to
            large multiprocessors.
                      Just what is the "essential core of OS code" has been a matter of some debate,
            and as a result considerable variation exists in the services included in a micro-
            kernel. For example, IBM's implementation of the Mach microkernel leaves the
            process scheduling policy and device drivers outside the kernel--these functions
            run as servers. The QNX microkernel includes interrupt servicing routines, pro-
            cess scheduling, interprocess communication, and core network services. The L4
            microkernel includes memory management and supports only seven system calls.
            Both QNX and L4 are only 32 KB in size, where 1 KB is 1024 bytes. Despite such
            variation, it can be argued that certain services must be provided by a microker-
            nel. These include memory management support, interprocess communication
            and interrupt servicing. Memory management and interprocess communication
