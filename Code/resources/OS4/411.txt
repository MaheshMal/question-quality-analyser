Contiguous Memory Allocation
             Contiguous memory allocation is the classical memory allocation model in which
             each process is allocated a single contiguous area in memory. Thus the kernel allo-
             cates a large enough memory area to accommodate the code, data, stack, and
             PCD data of a process as shown in Figure 11.9. Contiguous memory alloca-
             tion faces the problem of memory fragmentation. In this section we focus on
             techniques to address this problem. Relocation of a program in contiguous mem-
             ory allocation and memory protection were discussed earlier in Sections 11.3.1
             and 11.4.3.
             Handling Memory Fragmentation  We discussed the causes of internal and exter-
             nal fragmentation earlier in Section 11.5.1.3. Internal fragmentation has no cure
             in contiguous memory allocation because the kernel has no means of estimat-
             ing the memory requirement of a process accurately. The techniques of memory



                                                             Chapter 11  Memory Management               391
                    Kernel              Kernel       Kernel
                    A                   A            A
                    B                                C
                    C                   C            D
                    D                   D            E
               (a)                 (b)          (c)
Figure  11.16  Memory compaction.
compaction and reuse of memory discussed earlier in Section 11.5 can be applied
to overcome the problem of external fragmentation. Example 11.8 illustrates use
of memory compaction.
                                                                                                         ·
Contiguous Memory Allocation                                                              Example  11.8
Processes A, B, C, and D are in memory in Figure 11.16(a). Two free areas
of memory exist after B terminates; however, neither of them is large enough
to accommodate another process [see Figure 11.16(b)]. The kernel performs
compaction to create a single free memory area and initiates process E in this
area [see Figure 11.16(c)]. It involves moving processes C and D in memory
during their execution.
                                                                                       ·
Memory compaction involves dynamic relocation, which is not feasible with-
out a relocation register (see Section 11.3.1). In computers not having a relocation
register, the kernel must resort to reuse of free memory areas. However, this
approach incurs delays in initiation of processes when large free memory areas
do not exist, e.g., initiation of process E would be delayed in Example 11.8 even
though the total free memory in the system exceeds the size of E.
Swapping       The basic mechanism of swapping, and the rationale behind it, was
described in Section 3.6.1. The kernel swaps out a process that is not in the running
state by writing out its code and data space to a swapping area on the disk. The
swapped out process is brought back into memory before it is due for another
burst of CPU time.
A basic issue in swapping is whether a swapped-in process should be loaded
back into the same memory area that it occupied before it was swapped out. If
so, its swapping in depends on swapping out of some other process that may have
been allocated that memory area in the meanwhile. It would be useful to be able
to place the swapped-in process elsewhere in memory; however, it would amount
