Operation of an OS
            The primary concerns of an OS during its operation are execution of programs,
            use of resources, and prevention of interference with programs and resources.
            Accordingly, its three principal functions are:
            ·         Program management: The OS initiates programs, arranges their execution
                      on the CPU, and terminates them when they complete their execution. Since
                      many programs exist in the system at any time, the OS performs a function
                      called scheduling to select a program for execution.



                                                                       Chapter 1     Introduction  11
·  Resource management: The OS allocates resources like memory and I/O
   devices when a program needs them. When the program terminates, it deal-
   locates these resources and allocates them to other programs that need
   them.
·  Security and protection: The OS implements noninterference in users' activ-
   ities through joint actions of the security and protection functions. As an
   example, consider how the OS prevents illegal accesses to a file. The secu-
   rity function prevents nonusers from utilizing the services and resources in
   the computer system, hence none of them can access the file. The protection
   function prevents users other than the file owner or users authorized by him,
   from accessing the file.
   Table 1.2 describes the tasks commonly performed by an operating system.
When a computer system is switched on, it automatically loads a program stored
on a reserved part of an I/O device, typically a disk, and starts executing the
program. This program follows a software technique known as bootstrapping to
load the software called the boot procedure in memory--the program initially
loaded in memory loads some other programs in memory, which load other
programs, and so on until the complete boot procedure is loaded. The boot
procedure makes a list of all hardware resources in the system, and hands over
control of the computer system to the OS.
   A system administrator specifies which persons are registered as users of the
system. The OS permits only these persons to log in to use its resources and
services. A user authorizes his collaborators to access some programs and data.
The OS notes this information and uses it to implement protection. The OS also
performs a set of functions to implement its notion of effective utilization. These
functions include scheduling of programs and keeping track of resource status
and resource usage information.
Table 1.2  Common Tasks Performed by Operating Systems
Task                                  When performed
Construct a list of resources         During booting
Maintain information for security     While registering new users
Verify identity of a user             At login time
Initiate execution of programs        At user commands
Maintain authorization information    When a user specifies which collaborators
                                      can acces what programs or data
Perform resource allocation           When requested by users or programs
Maintain current status of resources  During resource allocation/deallocation
Maintain current status of programs   Continually during OS operation
and perform scheduling



12  Part 1  Overview
                      The following sections are a brief overview of OS responsibilities in managing
            programs and resources and in implementing security and protection.
            1.3.1 Program Management
            Modern CPUs have the capability to execute program instructions at a very high
            rate, so it is possible for an OS to interleave execution of several programs on a
            CPU and yet provide good user service. The key function in achieving interleaved
            execution of programs is scheduling, which decides which program should be
            given the CPU at any time. Figure 1.3 shows an abstract view of scheduling. The
            scheduler, which is an OS routine that performs scheduling, maintains a list of
            programs waiting to execute on the CPU, and selects one program for execution.
            In operating systems that provide fair service to all programs, the scheduler also
            specifies how long the program can be allowed to use the CPU. The OS takes
            away the CPU from a program after it has executed for the specified period of
            time, and gives it to another program. This action is called preemption. A program
            that loses the CPU because of preemption is put back into the list of programs
            waiting to execute on the CPU.
                      The scheduling policy employed by an OS can influence both efficient use of
            the CPU and user service. If a program is preempted after it has executed for only
            a short period of time, the overhead of scheduling actions would be high because
            of frequent preemption. However, each program would suffer only a short delay
            before it gets an opportunity to use the CPU, which would result in good user
            service. If preemption is performed after a program has executed for a longer
            period of time, scheduling overhead would be lesser but programs would suffer
            longer delays, so user service would be poorer.
            1.3.2 Resource Management
            Resource allocations and deallocations can be performed by using a resource
            table. Each entry in the table contains the name and address of a resource unit
            and its present status, indicating whether it is free or allocated to some program.
            Table 1.3 is such a table for management of I/O devices. It is constructed by the
            boot procedure by sensing the presence of I/O devices in the system, and updated
            by the operating system to reflect the allocations and deallocations made by it.
            Since any part of a disk can be accessed directly, it is possible to treat different parts
                                                 Preempted program
                      New      ...                  Scheduler                 CPU  Completed
                      program  Programs waiting                                    program
                               for the CPU                          Selected
                                                                    program
            Figure 1.3  A schematic of scheduling.



                                                                          Chapter      1  Introduction  13
Table 1.3              Resource Table for I/O Devices
    Resource name      Class              Address      Allocation status
    printer1           Printer            101          Allocated to P1
    printer2           Printer            102          Free
    printer3           Printer            103          Free
    disk1              Disk               201          Allocated to P1
    disk2              Disk               202          Allocated to P2
    cdw1               CD writer          301          Free
of a disk as independent devices. Thus the devices disk1 and disk2 in Table 1.3
could be two parts of the same disk.
Two resource allocation strategies are popular. In the resource partitioning
approach, the OS decides a priori what resources should be allocated to each
user program, for example, it may decide that a program should be allocated
1 MB of memory, 1000 disk blocks, and a monitor. It divides the resources in the
system into many resource partitions, or simply partitions; each partition includes
1 MB of memory, 1000 disk blocks, and a monitor. It allocates one resource
partition to each user program when its execution is to be initiated. To facilitate
resource allocation, the resource table contains entries for resource partitions
rather than for individual resources as in Table 1.3. Resource partitioning is
simple to implement, hence it incurs less overhead; however, it lacks flexibility.
Resources are wasted if a resource partition contains more resources than what a
program needs. Also, the OS cannot execute a program if its requirements exceed
the resources available in a resource partition. This is true even if free resources
exist in another partition.
In  the    pool-based  approach       to  resource  management,  the  OS  allocates
resources from a common pool of resources. It consults the resource table when
a program makes a request for a resource, and allocates the resource if it is free.
It incurs the overhead of allocating and deallocating resources when requested.
However, it avoids both problems faced by the resource partitioning approach--
an allocated resource is not wasted, and a resource requirement can be met if a
free resource exists.
Virtual Resources      A virtual resource is a fictitious resource--it is an illusion
supported by an OS through use of a real resource. An OS may use the same real
resource to support several virtual resources. This way, it can give the impression
of having a larger number of resources than it actually does. Each use of a virtual
resource results in the use of an appropriate real resource. In that sense, a virtual
resource is an abstract view of a resource taken by a program.
Use of virtual resources started with the use of virtual devices. To prevent
mutual interference between programs, it was a good idea to allocate a device
exclusively for use by one program. However, a computer system did not possess
many real devices, so virtual devices were used. An OS would create a virtual
device when a user needed an I/O device; e.g., the disks called disk1 and disk2 in



14  Part 1  Overview
            Table 1.3 could be two virtual disks based on the real disk, which are allocated
            to programs P1 and P2, respectively. Virtual devices are used in contemporary
            operating systems as well. A print server is a common example of a virtual device.
            When a program wishes to print a file, the print server simply copies the file into the
            print queue. The program requesting the print goes on with its operation as if the
            printing had been performed. The print server continuously examines the print
            queue and prints the files it finds in the queue. Most operating systems provide
            a virtual resource called virtual memory, which is an illusion of a memory that is
            larger in size than the real memory of a computer. Its use enables a programmer
            to execute a program whose size may exceed the size of real memory.
                      Some operating systems create virtual machines (VMs) so that each machine
            can be allocated to a user. The advantage of this approach is twofold. Allocation
            of a virtual machine to each user eliminates mutual interference between users. It
            also allows each user to select an OS of his choice to operate his virtual machine.
            In effect, this arrangement permits users to use different operating systems on
            the same computer system simultaneously (see Section 4.5).
            1.3.3 Security and Protection
            As mentioned in Section 1.2.3, an OS must ensure that no person can illegally
            use programs and resources in the system, or interfere with them in any manner.
            The security function counters threats of illegal use or interference that are posed
            by persons or programs outside the control of an operating system, whereas
            the protection function counters similar threats posed by its users. Figure 1.4
            illustrates how security and protection threats arise in an OS.
                      In a classical stand-alone environment, a computer system functions in com-
            plete isolation. In such a system, the security and protection issues can be handled
            easily. Recall that an OS maintains information that helps in implementing the
            security and protection functions (see Table 1.2). The identity of a person wish-
            ing to use a computer system is verified through a password when the person
            logs in. This action, which is called authentication, ensures that no person other
                                                                      Computer system
                                  Security  Resources
                        Intruder  threats
                                                                                       Protection
                                                                                       threats
                                  Internet
                                            Programs
                                            Authentication                             Users
            Figure 1.4  Overview of security and protection threats.
