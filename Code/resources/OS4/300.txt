Deadlocks in Resource Allocation
Processes use hardware resources, like memory and I/O devices, and software
resources, such as files. An OS may contain several resources of a kind, e.g., several
disks, tape drives, or printers. We use the term resource unit to refer to a resource
of a specific kind, and use the term resource class to refer to the collection of
all resource units of a kind; thus, a resource class contains one or more resource
units; e.g., the printer class may contain two printers. We use the notation Ri
for a resource class, and rj for a resource unit in a resource class. Recall from
Section 1.3.2 that the kernel maintains a resource table to keep track of the
allocation state of a resource.
     Resource allocation in a system entails three kinds of events--request for the
resource, actual allocation of the resource, and release of the resource. Table 8.1
describes these events. A request event occurs when some process Pi makes a
request for a resource rl . Process Pi will be blocked on an allocation event for rl
if rl is currently allocated to some process Pk. In effect, Pi is waiting for Pk to
release rl . A release event by Pk frees resource rl , and the kernel may decide to
allocate resource rl to Pi. Thus, a release event by Pk may cause the allocation
event for which Pi is waiting, in which case Pi will become the holder of the
resource and enter the ready state. However, as we saw in Example 8.1, process
Pi will face an indefinite wait if Pk's release of rl is indefinitely delayed.
Table 8.1   Events Related to Resource Allocation
Event       Description
Request     A process requests a resource through a system call. If the resource is
            free, the kernel allocates it to the process immediately; otherwise, it
            changes the state of the process to blocked.
Allocation  The process becomes the holder of the resource allocated to it. The
            resource state information is updated and the state of the process is
            changed to ready.
Release     A process releases a resource through a system call. If some processes
            are blocked on the allocation event for the resource, the kernel uses some
            tie-breaking rule, e.g., FCFS allocation, to decide which process should
            be allocated the resource.



280  Part 2  Process Management
             8.2.1 Conditions for a Resource Deadlock
             By slightly rewording parts 1 and 2 of Definition 8.1, we can obtain the conditions
             under which resource deadlocks occur: (1) Each process Pi in D is blocked for
             an allocation event to occur and (2) the allocation event can be caused only
             by actions of some other process Pj in D. Since Pj is in D, parts 1 and 2 of
             Definition 8.1 apply to Pj as well. In other words, the resource requested by
             process Pi is currently allocated to Pj, which itself waits for some other resource
             to be allocated to it. This condition of each process, taken by itself, is called the
             hold-and-wait condition.
             But parts 1 and 2 of Definition 8.1 also imply that processes in D must wait
             for each other. This condition is called the circular wait condition. A circular wait
             may be direct, that is, Pi waits for Pj and Pj waits for Pi, or it may be through
             one or more other processes included in D, for example Pi waits for Pj, Pj waits
             for Pk, and Pk waits for Pi.
             Two other conditions must hold for a resource deadlock to occur. If process
             Pi needs a resource that is currently allocated to Pj, Pi must not be able to either
             (1) share the resource with Pj or (2) preempt it from Pj for its own use.
             Table 8.2 summarizes the conditions that must be satisfied for a resource
             deadlock to exist. All these conditions must hold simultaneously: A circular wait
             is essential for a deadlock, a hold-and-wait condition is essential for a circular
             wait, and nonshareability and nonpreemptibility of resources are essential for a
             hold-and-wait condition.
             Besides the conditions listed in Table 8.2, another condition is also essential
             for deadlocks:
             · No withdrawal of resource requests: A process blocked on a resource request
             cannot withdraw its request.
             This condition is essential because waits may not be indefinite if a blocked process
             is permitted to withdraw a resource request and continue its operation. However,
             it is not stated explicitly in the literature, because many operating systems typically
             impose the no-withdrawal condition on resource requests.
             Table 8.2           Conditions for Resource Deadlock
             Condition                     Explanation
             Nonshareable resources        Resources cannot be shared; a process needs exclusive
                                           access to a resource.
             No preemption                 A resource cannot be preempted from one process and
                                           allocated to another process.
             Hold-and-wait                 A process continues to hold the resources allocated to it
                                           while waiting for other resources.
             Circular waits                A circular chain of hold-and-wait conditions exists in the
                                           system; e.g., process Pi waits for Pj , Pj waits for Pk, and
                                           Pk waits for Pi.



                                                                              Chapter 8   Deadlocks       281
8.2.2 Modeling the Resource Allocation State
Example 8.1 indicated that we must analyze information about resources allo-
cated to processes and about pending resource requests to determine whether
a set of processes is deadlocked, All this information constitutes the resource
allocation state of a system, which we simply call the allocation state of a
system.
Two kinds of models are used to represent the allocation state of a system.
A graph model can depict the allocation state of a restricted class of systems in
which a process can request and use exactly one resource unit of each resource
class. It permits use of a simple graph algorithm to determine whether the circular
wait condition is satisfied by processes. A matrix model has the advantage of
generality. It can model allocation state in systems that permit a process to request
any number of units of a resource class.
8.2.2.1 Graph Models
A resource request and allocation graph (RRAG) contains two kinds of nodes--
process  nodes,  and  resource  nodes.    A  process  node  is  depicted  by  a  circle.
A resource node is depicted by a rectangle and represents one class of resources.
The number of bullet symbols in a resource node indicates how many units of
that resource class exist in the system. Two kinds of edges can exist between a
process node and a resource node of an RRAG. An allocation edge is directed
from a resource node to a process node. It indicates that one unit of the resource
class is allocated to the process. A request edge is directed from a process node
to a resource node. It indicates that the process is blocked on a request for one
unit of the resource class. An allocation edge (Rk, Pj) is deleted when process
Pj releases a resource unit of resource class Rk allocated to it. When a pending
request of process Pi for a unit of resource class Rk is granted, the request edge
(Pi, Rk) is deleted and an allocation edge (Rk, Pi) is added.
A wait-for graph (WFG) can represent the allocation state more concisely
than an RRAG when every resource class in the system contains only one resource
unit. The WFG contains nodes of only one kind, namely, process nodes. An edge
(Pi, Pj) in the WFG represents the fact that process Pi is blocked on a request
for a resource that is currently allocated to process Pj; i.e., process Pi is waiting
for process Pj to release a resource. Hence the name wait-for graph. Representing
the same information in an RRAG would have required two edges.
The next example illustrates and compares use of an RRAG and a WFG.
                                                                                                          ·
RRAG and WFG                                                                              Example    8.2
Figure 8.1(a) shows an RRAG. The printer class contains only one resource
unit, which is allocated to process P1. Requests for a printer made by processes
P2 and P3 are currently pending. The tape class contains two tape drives, which
are allocated to processes P2 and P3. A request by process P4 for one tape drive
is currently pending.



282  Part 2  Process Management
                                          P2                                P6                   P6
                         P1      printer        tape  P4        P5    R3
                                                                            P5
                                          P3                                P7                   P7
                                          RRAG                        RRAG            WFG
             Figure 8.1  (a) Resource request and allocation graph (RRAG); (b) Equivalence of RRAG
             and wait-for graph (WFG) when each resource class contains only one resource unit.
                  Figure 8.1(b) shows both an RRAG and a WFG for a system that
             has  a  resource    class    R3    that  contains  only  one   resource  unit  and      three
             processes P5, P6, and P7. The edges (P6, R3) and (R3,P5) in the RRAG
             together indicate that process P6 is waiting for the resource currently allo-
             cated to P5. Hence we have an edge (P6, P5) in the WFG. Edge (P7, P5)
             similarly indicates that process P7 is waiting for the resource currently allocated
             to P5.
             ·
             Paths in an RRAG and a WFG               We can deduce the presence of deadlocks from
             the nature of paths in an RRAG and a WFG. We define the following notation
             for this purpose:
                  Blocked_P      set of blocked processes
                  WFi            The wait-for set of Pi, i.e., the set of processes that hold
                                 resources required by process Pi.
                  With this notation, Parts 1 and 2 of Definition 8.1 can be restated as follows:
                                                          D  Blocked_P                               (8.1)
                                                For all Pi  D, W F i  D.                             (8.2)
                  Consider a system in which each resource class contains only one resource
             unit. Let the system contain a single path P1 - R1 - P2 - R2 . . . Pn-1 - Rn-1 - Pn
             in its RRAG. Thus, process Pn is not blocked on any resource and no resource is
             currently allocated to P1. The WFG of this system would contain the single path
             P1 - P2 - . . . - Pn.
                  We can establish the absence of a deadlock in this system by showing that
             conditions (8.1) and (8.2) are not satisfied by any set of processes in the system.
             Blocked_P is {P1, . . . , Pn-1}. First, consider the set of processes {P1, . . . , Pn}.
             This set is not a subset of Blocked_P, which violates condition (8.1), and so this
             set of processes is not deadlocked. Now, consider the set {P1, . . . , Pn-1}. Here,
             WF n-1 = {Pn} violates condition (8.2). Any other subset of {P1, . . . , Pn} can
             similarly be shown to violate condition (8.2) for some process. Hence there is no
             deadlock in the system.



                                                                                   Chapter 8     Deadlocks       283
   Now, if the unit of resource class Rn-1 were to be allocated to P1 instead of
Pn, the path in the RRAG would be P1 - R1 - P2 - R2 . . . Pn-1 - Rn-1 - P1. This
is a cyclic path, also called a cycle, because it ends on the same node on which it
begins, i.e., node P1. The WFG also contains a cycle, which is P1 - P2 . . . - P1.
Blocked_P is {P1, . . . , Pn-1}, same as before. A deadlock exists because the set
{P1, . . . , Pn-1} satisfies both condition (8.1) and (8.2) since
·  {P1, . . . , Pn-1}  Blocked_P
·  For all Pi        {P1, . . . , Pn-1}, W F i   contains  a  single  process  Pl  such    that
   Pl  {P1, . . . , Pn-1}.
   From this analysis we can conclude that condition (8.2), which implies exis-
tence of mutual wait-for relationships between processes of D, can be satisfied
only by cyclic paths. Hence a deadlock cannot exist unless an RRAG, or a WFG,
contains a cycle.
                                                                                                                 ·
RRAG Showing a Deadlock                                                                          Example    8.3
Figure 8.2 shows the RRAG for Example 8.1. The RRAG contains a cyclic
path  Pi-printer-Pj -tape-Pi.        Here        WF i  =   {Pj }  and  WF j    =   {Pi }.  D  =
{P1, P2} satisfies both condition (8.1) and (8.2). Hence processes Pi and Pj
are deadlocked.
                                                                                              ·
   Does presence of a cycle in an RRAG or a WFG imply a deadlock? In the
system discussed so far, each resource class contained a single resource unit, so
a cycle in the RRAG or WFG implied a deadlock. However, it may not be so in
all systems. Consider a path P1 - R1 . . . Pi - Ri - Pi+1 - . . . Pn in a system in
which a resource class Ri contains many resource units. A WFG cannot be used
to depict the allocation state of this system; hence, we will discuss the RRAG for
the system. If some process Pk not included in the path holds one unit of resource
class Ri, that unit may be allocated to Pi when Pk released it. The edge (Pi, Ri)
could thus vanish even without Pi+1 releasing the unit of Ri held by it.
   Thus, a cyclic path in an RRAG may be broken when some process not
included in the cycle releases a unit of the resource. Therefore the presence of
a cycle in an RRAG does not necessarily imply existence of a deadlock if a
resource class contains more than one resource unit. (We draw on this knowledge
                                                 Pi
                            printer                    tape
                                                 Pj
Figure 8.2  RRAG for the system of Example 8.1.



284  Part 2  Process Management
                  in  Section  8.7  when  we       develop  a   formal  characterization  for  deadlocks.)
                  Example 8.4 illustrates such a situation.
·
     Example 8.4  A Cycle in RRAG Does Not Imply a Deadlock
                  A system has one printer and two tape drives and three processes Pi, Pj, and Pk.
                  The nature of processes Pi and Pj is the same as depicted in Example 8.1--each
                  of them requires a tape drive and a printer. Process Pk requires only a tape
                  drive for its operation. Let process Pk request for a tape drive before requests
                  1­4 are made as in Example 8.1.
                      Figure 8.3 shows the RRAG after all requests have been made. The graph
                  has a cycle involving Pi and Pj. This cycle would be broken when process Pk
                  completes because the tape drive released by it would be allocated to Pj. Hence
                  there is no deadlock. We come to the same conclusion when we analyze the
                  set of processes {Pi, Pj } according to Definition 8.1 because WF j = {Pi, Pk}
                  and Pk  {Pi, Pj } violates condition (8.2).
                  ·
                  8.2.2.2 Matrix Model
                  In the matrix model, the allocation state of a system is primarily represented by
                  two matrices. The matrix Allocated_resources indicates how many resource units
                  of each resource class are allocated to each process in the system. The matrix
                  Requested_resources represents pending requests. It indicates how many resource
                  units of each resource class have been requested by each process in the system.
                  If a system contains n processes and r resource classes, each of these matrices
                  is an n × r matrix. The allocation state with respect to a resource class Rk indi-
                  cates the number of units of Rk allocated to each process, and the number of
                  units of Rk requested by each process. These are represented as n-tuples (Allo-
                  cated_resources1,k, . . . , Allocated_resourcesn,k) and (Requested_resources1,k, . . . ,
                  Requested_resourcesn,k), respectively.
                      Some auxiliary matrices may be used to represent additional information
                  required for a specific purpose. Two such auxiliary matrices are Total_resources
                  and Free_resources, which indicate the total number of resource units in each
                  resource class and the number of resource units of each resource class that are
                  free, respectively. Each of these matrices is a column matrix that has r elements
                  in it. Example 8.5 is an example of a matrix model.
                                                            Pi
                                          printer               tape
                                                            Pj                  Pk
                  Figure 8.3  RRAG after all requests of Example 8.4 are made.
