Authentication of Data and Messages
Authenticity of data requires that a process should be capable of verifying
that data was originated or sent by a claimed person or process and that it
has not been tampered with by an intruder. The latter aspect implies integrity
of data.
   Integrity of data is ensured as follows: When data d is originated or is to be
transmitted, a special one-way hash function h is used to compute a hash value v.
This hash value, also called a message digest, has a fixed length irrespective of
the size of data. Apart from the properties of one-way functions described earlier
in Section 15.4.1, this special one-way hash function has the property that a
birthday attack is infeasible; i.e., given the hash value v of data d, it is impractical
to construct another data d  whose hash value would also be v. The data and the
hash value are stored and transmitted as a pair <d, v>. To check the authenticity
of d, its hash value is computed afresh by using h, and it is compared with v.
Following from the special property of h mentioned above, data d is considered
to be in its original form if the two match; otherwise, d has been tampered with.
For this scheme to work, the value v should itself be protected against tampering
or substitution by an intruder; otherwise, an intruder could substitute a pair
<d, v> by another pair <d , v > and mislead other processes into thinking that
data d    is genuine. Accordingly, the person or process originating or transmitting
d encrypts v or the pair <d, v>, using its own encryption key, so that tampering
or substitution of v can be detected. Note that it is less expensive to encrypt v
rather than <d, v>.
   Authenticity requires one more check--verify whether v or <d, v> was
encrypted by the claimed person or process. This check is made by using a certi-
fication authority, which provides information concerning encryption keys used
by persons or processes in a secure manner. Details of this check are described in
the following.
21.3.1 Certification Authorities and Digital Certificates
A certification authority (CA) assigns public and private keys to an entity, whether
a person or a process, after ascertaining its identity by using some means of phys-
ical verification. The keys are valid for a specific period of time. The certification
authority also acts like a key distribution center discussed in Section 21.2.1:
It keeps a record of all keys assigned by it, and when a process requests it for
the public key of some person or process, it issues a public key certificate which
includes the following information:
·  Serial number of the certificate
·  Owner's distinguished name (DN), which consists of the DNS name of the
   owner and the owner's name, unit, locality, state, and country in a textual
   form.
·  Identifying information of owner, such as address
·  Owner's public key



796  Part 5  Distributed Operating Systems
             · Date of issue and date of expiry, and the issuer's distinguished name
             · Digital signature on the above information by the certification authority
             A number of certification authorities could operate in parallel. A server
             would obtain a certificate from one of these. If a client knows which certifica-
             tion authority a server is registered with, it can request the certification authority
             for the server's public key certificate. Alternatively, if it knows the IP address of
             the server, it can request the server to forward its own public key certificate.
             The purpose of asking for the certificate of an entity is to obtain its public
             key for communicating with it. However, before the receiver of the certificate
             uses the key to communicate with the entity, it has to ensure that the certificate
             is genuine and belongs to the entity with which it wishes to communicate; i.e.,
             it is not subject to a security attack called the man-in-the-middle attack. In this
             attack, an intruder masquerades as a server. When a client requests the server
             for the server's digital certificate, the intruder intercepts the message and sends
             a forged certificate containing its own public key to the client. Now, if it can
             intercept subsequent messages from the client to the server, it can read those
             messages by using its own private key. If it so desires, it can initiate a conversation
             with the genuine server, this time masquerading as the client, and pass on the
             client's messages to the server after reading them. Neither the client nor the
             server would be able to discover that they are subject to a successful man-in-the-
             middle attack.
             The public key certificate contains many items of information that are used
             to prevent such attacks. The certificate is digitally signed by the certification
             authority. The client can use this digital signature to ensure that the certificate
             has not been tampered with or forged. (We discuss details of digital certifi-
             cates in Section 21.3.2.) For this, it requires the public key of the certification
             authority that issued the certificate. If it does not already know this key, it
             can request a higher-order certification authority for a certificate of this certi-
             fication authority. Once genuineness of the certificate has been established, it
             can check whether the certificate is valid by checking whether the current date
             falls within the validity period of the certificate. If it knows the IP address of
             the server, it can check that against the IP address information mentioned in
             the certificate. It begins exchanging messages with the server only if all these
             checks succeed.
             21.3.2 Message Authentication Codes and Digital Signatures
             A message authentication code (MAC) is used to check the integrity of data. A
             process that originates or transmits data d obtains MACd , the message authenti-
             cation code of d, as follows: It generates a message digest v for d through a one-way
             hashing function. It encrypts v by using an encryption key that is known only to
             itself and to the intended recipient of d. The result is MACd . It now stores or
             transmits the pair <d, MACd>. Only the intended recipient of d can check and
             verify the integrity of d.
