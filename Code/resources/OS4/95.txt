Summary
A computing environment consists of a computer                 execute instructions while an I/O operation was
system,     its  interfaces  with      other  systems,  and    in progress. Operating systems exploited this fea-
the services provided by its operating system to               ture to service several programs simultaneously by
its  users  and  their   programs.      Computing       envi-  overlapping an I/O operation within one program
ronments    evolved      with      advances   in    computer   with execution of instructions in another program.
technology and computer applications. Each envi-               A multiprogramming operating system assigned
ronment desired a different combination of effi-               high priorities to I/O-bound programs and per-
cient use and user service, so it was serviced by a            formed priority-based scheduling to achieve good
separate class of operating systems that employed              system performance.
its own concepts and techniques. In this chapter,                    User convenience became important when the
we discussed the concepts and techniques used in               cost  of  computing  hardware     declined.    Accord-
the fundamental classes of operating systems.                  ingly, the time-sharing operating systems focused
     The    batch        processing    operating    systems    on providing fast response to user programs. It
focused on automating processing of a collection of            was achieved through round-robin scheduling with
programs, which reduced CPU idle times between                 time-slicing, which serviced all programs by turn
programs.        Development       of  the  direct  memory     and limited the amount of CPU time a program
access (DMA) technology enabled the CPU to                     could use when it was its turn to use the CPU.



                                                                  Chapter 3  Overview of Operating Systems              75
    A    real-time     computer      application      has     to  performs its control functions in several of these
satisfy time constraints specified by an external                 computers. It achieves efficient use of resources of
system. Hard real-time systems such as mission                    all computers by letting programs share them over
control systems require their time constraints to                 the network, speeds up execution of a program by
be  satisfied  in   a     guaranteed    manner,       whereas     running its parts in different computers at the same
soft real-time systems such as multimedia systems                 time, and provides reliability through redundancy
can tolerate occasional failure to meet their time                of resources and services.
constraints. Real-time operating systems support                  A modern operating system controls a diverse
concurrency within an application program and                     computing environment that has elements of all
employ techniques such as priority-based schedul-                 the classic computing environments, so it has to
ing and deadline-aware scheduling to help meet the                use different techniques for different applications.
time constraints.                                                 It employs an adaptive strategy that selects the
    A    distributed      operating     system  controls      a   most appropriate techniques for each application
group of computer systems that are networked; it                  according to its nature.
TEST     YOUR CONCEPTS                                                                                                       ·
    3.1  Programs   A,    B,  C,     and  D     have  similar          b. Throughput increases almost linearly with
         structure--each of them consists of a single loop                   the degree of multiprogramming
         that contains n statements that perform some                  c. CPU efficiency changes only marginally with
         processing on each element of a single dimen-                       the degree of multiprogramming
         sioned array Z. Other features of these programs              d. CPU efficiency increases linearly with the
         are as follows:                                                     degree of multiprogramming
                                                                  3.3  Classify each of the following statements as true
         Program A:       n = 4 and Z is a huge array.                 or false:
         Program B:       n = 100 and Z is a huge array.               a. Because of presence of the cache memory,
         Program C:       n = 4 and Z is a small array.                      a program requires more CPU time to exe-
         Program D:       n = 100 and Z is a small                           cute in a multiprogramming or time-sharing
                          array.                                             system than it would require if it were to be
                                                                             executed in a batch processing system.
         These programs are executed in a batch process-               b. To  achieve    high  throughput,   a  multipro-
         ing system. List these programs in the descend-                     gramming OS assigns a higher priority to
         ing order by cache hit ratio.                                       CPU-bound programs.
    3.2  A multiprogramming system is used to execute                  c. If a multiprogramming kernel finds that the
         a collection of programs C. The system has                          CPU efficiency is low, it should remove an
         enough memory to accommodate a large num-                           I/O-bound program from memory.
         ber of programs. The programs in C are executed               d. If the time slice in a time-sharing system is
         several times, each time with a different degree of                 too large, processes will complete their oper-
         multiprogramming, and throughput of the sys-                        ation in the same order in which they were
         tem and CPU efficiency are plotted against the                      initiated.
         degree of multiprogramming. In each of the fol-               e. Two persons using the same time-sharing sys-
         lowing cases, what inference can you draw about                     tem at the same time might receive widely
         the nature of programs in C?                                        different response times.
         a. Throughput changes only marginally with                    f. It is incorrect to use masking of interrupts in
         the degree of multiprogramming                                      a real-time operating system.



76       Part 1       Overview
EXERCISES                                                                                                                ·
    3.1  A system is described as overloaded if more work           operation that lasts for 200 ms. The program is
         is directed at it than its capacity to perform             executed in a multiprogramming OS with negli-
         work. It is considered underloaded if some of              gible overhead. Prepare a timing chart showing
         its capacity is going to waste. The following pol-         the CPU and I/O activities of the program and
         icy is proposed to improve the throughput of a             compute its elapsed time in the following cases:
         batch processing system: Classify jobs into small          a. The program has the highest priority in the
         jobs and long jobs depending on their CPU time             system.
         requirements. Form separate batches of short               b. The    program    is   multiprogrammed   with     n
         and long jobs. Execute a batch of long jobs only           other programs with identical characteristics
         if no batches of short jobs exist. Does this policy        and has the lowest priority. Consider cases
         improve the throughput of a batch processing               (i) n = 3, (ii) n = 4, and (iii) n = 5.
         system that is: (a) underloaded? (b) overloaded?     3.7   A multiprogramming operating system has a
    3.2  The kernel of a multiprogramming system classi-            negligible overhead. It services programs that
         fies a program as CPU-bound or I/O-bound and               are identical in size. Each program contains a
         assigns an appropriate priority to it. What would          loop that has n iterations, where each itera-
         be the consequence of a wrong classification of            tion contains computations that consume tc ms
         programs for throughput and turnaround times               of CPU time, followed by I/O operations that
         in a multiprogramming system? What would be                require tio ms. The programs are of two classes;
         the effect of a wrong classification on the plot of        values of n, tc, and tio for these two classes are:
         throughput versus degree of multiprogramming                            Class        n  tc      tio
         of Figure 3.5?                                                          A            5  15      100
    3.3  The CPU of a multiprogramming system is exe-                                 B       6  200     80
         cuting a high-priority program when an inter-
         rupt signaling completion of an I/O operation              The system has sufficient memory to accommo-
         occurs. Show all actions and activities in the OS          date only two programs. Ten programs arrive in
         following the interrupt if                                 the system at time 0, five each of classes A and B.
         a. The I/O operation was started by a lower-               Draw a timing chart showing operation of pro-
         priority program                                           grams in the system until two programs complete
         b. The I/O operation was started by a higher-              their operation. Find their turnaround times.
         priority program.                                    3.8   A program is said to "make progress" if either
         Illustrate each case with the help of a timing             the CPU is executing its instructions or its I/O
         chart.                                                     operation is in progress. The progress coefficient
    3.4  A multiprogramming OS has programs progiob                 of a program is the fraction of its lifetime in the
         and progcb in memory, with progcb having a                 system during which it makes progress. Com-
         higher priority. Draw a timing chart for the sys-          pute progress coefficients of the programs in
         tem analogous to Figure 3.4, and show that                 Exercise 3.6(b).
         the throughput is less than for the system of        3.9   Comment on the validity of the following state-
         Figure 3.4.                                                ment: "A CPU-bound program always has a very
    3.5  Draw a timing chart for a system containing two            low progress coefficient in a multiprogramming
         CPU-bound programs and two I/O-bound pro-                  system."
         grams when (a) CPU-bound programs have a             3.10  A multiprogramming system uses a degree of
         higher priority, (b) I/O-bound programs have a             multiprogramming (m)             1. It is proposed to
         higher priority.                                           double the throughput of the system by augmen-
    3.6  A program consists of a single loop that executes          tation/replacement of its hardware components.
         50 times. The loop contains a computation that             Would   any  of      the  following  three  proposals
         consumes 50 ms of CPU time, followed by an I/O             achieve the desired result?



                                                                   Chapter 3   Overview of Operating Systems                     77
      a. Replace the CPU by a CPU with twice the                   3.16  A computer is operated under a time-sharing
      speed.                                                             OS. It is proposed to add a second CPU to
      b. Expand the memory to twice its present size.                    the computer to improve its throughput. Under
      c. Replace the CPU by a CPU with twice the                         what  conditions       would     addition  of   the     sec-
      speed and expand the memory to twice its                           ond   CPU   improve     throughput   only       if  mem-
      present size.                                                      ory is increased? Under what conditions would
3.11  Programs     being  serviced  in   a  multiprogram-                it improve throughput even if memory is not
      ming system are named P1, . . . , Pm, where m                      increased?
      is the degree of multiprogramming, such that                 3.17  A time-sharing system uses swapping as the fun-
      priority of program Pi     > priority of program                   damental memory management technique. It
      Pi+1. All programs are cyclic in nature, with                      uses the following lists to govern its actions:
      each cycle containing a burst of CPU activity                      a scheduling list, a swapped-out list contain-
      and a burst of I/O activity. Let bicpu and biio be                 ing processes that are swapped out, a being-
      the CPU and I/O bursts of program Pi. Com-                         swapped-out      list   containing  processes       to  be
      ment on the validity of each of the following                      swapped out, and a being-swapped-in list con-
      statements:                                                        taining   processes     to   be  swapped   in.  Explain
      a. CPU idling occurs if biho >     j=h(bcjpu), where               when and why the time-sharing kernel should
      Ph is the highest-priority program.                                put   processes  in     the  being-swapped-out          and
      b. Program      Pm  is  guaranteed    to     receive               being-swapped-in lists.
      CPU time if biio < (bic+pu1 + biio+1) and biio >             3.18  A time-sharing system uses a time slice of 100 ms.
           j=i+1...m(bcj pu) for all values of i = 1, . . . ,            Each process has a cyclic behavior pattern. In
      m - 1,                                                             each cycle, it requires an average of 50 ms of
3.12  A program is said to starve if it does not receive                 CPU time to compute the result of a subrequest
      any CPU time. Which of the following condi-                        and an average of 150 ms to print it on the user's
      tions implies starvation of the lowest-priority                    screen. A process receives a new subrequest 1 sec-
      program in a multiprogramming system? (The                         ond after it has finished printing results of the
      notation is the same as in Exercise 3.11.)                         previous subrequest. The operating system can
      a. For some program Pi, biio <        j =i +1...m (bcjpu ).        accommodate 10 processes in memory at any
                                                                         time; however, it has enough I/O devices for 25
      b. For some program Pi, biio <        j =i +1...m (bcjpu )         processes. The swap-in and swap-out times of
      and bci pu > bijo for all j > i.                                   each process are ts ms each. Calculate the aver-
3.13  A time-sharing system contains n identical pro-                    age throughput of the system over a 10-second
      cesses, each executing a loop that contains a                      period in each of the following cases:
      computation requiring tp CPU seconds and an                        a. The operating system contains 10 processes.
      I/O  operation  requiring     tio  seconds.  Draw        a         b. The operating system contains 20 processes
      graph depicting variation of response time with                         and ts is 750 ms.
      values of the time slice . (Hint: Consider cases                   c. The operating system contains 20 processes
      for tp < ,  < tp < 2 × , and tp > 2 × .)                                and ts is 250 ms.
3.14  Comment on the validity of the following state-              3.19  A real-time application requires a response time
      ment: "Operation of a time-sharing system is                       of 2 seconds. Discuss the feasibility of using a
      identical with operation of a multiprogramming                     time-sharing system for the real-time application
      system executing the same programs if  exceeds                     if the average response time in the time-sharing
      the CPU burst of every program."                                   system is (a) 20 seconds, (b) 2 seconds, or (c) 0.2
3.15  Answer the following with full justifications:                     seconds.
      a. Does swapping improve or degrade the effi-                3.20  A time-sharing system services n processes. It
      ciency of system utilization?                                      uses a time slice of  CPU seconds, and requires
      b. Can swapping be used in a multiprogram-                         ts CPU seconds to switch between processes. A
      ming system?                                                       real-time application requires tc seconds of CPU



78          Part 1      Overview
         time, followed by an I/O operation that lasts                        a. Is this a real-time application? Justify your
         for tio seconds, and has to produce a response                       answer.
         within td seconds. What is the largest value of                      b. Would creation of multiple processes reduce
            for  which    the  time-sharing     system  can   sat-            the response time of the application? If so,
         isfy the response requirements of the real time                      what should be the processes in it? What
         application?                                                         should be their priorities?
3.21     An application program is being developed for                        c. Is it necessary to define any domain-specific
         a microprocessor-based controller for an auto-                       events     and  interrupts?  If   so,  specify  their
         mobile. The application is required to perform                       priorities.
         the following functions:                                   3.22      If two independent events e1 and e2 have the
           i. Monitor and display the speed of the auto-                      probabilities of occurrence pr1 and pr2, where
            mobile                                                            both  pr1  and  pr2  <  1,   the  probability   that
         ii. Monitor the fuel level and raise an alarm, if                    both events occur at the same time is pr1× pr2.
            necessary                                                         A distributed system contains two disks. The
         iii. Display the fuel efficiency, i.e., miles/gallon                 probability that both disks fail is required to
            at current speed                                                  be <0.0001. What should be the probability of
         iv. Monitor the engine condition and raise an                        failure of a disk?
            alarm if an unusual condition arises                    3.23      To obtain computation speedup in a distributed
           v. Periodically record some auxiliary informa-                     system, an application is coded as three parts to
            tion like speed and fuel level (i.e., implement                   be executed on three computer systems under
            a "black box" as in an airliner.)                                 control of a distributed operating system. How-
         Answer the following questions concerning the                        ever, the speedup obtained is <3. List all possible
         application:                                                         reasons for the poor speedup.
BIBLIOGRAPHY                                                                                                                       ·
Literature on batch processing, multiprogramming, and               Unix operating system. Beck et al. (2002), Bovet and
time-sharing systems dates back to the 1970s. Zhao                  Cesati (2005), and Love (2005) discuss the Linux oper-
(1989) and Liu (2000) are good sources for real-time                ating system, while Stevens and Rago (2005) describes
systems. Most operating systems texts cover the classes             Unix,  Linux,        and  BSD  operating    systems.  Mauro
of operating systems described in this chapter; some                and McDougall (2006) discusses Solaris. Russinovich
recent OS texts are Tanenbaum (2001), Bic and Shaw                  and Solomon (2005) describes the Windows operating
(2003),  Nutt    (2004),  Silberschatz  et      al.  (2005),  and   systems.
Stallings (2005). Several comprehensive bibliographies
on operating systems are available on the Internet.                 1.     Bach, M. J. (1986): The Design of the Unix
     Tanenbaum and Renesse (1985) is a good start-                         Operating System, Prentice Hall, Englewood
ing  point  for  a  study      of  distributed  operating     sys-         Cliffs, N.J.
tems. It discusses the major design issues in distributed           2.     Beck, M., H. Bohme, M. Dziadzka, U. Kunitz,
operating systems and contains a survey of some dis-                       R. Magnus, C. Schroter, and D. Verworner
tributed operating systems. Tanenbaum (1995) discusses                     (2002): Linux Kernel Programming, 3rd ed.,
some well-known distributed operating systems in detail.                   Pearson Education, New York.
Coulouris et al. (2001) discusses the concepts and design           3.     Bic, L., and A. C. Shaw (2003): Operating Systems
of distributed systems.                                                    Principles, Prentice Hall, Englewood Cliffs, N.J.
     Several books describe specific modern operating               4.     Bovet, D. P., and M. Cesati (2005): Understanding
systems. Bach (1986) and Vahalia (1996) describe the                       the Linux Kernel, 3rd ed., O'Reilly, Sebastopol.



                                                       Chapter 3    Overview of Operating Systems              79
5.   Coulouris, G., J. Dollimore, and T. Kindberg      17.  Sinha, P. K. (1997): Distributed Operating
     (2001): Distributed Systems--Concepts and              Systems, IEEE Press, New York.
     Design, 3rd ed., Addison-Wesley, New York.        18.  Smith, A. J. (1980): "Multiprogramming and
6.   Crowley, C. (1997): Operating Systems--A Design        memory contention," Software--Practice and
     Oriented Approach, McGraw-Hill, New York.              Experience, 10 (7), 531­552.
7.   Denning, P. J. (1971): "Third generation          19.  Stallings, W. (2005): Operating Systems--
     operating systems," Computing Surveys, 4 (1),          Internals and Design Principles, 5th ed., Pearson
     175­216.                                               Education, New York.
8.   Fortier, P. J. (1988): Design of Distributed      20.  Stevens, W. R., and S. A. Rago (2005): Advanced
     Operating Systems, McGraw-Hill, New York.              Programming in the Unix Environment, 2nd ed.,
9.   Goscinski, A. (1991): Distributed Operating            Addison-Wesley Professional.
     Systems--The Logical Design, Addison-Wesley,      21.  Tanenbaum, A. S. (2003): Computer Networks,
     New York.                                              4th ed., Prentice Hall, Englewood Cliffs, N.J.
10.  Liu, J. W. S. (2000): Real-Time systems, Pearson  22.  Tanenbaum, A. S. (2001): Modern Operating
     Education, New York.                                   Systems, 2nd ed., Prentice Hall, Englewood
11.  Love, R. (2005): Linux Kernel Development,             Cliffs, N.J.
     2nd ed., Novell Press.                            23.  Tanenbaum, A. S., and R. Van Renesse (1985):
12.  Mauro, J., and R. McDougall (2006): Solaris            "Distributed Operating Systems," Computing
     Internals, 2nd ed., Prentice Hall.                     Surveys, 17 (1), 419­470.
13.  Nutt, G. (2004): Operating Systems--A Modern      24.  Tanenbaum, A. S. (1995): Distributed Operating
     Perspective, 3rd ed., Addison-Wesley, Reading,         Systems, Prentice Hall, Englewood Cliffs, N.J.
     Mass.                                             25.  Vahalia, U. (1996): Unix Internals: The New
14.  Russinovich, M. E., and D. A. Solomon (2005):          Frontiers, Prentice Hall, Englewood
     Microsoft Windows Internals, 4th ed., Microsoft        Cliffs, N.J.
     Press, Redmond, Wash.                             26.  Wirth, N. (1969): "On multiprogramming,
15.  Silberschatz, A., P. B. Galvin, and G. Gagne           machine coding, and computer organization,"
     (2005): Operating System Principles, 7th ed.,          Communications of the ACM, 12 (9),
     John Wiley, New York.                                  489­491.
16.  Singhal, M., and N. G. Shivaratri (1994):         27.  Zhao, W. (1989): "Special issue on real-time
     Advanced Concepts in Operating Systems,                operating systems," Operating System Review,
     McGraw-Hill, New York.                                 23, 7.
