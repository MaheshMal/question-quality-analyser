Real-Time Operating Systems
            In a class of applications called real-time applications, users need the computer to
            perform some actions in a timely manner to control the activities in an external
            system, or to participate in them. The timeliness of actions is determined by



                                       Chapter 3  Overview of Operating                 Systems  69
the time constraints of the external system. Accordingly, we define a real-time
application as follows:
Definition 3.7 Real-Time Application  A program that responds to activities in
an external system within a maximum time determined by the external system.
If the application takes too long to respond to an activity, a failure can
occur in the external system. We use the term response requirement of a system
to indicate the largest value of response time for which the system can function
perfectly; a timely response is one whose response time is not larger than the
response requirement of the system.
Consider a system that logs data received from a satellite remote sensor.
The satellite sends digitized samples to the earth station at the rate of 500 samples
per second. The application process is required to simply store these samples in
a file. Since a new sample arrives every two thousandth of a second, i.e., every
2 ms, the computer must respond to every "store the sample" request in less than
2 ms, or the arrival of a new sample would wipe out the previous sample in the
computer's memory. This system is a real-time application because a sample must
be stored in less than 2 ms to prevent a failure. Its response requirement is 1.99 ms.
The deadline of an action in a real-time application is the time by which the action
should be performed. In the current example, if a new sample is received from
the satellite at time t, the deadline for storing it on disk is t + 1.99 ms.
Examples of real-time applications can be found in missile guidance, com-
mand and control applications like process control and air traffic control, data
sampling and data acquisition systems like display systems in automobiles, multi-
media systems, and applications like reservation and banking systems that employ
large databases. The response requirements of these systems vary from a few
microseconds or milliseconds for guidance and control systems to a few seconds
for reservation and banking systems.
3.7.1 Hard and Soft Real-Time Systems
To take advantage of the features of real-time systems while achieving maximum
cost-effectiveness, two kinds of real-time systems have evolved. A hard real-time
system is typically dedicated to processing real-time applications, and provably
meets the response requirement of an application under all conditions. A soft
real-time system makes the best effort to meet the response requirement of a
real-time application but cannot guarantee that it will be able to meet it under
all conditions. Typically, it meets the response requirements in some probabilistic
manner, say, 98 percent of the time. Guidance and control applications fail if they
cannot meet the response requirement, hence they are serviced by hard real-time
systems. Applications that aim at providing good quality of service, e.g., multi-
media applications and applications like reservation and banking, do not have a
notion of failure, so they may be serviced by soft real-time systems--the picture
quality provided by a video-on-demand system may deteriorate occasionally, but
one can still watch the video!



70  Part 1  Overview
            3.7.2 Features of a Real-Time Operating System
            A real-time OS provides the features summarized in Table 3.7. The first three
            features help an application in meeting the response requirement of a system
            as follows: A real-time application can be coded such that the OS can execute
            its parts concurrently, i.e., as separate processes. When these parts are assigned
            priorities and priority-based scheduling is used, we have a situation analogous
            to multiprogramming within the application--if one part of the application ini-
            tiates an I/O operation, the OS would schedule another part of the application.
            Thus, CPU and I/O activities of the application can be overlapped with one
            another, which helps in reducing the duration of an application, i.e., its running
            time. Deadline-aware scheduling is a technique used in the kernel that schedules
            processes in such a manner that they may meet their deadlines.
                      Ability to specify domain-specific events and event handling actions enables
            a real-time application to respond to special conditions in the external system
            promptly. Predictability of policies and overhead of the OS enables an applica-
            tion developer to calculate the worst-case running time of the application and
            decide whether the response requirement of the external system can be met. The
            predictability requirement forces a hard real-time OS to shun features such as vir-
            tual memory whose performance cannot be predicted precisely (see Chapter 12).
            The OS would also avoid shared use of resources by processes, because it can lead
            to delays that are hard to predict and unbounded, i.e., arbitrarily large.
                      A real-time OS employs two techniques to ensure continuity of operation
            when faults occur--fault tolerance and graceful degradation. A fault-tolerant
            computer system uses redundancy of resources to ensure that the system will
            keep functioning even if a fault occurs; e.g., it may have two disks even though
            the application actually needs only one disk. Graceful degradation is the ability
            of a system to fall back to a reduced level of service when a fault occurs and
            to revert to normal operations when the fault is rectified. The programmer can
            Table 3.7       Essential Features of a Real-Time Operating System
            Feature             Explanation
            Concurrency         A programmer can indicate that some parts of an application
            within an           should be executed concurrently with one another. The OS
            application         considers execution of each such part as a process.
            Process priorities  A programmer can assign priorities to processes.
            Scheduling          The OS uses priority-based or deadline-aware scheduling.
            Domain-specific     A programmer can define special situations within the external
            events, interrupts  system as events, associate interrupts with them, and specify
                                event handling actions for them.
            Predictability      Policies and overhead of the OS should be predictable.
            Reliability         The OS ensures that an application can continue to function
                                even when faults occur in the computer.
