Goals of an OS
           The fundamental goals of an operating system are:
           ·         Efficient use: Ensure efficient use of a computer's resources.
           ·         User convenience: Provide convenient methods of using a computer system.
           ·         Noninterference: Prevent interference in the activities of its users.
                     The goals of efficient use and user convenience sometimes conflict. For exam-
           ple, emphasis on quick service could mean that resources like memory have to
           remain allocated to a program even when the program is not in execution; how-
           ever, it would lead to inefficient use of resources. When such conflicts arise, the
           designer has to make a trade-off to obtain the combination of efficient use and
           user convenience that best suits the environment. This is the notion of effective
           utilization of the computer system. We find a large number of operating systems
           in use because each one of them provides a different flavor of effective utilization.
           At one extreme we have OSs that provide fast service required by command and
           control applications, at the other extreme we have OSs that make efficient use of
           computer resources to provide low-cost computing, while in the middle we have
           OSs that provide different combinations of the two.
                     Interference with a user's activities may take the form of illegal use or mod-
           ification of a user's programs or data, or denial of resources and services to a
           user. Such interference could be caused by both users and nonusers, and every
           OS must incorporate measures to prevent it.
                     In the following, we discuss important aspects of these fundamental goals.
           1.2.1 Efficient Use
           An operating system must ensure efficient use of the fundamental computer sys-
           tem resources of memory, CPU, and I/O devices such as disks and printers. Poor
           efficiency can result if a program does not use a resource allocated to it, e.g.,



                                                                            Chapter 1  Introduction  9
if memory or I/O devices allocated to a program remain idle. Such a situation
may have a snowballing effect: Since the resource is allocated to a program, it
is denied to other programs that need it. These programs cannot execute, hence
resources allocated to them also remain idle. In addition, the OS itself consumes
some CPU and memory resources during its own operation, and this consump-
tion of resources constitutes an overhead that also reduces the resources available
to user programs. To achieve good efficiency, the OS must minimize the waste of
resources by programs and also minimize its own overhead.
Efficient use of resources can be obtained by monitoring use of resources
and performing corrective actions when necessary. However, monitoring use of
resources increases the overhead, which lowers efficiency of use. In practice, oper-
ating systems that emphasize efficient use limit their overhead by either restricting
their focus to efficiency of a few important resources, like the CPU and the mem-
ory, or by not monitoring the use of resources at all, and instead handling user
programs and resources in a manner that guarantees high efficiency.
1.2.2 User Convenience
User convenience has many facets, as Table 1.1 indicates. In the early days of
computing, user convenience was synonymous with bare necessity--the mere
ability to execute a program written in a higher level language was considered
adequate. Experience with early operating systems led to demands for better
service, which in those days meant only fast response to a user request.
Other facets of user convenience evolved with the use of computers in new
fields. Early operating systems had command-line interfaces, which required a
user to type in a command and specify values of its parameters. Users needed
substantial training to learn use of the commands, which was acceptable because
most users were scientists or computer professionals. However, simpler inter-
faces were needed to facilitate use of computers by new classes of users. Hence
graphical user interfaces (GUIs) were evolved. These interfaces used icons on
a screen to represent programs and files and interpreted mouse clicks on the
icons and associated menus as commands concerning them. In many ways, this
move can be compared to the spread of car driving skills in the first half of
Table 1.1     Facets of User Convenience
Facet                     Examples
Fulfillment of necessity  Ability to execute programs, use the file system
Good Service              Speedy response to computational requests
User friendly interfaces  Easy-to-use commands, graphical user interface (GUI)
New programming model     Concurrent programming
Web-oriented features     Means to set up Web-enabled servers
Evolution                 Add new features, use new computer technologies
