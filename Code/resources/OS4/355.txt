Summary
The message passing paradigm realizes exchange                         receive call; the kernel considers messages sent by
of information among processes without using                           all processes to it for delivery. In indirect naming,
shared    memory.      This  feature       makes        it  useful     sender and receiver processes mention the name
in diverse situations such as in communication                         of a mailbox, rather than names of receiver and
between OS functionalities in a microkernel-based                      sender processes, respectively. It permits the same
OS, in client­server computing, in higher-level pro-                   sender and destination processes to engage in mul-
tocols for communication, and in communication                         tiple independent conversations through different
between   tasks    in  a     parallel  or    distributed        pro-   mailboxes. A mailbox contains a set of buffers
gram. In this chapter, we studied message passing                      in which messages can be stored pending their
facilities in programming languages and operating                      delivery. When mailboxes are not used, the ker-
systems.                                                               nel employs its own buffers to store undelivered
     The key issues in message passing are nam-                        messages.
ing of the sender and receiver processes in the send                   Message passing is employed in higher-level
and receive calls, and delivery of messages. In sym-                   protocols such as the simple mail transfer protocol
metric naming, the sender and receiver processes                       (SMTP), the remote procedure call (RPC), and the
name each other in send and receive calls. It permits                  parallel virtual machine (PVM) and message pass-
a process to engage in multiple independent con-                       ing interface (MPI) standards for parallel program-
versations simultaneously. In asymmetric naming,                       ming. Operating systems provide many message
the receiver process does not name a sender in its                     passing facilities for use in diverse situations.
TEST    YOUR CONCEPTS                                                                                                                 ·
9.1     Classify each of the following statements as true                         of the process to which the message will be
        or false:                                                                 delivered.
        a. When a process sends a message by using a                   9.2  Select the appropriate alternative in each of the
          blocking send call, the kernel has to copy the                    following questions:
          message into a buffer area.                                       a. If an OS has n processes and uses blocking
        b. When    a   nonblocking        send  call  is    used,  a              send calls and asymmetric receive calls,
          message has to be copied two times before                               i. The OS may require up to n - 1 buffers for
          the      receiver  process      can   be    allowed      to                  each of the n processes at any time.
          examine it.                                                             ii.  The  OS  may  require  upto  n  ×  n  buffers  at
        c. In  symmetric     naming,      a    process    that    has                  any time.                    2     2
          become       blocked  on     a  receive   call    will   be             iii. The OS may require upto n buffers at any
          activated whenever any process sends it a                                    time.
          message.                                                                iv. None of (i)­(iii).
        d. When indirect naming is used, a process send-                    b. Answer question 9.2(a) if processes use block-
          ing a message need not know the identity                                ing send calls and symmetric receive calls.
EXERCISES                                                                                                                             ·
9.1 In Figure 9.6, a process may be blocked because                         an ECB. Explain how these conditions should
        of lack of memory needed to create an IMCB or                       be handled.



                                                                       Chapter 9     Message Passing                335
9.2  Modify the scheme of Figure 9.6 to implement           9.5  It is proposed to introduce a time-out facility in
     message passing with asymmetric naming and                  message passing whereby a process performing
     blocking sends.                                             a receive specifies the amount of time it is pre-
9.3  The reservation system of Example 9.1 uses flags            pared to wait for a message. If this period elapses,
     in a receive call to check for presence of pend-            a time-out occurs and the process is activated.
     ing messages. A hypothetical mailbox facility               Give a design to implement this facility using
     does not support flags. Hence a process uses                the event handling mechanism.
     the following approach to obtain an equivalent         9.6  Processes in an OS use asymmetric and asyn-
     effect: When a process wishes to check whether              chronous message passing. The kernel reserves
     messages exist in a mailbox, it sends a special             a limited amount of memory for use as mes-
     message with the text "testing for messages" to             sage buffers and does not use disk space for this
     the mailbox, and then performs a receive from               purpose. Analyze this system for deadlocks (see
     the mailbox. If its own special message is deliv-           Chapter 8). How should the kernel detect such
     ered to it, it concludes that there are no other            deadlocks?
     messages in the mailbox. Rewrite the reserva-          9.7  Give a design to implement the asynchronous
     tion system using this approach. (Hint: Beware              send  of       the  message  passing  interface  (MPI)
     of outdated special messages!)                              standard described in Section 9.4.3.
9.4  Modify the scheme of Figure 9.6 to implement
     Unix message queues.
BIBLIOGRAPHY                                                                                                           ·
Interprocess    communication  in  the  RC4000  system      4.   Brinch Hansen, P. (1970): "The nucleus of a
is described in Brinch Hansen (1970). Accetta et al.             multiprogramming system," Communications of
(1986) discusses the scheme used in Mach. Bach (1986),           the ACM, 13 (4), 238­241, 250.
McKusick et al. (1996), Vahalia (1996), and Stevens         5.   Geist, G., J. A. Kohl, and P. M. Papadopoulos
and Rago (2005) discusses message passing in Unix.               (1996): "PVM and MPI: a comparison of
Bovet and Cesati (2005) discusses message passing in             features," Calculateurs Paralleles, 8 (2).
Linux, while Russinovich and Solomon (2005) discusses       6.   McKusick, M. K., K. Bostic, M. J. Karels, and
message passing in Windows.                                      J. S. Quarterman (1996): The Design and
    Geist   et  al.  (1996)  describes  and  compares  the       Implementation of the 4.4 BSD Operating System,
PVM and MPI message passing standards for parallel               Addison Wesley, Reading, Mass.
programming.                                                7.   Russinovich, M. E., and D. A. Solomon (2005):
1.  Accetta, M., R. Baron, W. Bolosky, D. B. Golub,              Microsoft Windows Internals, 4th ed., Microsoft
    R. Rashid, A. Tevanian, and M. Young (1986):                 Press, Redmond, Wash.
    "Mach: A new kernel foundation for Unix                 8.   Stevens, W. R., and S. A. Rago (2005): Advanced
    development," Proceedings of the Summer 1986                 Programming in the Unix Environment, 2nd ed.,
    USENIX Conference, June 1986, 93­112.                        Addison Wesley Professional, Reading, Mass.
2.  Bach, M. J. (1986): The Design of the Unix              9.   Tanenbaum, A. S. (2001): Modern Operating
    Operating System, Prentice Hall, Englewood                   Systems, 2nd ed., Prentice Hall, Englewood
    Cliffs, N. J.                                                Cliffs, N. J.
3.  Bovet, D. P., and M. Cesati (2005): Understanding       10.  Vahalia, U. (1996): Unix Internals--The New
    the Linux Kernel, 3rd ed., O'Reilly, Sebastopol,             frontiers, Prentice Hall, Englewood Cliffs, N. J.
    Calif.
