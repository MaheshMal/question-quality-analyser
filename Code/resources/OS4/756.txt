Election Algorithms
A critical function like replacing the lost token in a token-based algorithm is
assigned to a single process called the coordinator for the function. Typically, pri-
orities are assigned to processes and the highest-priority process among a group
of processes is chosen as the coordinator for a function. Any process that finds
that the coordinator is not responding to its request assumes that the coordinator
has failed and initiates an election algorithm. The election algorithm chooses the
highest-priority nonfailed process as the new coordinator and announces its id
to all nonfailed processes.
Election Algorithms for Unidirectional Ring Topologies  All links in the ring are
assumed to be FIFO channels. It is further assumed that the control part of a
failed process continues to function and simply forwards each received message
along its out-edge. The election is performed by obtaining ids of all nonfailed
processes in the system and electing the highest-priority process. It is achieved
as follows: A process Pi initiates an election by sending out an ("elect me", Pi)
message along its out-edge. A process Pj that receives this message performs two
actions--it sends out an ("elect me", Pj) message of its own and also forwards the
("elect me", Pi) message immediately after its own message. These messages reach
process Pi such that the ("elect me", Pi) message follows all the other messages.
Process Pi examines process ids contained in all these messages and elects the
highest priority process, say Phigh, as the new coordinator. It now sends a ("new
coordinator", Phigh) message along the ring to inform all processes about the
outcome of the election. It is assumed that failures do not occur during an election.
This assumption ensures identical results even if two or more processes initiate
elections in parallel. The algorithm requires an order of n2 messages per election.
The number of messages per election can be reduced as follows: A process Pj
that receives an ("elect me", Pi) message sends out only one message--it sends an
("elect me", Pj) message to start a new election if its own priority is higher than
that of Pi; otherwise, it simply forwards the ("elect me", Pi) message. This way,
only the highest-priority nonfailed process Phigh would get back its own "elect
me" message. It would send a ("new coordinator", Phigh) message to announce
its election. All other processes abandon their elections, if any, when they receive
the ("new coordinator", Phigh) message. When this refinement is used, the number
of messages per election can be a maximum of 3n - 1 as follows: The ("elect me",
Pi) message sent by the process that initiates an election needs a maximum of
n - 1 messages to reach the highest-priority process. The election initiated by the
highest-priority process requires n messages to complete, and another n messages
are required to inform every process about the outcome of the election. The time
consumed by the election could be as high as (3n - 1) Ã— twc, where twc is the
worst-case message delivery time over a link.
Bully Algorithm  A process Pi that initiates an election sends an ("elect me", Pi)
message to all higher-priority processes and starts a time-out interval T1. If it
does not hear from any of them before the time-out occurs, it assumes that all of
them have failed, sends a ("new coordinator", Pi) message to all lower-priority
processes, and becomes the new coordinator. If its "elect me" message reaches a
