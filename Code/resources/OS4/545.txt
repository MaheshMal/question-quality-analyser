Virtual File System
                   Users have diverse requirements of a file system, such as convenience, high reli-
                   ability, fast response, and access to files on other computer systems. A single file
                   system cannot provide all these features, so an operating system provides a virtual
                   file system (VFS), which facilitates simultaneous operation of several file systems.
                   This way each user gets to use the file system he prefers.
                   A virtual file system (VFS) is an abstraction that supports a generic file
                   model. The abstraction is implemented by a VFS layer that is situated between a
                   process and a file system (see Figure 13.31). The VFS layer has two interfaces--an
                   interface with the file systems, and an interface with processes. Any file system that
                   conforms to the specification of the VFS­file system interface can be installed to
                   work under the VFS. This feature makes it easy to add a new file system. The VFS­
                   process interface provides functionalities to perform generic open, close, read, and



                                                                                Chapter 13  File  Systems  525
                                   Processes
                                                           Virtual file system
                                   Metadata                (VFS)
   Metadata    File data           Metadata  File data     Metadata             File data
   File systems of type X          File systems of type Y  File systems of type Z
Figure 13.31 Virtual file system.
write operations on files, and mount, unmount operations on file systems. These
functionalities are invoked through system calls. The VFS determines which file
system a file actually belongs to and invokes the open, close, read, and write
functionalities of the specific file system through the VFS­file system interface.
It also invokes functions of the specific file system to implement mount and
unmount operations.
   All file systems operating under the VFS are available for use simultaneously.
In the system of Figure 13.31, one process may use a file system of type X while
another process simultaneously uses a file system of type Y. The virtual file system
can also be used to compose a heterogeneous file system. For example, a user can
mount a file system of type X in a directory of a file system of type Y. This feature
is useful with removable media like CDs; it permits a user to mount the file system
that exists in a CD in his current directory and access its files without any concern
for the fact that file data is recorded in a different format. This feature is also useful
in a distributed environment for mounting a remote file system into a file system
of a computer. It is described in Section 20.6.1.
   As shown in the schematic diagram of Figure 13.31, the virtual file system
does not contain any file data. It merely contains data structures that constitute
VFS metadata. Each file system contains its own metadata and file data. The key
data structure used by the virtual file system is the virtual node, popularly called
vnode, which contains the information needed for performing operations on a
file. It can be looked upon as a file object with the following three parts:
·  File-system-independent data such as a file id that is unique within the
   domain of the VFS, which may be the individual computer system or a net-
   work; the file type, e.g., directory, data file, or a special file; and other fields
   such as an open count, lock, and flags.
·  File-system-specific data such as the file map table.
·  Addresses of functions in the file system that contains this file. These func-
   tions implement the open, close, read, and write operations on files of this
   file type.
