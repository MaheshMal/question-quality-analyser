Paging
             In the logical view, the address space of a process consists of a linear arrangement
             of pages. Each page has s bytes in it, where s is a power of 2. The value of s is
             specified in the architecture of the computer system. Processes use numeric logical
             addresses. The MMU decomposes a logical address into the pair (pi, bi), where pi
             is the page number and bi is the byte number within page pi. Pages in a program
             and bytes in a page are numbered from 0; so, in a logical address (pi, bi), pi  0
             and 0  bi < s. In the physical view, pages of a process exist in nonadjacent areas
             of memory.
             Consider two processes P and R in a system using a page size of 1 KB. The
             bytes in a page are numbered from 0 to 1023. Process P has the start address 0
             and a size of 5500 bytes. Hence it has 6 pages numbered from 0 to 5. The last page
             contains only 380 bytes. If a data item sample had the address 5248, which is
             5 × 1024 + 128, the MMU would view its address as the pair (5, 128). Process R
             has a size of 2500 bytes. Hence it has 3 pages, numbered from 0 to 2. Figure 11.19
             shows the logical view of processes P and R.
             The hardware partitions memory into areas called page frames; page frames
             in memory are numbered from 0. Each page frame is the same size as a page. At
             any moment, some page frames are allocated to pages of processes, while others
             are free. The kernel maintains a list called the free frames list to note the frame
             numbers of free page frames. While loading a process for execution, the kernel
             consults the free frames list and allocates a free page frame to each page of the
             process.
             To facilitate address translation, the kernel constructs a page table (PT) for
             each process. The page table has an entry for each page of the process, which indi-
             cates the page frame allocated to the page. While performing address translation
             for a logical address (pi, bi), the MMU uses the page number pi to index the page
             table of the process, obtains the frame number of the page frame allocated to pi,
             and computes the effective memory address according to Eq. (11.1).
             Figure 11.20 shows the physical view of execution of processes P and R.
             Each page frame is 1 KB in size. The computer has a memory of 10 KB, so page
             frames are numbered from 0 to 9. Six page frames are occupied by process P, and
             three page frames are occupied by process R. The pages contained in the page
             frames are shown as P-0, . . . , P-5 and R-0, . . . , R-2. Page frame 4 is free. Hence
             the free frames list contains only one entry. The page table of P indicates the page
             frame allocated to each page of P. As mentioned earlier, the variable sample of
                                        0
                                        1
                                sample  2
                                        3                         0
                                        4                         1
                                        5                         2
                                           Process P                 Process R
             Figure  11.19  Logical view of processes in paging.



                                                                                      Chapter 11   Memory Management  397
                   Page              Id of
                frame #              page
                   0                 R-0
                   1                 P-0
                   2                 R-1      Page frame #
                   3                 P-1          0
                   4                 R-2                 1
        sample     5                              1      3          Page frame #
                   6                 P-3          2      9             0
                   7                 P-4          3      6                0           4
                   8                 P-5          4      7             1  2
                   9                 P-2          5      8             2  5           Free frames
                                                                                      list
                         Memory               Page table of     P   Page table of R
Figure  11.20 Physical   organization in    paging.
process P has the logical address (5, 128). When process P uses this logical address
during its execution, it will be translated into the effective memory address by
using Eq. (11.1) as follows:
        Effective memory address of (5, 128)
                         = start address of page frame #8 + 128
                         = 8 × 1024 + 128
                         = 8320
    We use the following notation to describe how address translation is actually
performed:
s       Size of a page
ll      Length of a logical address (i.e., number of bits in it)
lp      Length of a physical address
nb      Number of bits used to represent the byte number in a logical address
np      Number of bits used to represent the page number in a logical address
nf      Number of bits used to represent the frame number in a physical address
    The size of a page, s, is a power of 2. nb is chosen such that s = 2nb . Hence
the least significant nb bits in a logical address give us bi, the byte number within
a page. The remaining bits in a logical address form pi, the page number. The
MMU obtains the values of pi and bi simply by grouping the bits of a logical
address as follows:
                                          np         -          nb  -
                                          pi                    bi
                                                     ll             -
where   np  =  ll  - nb.  Use    of  a  power        of      2  as  the   page  size  similarly   simplifies
construction of the effective memory address. Let page pi be allocated page frame
qi. Since pages and page frames have identical sizes, nb bits are needed to address
the bytes in a page frame. The physical address of byte 0 of page frame qi is
therefore
                                            nf       -          nb  -
                                              qi             0······0
                                                         lp         -
