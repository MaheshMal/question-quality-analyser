Summary
A  multiprocessor     OS  exploits   the  presence           of  be able to execute the kernel's code in parallel
multiple CPUs in the computer to provide high                    so that the kernel can respond to events read-
throughput of the system, computation speedup of                 ily and it does not become a performance bot-
an application, and graceful degradation of the OS               tleneck. Synchronization and scheduling of user
capabilities when faults occur in the system. In this            processes should be performed in such a manner
chapter we studied the architecture of multipro-                 that processes do not incur large delays. The OS
cessor systems and OS issues involved in ensuring                has to also ensure that its algorithms are scal-
good performance.                                                able; that is, they perform well even when the size
     Multiprocessor       systems    are  classified  into       of  the   system   increases   because       of  an  increase
three kinds based on the manner in which mem-                    in the number of CPUs, memory units, or user
ory can be accessed by different CPUs. In the                    processes.
uniform memory architecture (UMA), the memory                        Multiprocessor OSs employ special kinds of
is shared between all CPUs. This architecture is                 locks called spin locks and sleep locks to control
also called the symmetrical multiprocessor (SMP)                 the overhead of process synchronization. Affinity
architecture. In the nonuniform memory architec-                 scheduling is employed to schedule a process on the
ture (NUMA), each CPU has some local memory                      same CPU so that it would obtain high cache hit
that can be accessed faster than the rest of the mem-            ratios during its operation, and coscheduling is used
ory which is accessible over an interconnection                  to schedule processes of an application on different
network.                                                         CPUs at the same time so that they can com-
     A multiprocessor OS should exploit presence                 municate efficiently among themselves. Operating
of multiple CPUs to schedule user processes in                   systems employ process shuffling to ensure that the
parallel, and also to ensure efficiency of its own               highest-priority ready processes are always in oper-
functioning. Two issues are important in this con-               ation on its CPUs. We discussed features of Linux,
text: kernel structure and delays caused by syn-                 Mach, and Windows operating systems in this
chronization and scheduling. Many CPUs should                    context.
TEST     YOUR CONCEPTS                                                                                                       ·
   10.1  Classify each of the following statements as true           10.2  What would be the consequence of not imple-
         or false:                                                         menting cache coherence in a multiprocessor
         a. Scheduling performed by one CPU in a sym-                      system?
          metric multiprocessor system may result in                       a. Results produced by a process that does not
          shuffling   of  processes  operating  on    many                   interact   with  any   other  process    might  be
          CPUs in the system.                                                wrong.
         b. The interprocessor interrupt (IPI) is not used                 b. Results produced by a group of interacting
          in process synchronization in a symmetric                          processes that use the same CPU might be
          multiprocessor system.                                             wrong.
         c. When a process spins on a lock, it affects per-                c. Results produced by a group of interacting
          formance of processes being serviced by other                      processes  that    do  not  use  the  same  CPU
          CPUs.                                                              might be wrong.
         d. When affinity scheduling is used, a process                    d. None of (a)­(c).
          may require less CPU time to complete its
          operation.



                          Chapter 10   Synchronization and Scheduling in Multiprocessor Operating Systems           359
EXERCISES                                                                                                                 ·
10.1  Describe two situations in which an SMP ker-                   for process synchronization discussed in Section
      nel requires use of the interprocessor interrupt               10.4.2?
      (IPI).                                                   10.4  Can priority inversion occur when spin or sleep
10.2  An OS assigns the same priority to all processes               locks are used? (See Section 6.5.1 for a definition
      (or threads) of an application, but uses different             of priority inversion.)
      priorities for different applications.                   10.5  Discuss suitability of various kinds of locks for
      a. In a uniprocessor system, does this assign-                 synchronization of parallel activities within an
            ment  of   priorities  provide  an    advantage          SMP kernel.
            that is similar to that provided by affinity       10.6  Processes   of    an  application  interact  among
            scheduling?                                              themselves   very     frequently.  Among     queued,
      b. In a multiprocessor system, does this assign-               spin, and sleep locks, which would you consider
            ment of priorities provide an advantage that             suitable for implementing this application on a
            is similar to that provided by coscheduling?             multiprocessor system, and why?
10.3  Can the hands-off feature of Mach be used to
      advantage in implementing the software scheme
BIBLIOGRAPHY                                                                                                              ·
Most books on computer architecture discuss architec-              SunOS kernel," Proceedings of the Summer 1992
ture of multiprocessors and interconnection networks,              USENIX Conference, 11­18.
e.g., Hennessy and Patterson (2002), Hamacher et al.           3.  Hamacher, C., Z. Vranesic, and S. Zaky (2002):
(2002), and Stallings (2003).                                      Computer Organization, 5th ed., McGraw-Hill,
    Mellor-Crummey and Scott (1991), Menasse et al.                New York.
(1991), and Wisniewski et al. (1997) discuss synchroniza-      4.  Hennessy, J., and D. Patterson (2002): Computer
tion of processes in a multiprocessor environment. The             Architecture: A Quantitative Approach, 3rd ed.,
efficient software solution for process synchronization            Morgan Kaufmann, San Mateo, Calif.
described in Fig. 10.7 is adapted from Mellor-Crummey          5.  Mellor-Crummey, and M. L. Scott (1991):
and Scott (1991). Ousterhout (1982), Tucker and Gupta              "Algorithms for scalable synchronization on
(1989), and Squillante (1990) discuss scheduling issues            shared memory multiprocessor," ACM
in multiprocessor operating systems.                               Transactions on Computer Systems, 9 (1), 21­65.
    Eykholt et al. (1992) discusses multithreading of          6.  Karlin, A. R., K. Li, M. S. Menasse, and
the SunOS kernel to enhance effectiveness of its SMP               S. Owicki (1991): "Empirical studies of
structure.  Accetta   et  al.  (1986)  describes  the   Mach       competitive spinning for shared memory
multiprocessor operating system. Love (2005) discusses             multiprocessor," Proceedings of 13th ACM
synchronization   and     scheduling   in  Linux  2.6,  while      Symposium on Operating System Principles,
Russinovich and Solomon (2005) describes synchroni-                41­55.
zation and scheduling in Windows.                              7.  Kontothanassis L. I., R. W. Wisniewski, and
1.  Accetta, M., R. Baron, W. Bolosky, D. B. Golub,                M. L. Scott (1997): "Scheduler conscious
    R. Rashid, A. Tevanian, and M. Young (1986):                   synchronization," ACM Transactions on
    "Mach: A new kernel foundation for Unix                        Computer Systems, 15 (1), 3­40.
    development," Proceedings of the Summer 1986               8.  Love, R. (2005): Linux Kernel Development, 2nd
    USENIX Conference, June 1986, 93­112.                          ed., Novell Press.
2.  Eykholt, J. R., S. R. Kleiman, S. Barton,                  9.  Ousterhout, J. K. (1982): "Scheduling techniques
    S. Faulkner, A. Shivalingiah, M. Smith, D. Stein,              for concurrent systems," Proceedings of the 3rd
    J. Voll, M. Weeks, and D. William (1992):                      International Conference on Distributed
    "Beyond multiprocessing: multithreading the                    Computing Systems, 22­30.



360  Part 2          Process Management
10.  Russinovich, M. E., and D. A. Solomon (2005):       13.  Tanenbaum, A. S. (2001): Modern Operating
     Microsoft Windows Internals, 4th ed., Microsoft          Systems, 2nd ed., Prentice Hall, Englewood
     Press, Redmond, Wash.                                    Cliffs, N.J.
11.  Squillante, M. (1990): "Issues in shared-memory     14.  Tucker, A., and A. Gupta (1989): "Process control
     multiprocessor scheduling: A performance                 and scheduling issues for multiprogrammed
     evaluation," Ph.D. dissertation, Dept. of                shared memory multiprocessors," Proceedings of
     Computer Science & Engineering, University               12th ACM Symposium on Operating System
     of Washington.                                           Principles, 159­166.
12.  Stallings, W. (2003): Computer Organization and
     Architecture, 6th ed., Prentice Hall, Upper Saddle
     River, N.J.



                                part                                               3