Processes and Programs
A program is a passive entity that does not perform any actions by itself; it has to
be executed if the actions it calls for are to take place. A process is an execution of
a program. It actually performs the actions specified in a program. An operating
system shares the CPU among processes. This is how it gets user programs to
execute.
5.1.1 What Is a Process?
To understand what is a process, let us discuss how the OS executes a program.
Program P shown in Figure 5.1(a) contains declarations of a file info and a
variable item, and statements that read values from info, use them to perform
some calculations, and print a result before coming to a halt. During execution,
                                                                                                    111



112  Part 2  Process Management
             Figure 5.1  A program and an abstract view of its execution.
             instructions of this program use values in its data area and the stack to perform
             the intended calculations. Figure 5.1(b) shows an abstract view of its execution.
             The instructions, data, and stack of program P constitute its address space. To
             realize execution of P, the OS allocates memory to accommodate P's address
             space, allocates a printer to print its results, sets up an arrangement through
             which P can access file info, and schedules P for execution. The CPU is shown
             as a lightly shaded box because it is not always executing instructions of P--the
             OS shares the CPU between execution of P and executions of other programs.
             Following the above discussion, we can define a process as follows:
             Definition 5.1 Process  An execution of a program using resources allocated
             to it.
             When a user initiates execution of a program, the OS creates a new process
             and assigns a unique id to it. It now allocates some resources to the process--
             sufficient memory to accommodate the address space of the program, and some
             devices such as a keyboard and a monitor to facilitate interaction with the user.
             The process may make system calls during its operation to request additional
             resources such as files. We refer to the address space of the program and resources
             allocated to it as the address space and resources of the process, respectively.
             Accordingly, a process comprises six components:
                                 (id, code, data, stack, resources, CPU state)                  (5.1)
             where   id is the unique id assigned by the OS
                     code is the code of the program (it is also called the text of a program)
                     data is the data used in the execution of the program, including data
                         from files
                     stack contains parameters of functions and procedures called during
                         execution of the program, and their return addresses



                                                           Chapter 5  Processes     and  Threads  113
resources is the set of resources allocated by the OS
CPU state is composed of contents of the PSW and the general-purpose
registers (GPRs) of the CPU (we assume that the stack pointer is
maintained in a GPR)
The CPU state (Section 2.2.1) contains information that indicates which
instruction in the code would be executed next, and other information--such
as contents of the condition code field (also called the flags field) of the PSW--
that may influence its execution. The CPU state changes as the execution of the
program progresses. We use the term operation of a process for execution of a
program. Thus a process operates when it is scheduled.
5.1.2 Relationships between Processes and Programs
A program consists of a set of functions and procedures. During its execution,
control flows between the functions and procedures according to the logic of the
program. Is an execution of a function or procedure a process? This doubt leads to
the obvious question: what is the relationship between processes and programs?
The OS does not know anything about the nature of a program, including
functions and procedures in its code. It knows only what it is told through system
calls. The rest is under control of the program. Thus functions of a program may
be separate processes, or they may constitute the code part of a single process.
We discuss examples of these situations in the following.
Table 5.1 shows two kinds of relationships that can exist between pro-
cesses and programs. A one-to-one relationship exists when a single execution
of a sequential program is in progress, for example, execution of program P in
Figure 5.1. A many-to-one relationship exists between many processes and a
program in two cases: Many executions of a program may be in progress at the
same time; processes representing these executions have a many-to-one relation-
ship with the program. During execution, a program may make a system call to
request that a specific part of its code should be executed concurrently, i.e., as
a separate activity occurring at the same time. The kernel sets up execution of
the specified part of the code and treats it as a separate process. The new pro-
cess and the process representing execution of the program have a many-to-one
relationship with the program. We call such a program a concurrent program.
Processes that coexist in the system at some time are called concurrent pro-
cesses. Concurrent processes may share their code, data and resources with other
Table 5.1     Relationships between Processes and Programs
Relationship          Examples
One-to-one            A single execution of a sequential program.
Many-to-one           Many simultaneous executions of a program,
                      execution of a concurrent program.



114  Part 2  Process Management
             processes; they     have  opportunities  to  interact  with  one    another     during      their
             execution.
             5.1.3 Child Processes
             The kernel initiates an execution of a program by creating a process for it. For
             lack of a technical term for this process, we will call it the primary process for the
             program execution. The primary process may make system calls as described in
             the previous section to create other processes--these processes become its child
             processes, and the primary process becomes their parent. A child process may itself
             create other processes, and so on. The parentÂ­child relationships between these
             processes can be represented in the form of a process tree, which has the primary
             process as its root. A child process may inherit some of the resources of its parent;
             it could obtain additional resources during its operation through system calls.
             Typically, a process creates one or more child processes and delegates some
             of its work to each of them. It is called multitasking within an application. It
             has the three benefits summarized in Table 5.2. Creation of child processes has
             the same benefits as the use of multiprogramming in an OS--the kernel may
             be able to interleave operation of I/O-bound and CPU-bound processes in the
             application, which may lead to a reduction in the duration, i.e., running time, of
             an application. It is called computation speedup. Most operating systems permit
             a parent process to assign priorities to child processes. A real-time application
             can assign a high priority to a child process that performs a critical function to
             ensure that its response requirement is met. We shall elaborate on this aspect later
             in Example 5.1.
             The third benefit, namely, guarding a parent process against errors in a child
             process, arises as follows: Consider a process that has to invoke an untrusted code.
             Table 5.2           Benefits of  Child  Processes
             Benefit                                 Explanation
             Computation speedup                     Actions that the primary process of an
                                                     application would have performed sequentially if
                                                     it did not create child processes, would be
                                                     performed concurrently when it creates child
                                                     processes. It may reduce the duration, i.e.,
                                                     running time, of the application.
             Priority for critical                   A child process that performs a critical function
             functions                               may be assigned a high priority; it may help to
                                                     meet the real-time requirements of an
                                                     application.
             Guarding a parent process               The kernel aborts a child process if an error
             against errors                          arises during its operation. The parent process is
                                                     not affected by the error; it may be able to
                                                     perform a recovery action.



                                                            Chapter 5       Processes    and Threads       115
If the untrusted code were to be included in the code of the process, an error in
the untrusted code would compel the kernel to abort the process; however, if the
process were to create a child process to execute the untrusted code, the same error
would lead to the abort of the child process, so the parent process would not come
to any harm. The OS command interpreter uses this feature to advantage. The
command interpreter itself runs as a process, and creates a child process whenever
it has to execute a user program. This way, its own operation is not harmed by
malfunctions in the user program.
Example 5.1 illustrates how the data logging system of Section 3.7 benefits
from use of child processes.
                                                                                                           Â·
Child Processes in a Real-Time Application                                               Example      5.1
The real-time data logging application of Section 3.7 receives data samples
from a satellite at the rate of 500 samples per second and stores them in
a file. We assume that each sample arriving from the satellite is put into
a special register of the computer. The primary process of the application,
which we will call the data_logger process, has to perform the following three
functions:
1.  Copy the sample from the special register into memory.
2.  Copy the sample from memory into a file.
3.  Perform some analysis of a sample and record its results into another file
    used for future processing.
    It creates three child processes named copy_sample, record_sample, and
housekeeping, leading to the process tree shown in Figure 5.2(a). Note that a
process is depicted by a circle and a parentÂ­child relationship is depicted by
an arrow. As shown in Figure 5.2(b), copy_sample copies the sample from the
register into a memory area named buffer_area that can hold, say, 50 samples.
record_sample writes a sample from buffer_area into a file. housekeeping ana-
lyzes a sample from buffer_area and records its results in another file. Arrival
of a new sample causes an interrupt, and a programmer-defined interrupt ser-
vicing routine is associated with this interrupt. The kernel executes this routine
whenever a new sample arrives. It activates copy_sample.
    Operation of the three processes can overlap as follows: copy_sample can
copy a sample into buffer_area, record_sample can write a previous sample
to the file, while housekeeping can analyze it and write its results into the
other file. This arrangement provides a smaller worst-case response time of
the application than if these functions were to be executed sequentially. So
long as buffer_area has some free space, only copy_sample has to complete
before the next sample arrives. The other processes can be executed later. This
possibility is exploited by assigning the highest priority to copy_sample.
                                                                                      Â·



116  Part 2  Process Management
                                                                                        register
                                                                       buffer  copy_
                                                                       _ area  sample
                                          data_
                                          logger                               record_
                                                                               sample
                                                                               house-
                                                                               keeping
                     copy_       record_  housekeeping
                     sample      sample
                                                                               Memory
                     (a)                                               (b)
             Figure  5.2  Real-time application of Section  3.7:  (a)  process tree; (b) processes.
                 To facilitate use of child processes, the kernel provides operations for:
             1.  Creating a child process and assigning a priority to it
             2.  Terminating a child process
             3.  Determining the status of a child process
             4.  Sharing, communication, and synchronization between processes
                 Their use can be described as follows: In Example 5.1, the data_logger
             process creates three child processes. The copy_sample and record_sample pro-
             cesses share buffer_area. They need to synchronize their operation such that
             process record_sample would copy a sample out of buffer_area only after process
             copy_sample has written it there. The data_logger process could be programmed
             to either terminate its child processes before itself terminating, or terminate itself
             only after it finds that all its child processes have terminated.
             5.1.4 Concurrency and Parallelism
             Parallelism is the quality of occurring at the same time. Two events are parallel
             if they occur at the same time, and two tasks are parallel if they are performed
             at the same time. Concurrency is an illusion of parallelism. Thus, two tasks are
             concurrent if there is an illusion that they are being performed in parallel, whereas,
             in reality, only one of them may be performed at any time.
                 In an OS, concurrency is obtained by interleaving operation of processes
             on the CPU, which creates the illusion that these processes are operating at the
