Modern Operating Systems
Users engage in diverse activities in a modern computing environment. Hence a
modern operating system cannot use a uniform strategy for all processes; it must
use a strategy that is appropriate for each individual process. For example, as
mentioned in Section 3.1, a user may open a mail handler, edit a few files, execute
some programs, including some programs in the background mode, and watch a
video at the same time. Here, operation of some of the programs may be inter-
active or may involve activities in other nodes of a distributed computer system,
whereas rendering of a video is a soft real-time activity. Hence the OS must use
round-robin scheduling for program executions, use priority-based scheduling for
processes of the video application, and implement remote procedure calls (RPC)
to support activities in another node. Thus, a modern OS uses most concepts and
techniques that we discussed in connection with the batch processing, multipro-
gramming, time-sharing, real-time, and distributed operating systems. Table 3.10
shows typical examples of how the earlier concepts are drawn upon.
     To handle diverse activities effectively, the OS employs strategies that adapt
to the situations encountered during their operation. Some examples of such
strategies are:
·    The kernel employs priority-based scheduling; however, instead of assigning
     fixed priorities to all processes as in a multiprogramming system, it assigns
     fixed high priorities only to processes with real-time constraints, and changes
     current priorities of other processes to suit their recent behavior--increases
     the priority of a process if it has been engaged in an interaction or an I/O
     operation recently, and reduces its priority if it has not been.
·    A modern OS typically uses the feature called virtual memory, whereby only
     some of the parts of a process are held in memory at any time and other
     parts are loaded when needed. The kernel considers the recent behavior of
     a process to decide how much memory it should allocate to the process--it
     allocates less memory if the process had used only a few of its parts recently,
     and allocates more memory if the process had used several of its parts.
·    The kernel provides a plug-and-play capability whereby I/O devices could be
     connected to the computer at any time during its operation, and the kernel
     would select appropriate methods of handling them.
We will see several instances of adaptive strategies in the following chapters.
