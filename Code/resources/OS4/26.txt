Abstract Views of an Operating System
A question such as "What is an OS?" is likely to evoke different answers, depend-
ing on the user's interest. For example,
· To a school or college student, the OS is the software that permits access to
     the Internet.
· To a programmer, the OS is the software that makes it possible to develop
     programs on a computer system.
                                                                                               5



6  Part 1  Overview
           ·         To a user of an application package, the OS is simply the software that makes
                     it possible to use the package.
           ·         To a technician in, say, a computerized chemical plant, the OS is the invisible
                     component of a computer system that controls the plant.
                     A user perceives an OS as simply a means of achieving an intended use of
           a computer system. For the student, the sole purpose of the computer system is
           to get onto the Internet; the OS helps in achieving this. Hence the student thinks
           of the operating system as the means for Internet browsing. The programmer,
           the user of a package, and the technician similarly identify the OS with their
           particular purposes in using the computer. Since their purposes are different,
           their perceptions of the OS are also different.
                     Figure 1.1 illustrates the four views of an OS we have just considered. They
           are abstract views, because each focuses on those characteristics considered essen-
           tial from the perspective of the individual viewer--it includes some elements of
           reality but ignores other elements. The student, the application user, and the tech-
           nician are end users of the OS; their views do not contain any features of the OS.
           The programmer's view is that of a software developer. It includes features of the
           OS for software development.
                     An OS designer has his own abstract view of the OS, which shows the struc-
           ture of an OS and the relationship between its component parts. Figure 1.2
                          Internet
                     (a)                              (b)
                          Stock quotes
                     (c)                              (d)
           Figure 1.1     Abstract views of an OS: a student's, a programmer's, an application user's and a
           technician's.



                                                            Chapter 1                 Introduction  7
                                        User
                                      User interface
                                      Nonkernel routines
                                        Kernel
                                      Computer hardware
Figure  1.2  A  designer's  abstract  view of an OS.
illustrates this view. Each part consists of a number of routines. The typical
functionalities of these parts are as follows:
·  User interface: The user interface accepts commands to execute programs
   and use resources and services provided by the operating system. It is either
   a command line interface, as in Unix or Linux, which displays a command
   prompt to the user and accepts a user command, or is a graphical user inter-
   face (GUI), as in the Windows operating system, which interprets mouse
   clicks on icons as user commands.
·  Nonkernel routines: These routines implement user commands concerning
   execution of programs and use of the computer's resources; they are invoked
   by the user interface.
·  Kernel: The kernel is the core of the OS. It controls operation of the computer
   and provides a set of functions and services to use the CPU, memory, and
   other resources of the computer. The functions and services of the kernel are
   invoked by the nonkernel routines and by user programs.
   Two features of an OS emerge from the designer's view of an OS shown in
Figure 1.2. The OS is actually a collection of routines that facilitate execution of
user programs and use of resources in a computer system. It contains a hierar-
chical arrangement of layers in which routines in a higher layer use the facilities
provided by routines in the layer below it. In fact, each layer takes an abstract
view of the layer below it, in which the next lower layer is a machine that can
understand certain commands. The fact that the lower layer is a set of routines
rather than a whole computer system makes no difference to the higher layer.
Each higher layer acts as a more capable machine than the layer below it. To the
user, the user interface appears like a machine that understands commands in the
command language of the OS.
   Throughout this book, we will use abstract views to present the design of OS
components. This has two key benefits:
·  Managing complexity: An abstract view of a system contains only selected
   features of the system. This property is useful in managing complexity during
   design or study of a system. For example, an abstract view of how an OS
