Summary
In this chapter, we discussed techniques of effective  execution of a program commences; however, it
management of memory, which involves perform-          requires knowledge of the exact amount of mem-
ing fast allocation and deallocation of memory to      ory  required,  failing  which   it  may  overallocate
processes and ensuring efficient use of memory so      and waste memory. Dynamic memory allocation is
that many processes can be accommodated in it          performed during execution of a program, which
simultaneously.                                        incurs a memory management overhead during
     When a program is coded or compiled, it is        execution, but makes efficient use of memory by
not known which area of the memory would be            allocating only the required amount of memory.
allocated for its execution. However, instructions     The kernel uses a model of memory allocation for
used in it need to use memory addresses for its        a process that contains a statically allocated com-
operands. This dilemma is resolved as follows: A       ponent for the code and data of the program, and
compiler assumes a specific memory area to be          dynamically allocated components for the stack,
available to a program and generates a program         and for the heap in which a program can dynami-
form called object module. The linker, which is a      cally allocate memory through statements such as
system program, uses the procedure called relo-        new or alloc.
cation, which changes the operand addresses in              When a process completes its execution, or
a program's instructions such that the program         releases the memory allocated to it, the kernel
can  execute  correctly  in  the  allocated  memory    reuses the memory to satisfy the requirements of
area. The linker also connects the program with        other processes. When static memory allocation is
library functions required by it to prepare a ready-   used, some of the memory allocated to a process
to-execute program. self-relocating programs can       may remain unused, which is called internal frag-
perform their own relocation. Computer hardware        mentation. When dynamic memory allocation is
assists in dynamic relocation of programs through      used, unless new requests exactly match the sizes of
a special register in the CPU called the reloca-       released memory, some memory is left over when a
tion register. It permits the kernel to change the     new request is satisfied. It remains unused if it is too
memory area allocated to a program during the          small to satisfy a request, which is called external
program's execution.                                   fragmentation.
     Memory allocation can be performed in two              Two approaches can be used to tackle the
ways: Static memory allocation is performed before     fragmentation   problem:     In  the  first  approach,



406         Part 3   Memory Management
the kernel minimizes fragmentation while reusing                 approaches.       Noncontiguous      memory       allocation
memory. Various techniques called first-fit allo-                requires use of a memory management unit in the
cation, best-fit allocation, etc. are used to min-               hardware.
imize   external    fragmentation,       while  techniques       The kernel creates and destroys control blocks
called  buddy      systems    allocation  and   power-of-2       such as the PCB at a very fast rate. Since the sizes
allocation  are     used  to  eliminate   external        frag-  of control blocks are known to the kernel, it mini-
mentation. In the other approach, noncontiguous                  mizes the memory management overhead and the
memory      allocation    is  used,  whereby    a   process      fragmentation problem by having many memory
can be executed even when it is allocated many                   blocks of required size and allocating one of them
small memory areas that add up to its total size                 when a new control block is to be created. The lazy
requirement. This way external fragmentation is                  buddy allocator and the slab allocator are some of
eliminated. Paging and segmentation are two such                 the techniques used by the kernel.
TEST    YOUR CONCEPTS                                                                                                        ·
11.1    Classify each of the following statements as true        11.2  Select      the  correct  alternative  in   each  of  the
        or false:                                                      following questions:
        a. When a stack is used, reuse of a released                   a. A worst-fit allocator always splits the largest
            memory area is automatic.                                       free memory area while making an allocation.
        b. PCD data can be allocated on a stack.                            A free list contains three memory areas of
        c. The relocation register helps the kernel per-                    sizes 6 KB, 15 KB and 12 KB. The next four
            form compaction of programs to avoid exter-                     memory requests are for 10 KB, 2 KB, 5 KB,
            nal fragmentation.                                              and 14 KB of memory. The only placement
        d.  Memory      allocation   performed  by  using    a              strategy that would be able to accommodate
            buddy system allocator does not suffer from                     all four processes is
            internal fragmentation.                                           i.   First-fit,
        e. When a memory area is released in a sys-                           ii.  best-fit,
            tem employing a buddy system allocator, the                     iii.   worst-fit,
            number of free memory areas increases by 1,                     iv.    next-fit.
            decreases by 1, or remains unchanged.                      b. Three processes requiring 150 KB, 100 KB,
        f. External     fragmentation     can   occur     when              and 300 KB of memory are in operation in
            either a buddy system allocator or a power-                     an OS employing a paging system with a page
            of-2 allocator is used.                                         size of 2 KB. The maximum internal memory
        g. When     dynamic     linking   and   loading      is             fragmentation due to memory allocation to
            employed, a routine that is not used in an exe-                 the three processes is
            cution of a program is not loaded in memory.                      i.   Approximately 2 KB
        h. In a paging system, it is not possible to swap                     ii.  Approximately 6 KB
            in a process into a set of noncontiguous mem-                   iii.   275 KB
            ory area(s) that is different from the set of                   iv.    None of (i)­(iii)
            noncontiguous memory areas from which it                   c. A reentrant program is one that
            was swapped out.                                                  i.   Calls itself recursively
        i. In a paging system, a programmer has to                            ii.  Can have several copies in memory that
            demarcate the pages in the code and data of                            can be used by different users
            a program.                                                      iii.   Can   have    a  single   copy  in  memory
        j. There would be no need for linkers if all pro-                          that  is      executed    by    many  users
            grams   were      coded  as  self-relocating  pro-                     concurrently
            grams.



                                                                    Chapter 11         Memory Management                  407
EXERCISES                                                                                                                 ·
11.1  A hypothetical programming language permits                   each. To meet a request for 2 KB, it merges two
      one of the following three attributes to be asso-             adjoining free areas of 1 KB each, if present, and
      ciated with a variable in a program:                          allocates the resulting contiguous area. When an
      a. Static: Variables with this attribute are allo-            area of 2 KB is released, it treats the freed area
      cated memory at compilation time.                             as two free areas of 1 KB each. Show that if the
      b. Automatic: When execution of a program                     allocator has 22 KB available for allocation, it
      is  initiated  or         a  function/subroutine    is        may not be able to honor requests for a total of
      invoked,    variables        with  the  automatic             16 KB.
      attribute declared in the program, function,            11.5  A buddy system allocator is allocated an area of
      or subroutine are allocated memory. Memory                    64 KB. Blocks of size 2 KB, 11 KB, 120 bytes,
      is deallocated when the program completes                     and 20 KB are allocated in that order.
      or the invocation of the function/subroutine                  a. Show      the   allocation  status     and  free   lists
      is exited.                                                    of      the   allocator.  How     many    splits      were
      c. Controlled: A variable x with the controlled               performed?
      attribute is allocated memory when the pro-                   b. Show the allocation status and free lists of
      gram executes the statement new x. Memory                     the allocator after the block of 120 bytes is
      is deallocated when the program executes the                  freed. How many coalesce operations were
      statement release x.                                          performed?
      Discuss the method used to allocate memory              11.6  A power-of-2 allocator uses a minimum block
      to variables with each of these attributes. Com-              size  of  16  bytes  and  a    maximum         block  size
      ment on (i) memory utilization efficiency and (ii)            of 32 KB. It starts its operation with one free
      execution efficiency of these methods.                        block each of sizes 512 bytes, 2 KB, 16 KB and
11.2  A memory allocator using the best-fit allocation              32 KB. Calculate the internal fragmentation if
      policy organizes its free list in ascending order             the allocator processes the same requests as in
      by sizes of free areas. This organization avoids              Exercise 11.5.
      having to scan the entire free list for making an       11.7  When a memory block is freed, a memory allo-
      allocation. However, while handling a request                 cator makes an effort to merge it with one or
      for n bytes, the allocator has to skip over the               both of its neighbors. Do you agree with the
      entries for memory areas that are < n bytes in                following statement? "If sizes of neighboring
      size. Propose a method of organizing the free list            blocks are known, it is adequate to have a tag
      that would eliminate the overhead of examining                at only one boundary of each block. However,
      and skipping over these entries.                              if sizes of neighboring blocks are not known, it
11.3  The kernel of an OS uses a separate memory                    is essential to have tags at both boundaries of
      allocator for handling its own memory require-                each block."
      ments. It is found that this memory allocator           11.8  A buddy system organizes tags of the blocks in
      receives requests to grant and release memory                 a bitmap, which is a one-dimensional array of
      areas of only two sizes, namely, 100 bytes and                tags. Comment on how best the bitmap can be
      150 bytes, at a high rate. Comment on memory                  organized and used. (Hint: Note that blocks may
      utilization efficiency and speed of allocation if             be split and coalesced during operation of the
      the memory allocator is                                       buddy system.)
      a. A first-fit allocator                                11.9  If a binary buddy system starts its operation with
      b. A best-fit allocator                                       a single free block of size 2z bytes.
      c. A slab allocator                                           a. Justify    the  statement   :  "When   a    block  is
11.4  A memory allocator uses the following policy                  released, the number of free blocks in the
      to allocate a single contiguous area for requests             system        may    increase     by  1,  may  remain
      of 1 KB and 2 KB: It sets apart a contiguous                  unchanged,         or  may     decrease   by   a     num-
      memory area of n KB for handling such requests,               ber between 1 and n, both inclusive, where
      and splits this memory area into n areas of 1 KB              n < z."



408      Part 3        Memory Management
         b. Determine the value of n if the minimum              11.13  Does the 50-percent rule apply to the following
         block size in the buddy system is 16 bytes.                    allocators?
11.10    A Fibonacci buddy system uses blocks whose                     a. Buddy system
         sizes are multiples of the terms of the Fibonacci              b. Power-of-2 allocator
         series, for example 16, 32, 48, 80, 128, . . . . Hence         c. Slab allocator
         the size of a block is the sum of the sizes of the      11.14  An OS receives requests for memory allocation
         two immediately smaller blocks. This formula                   at a high rate. It is found that a large frac-
         governs  the  splitting  and  merging  of  blocks.             tion of the requests are for memory areas of
         Compare the execution efficiency and memory                    size 100, 300, and 400 bytes (let us call these
         efficiency of the Fibonacci buddy system with                  "standard" sizes). Other requests are for areas of
         the binary buddy system.                                       various other sizes. Design a memory allocation
11.11    A memory allocator works as follows: Small                     scheme in which no fragmentation arises while
         memory areas are allocated by using a buddy                    allocating areas of standard sizes and no inter-
         system. Large memory areas are allocated by                    nal fragmentation arises while allocating areas
         using a free list and a first-fit allocator. Com-              of other sizes.
         ment on the efficiency and memory utilization           11.15  Compute the slack for each class of buffers if a
         achieved by this allocator.                                    lazy buddy allocator were to be used instead of
11.12    An OS has 110 MB available for user processes.                 the buddy allocator in Exercise 11.5.
         The maximum memory requirement of a pro-                11.16  If the OS of Exercise 11.12 employed paging with
         cess for its own code and data is 20 MB, while                 a page size of 2 KB, is it possible to compute the
         the average memory requirement of a process                    average internal fragmentation in the system?
         is 10 MB. If the OS uses contiguous memory
         allocation and does not know sizes of individ-
         ual processes, what is the average internal and
         external fragmentation?
BIBLIOGRAPHY                                                                                                                ·
Linkers  and  Loaders  are  described  in  Dhamdhere             and Bovet and Cesati (2005) describe its implementa-
(1999).                                                          tion in Linux. The Windows kernel uses several memory
     Knuth (1973) is the classical starting point for a          allocation policies for its own memory requirements. It
study of contiguous memory management. He describes              implements buddy-system-like allocation for medium-
various techniques of memory allocation and efficient            size blocks and heap-based allocation for small block
data structures to keep track of free memory. Hoare              sizes. Russinovich and Solomon (2005) describes heap
and Mckeag (1971) surveys various memory manage-                 allocation and kernel memory allocation in Windows.
ment techniques. Randell (1969) is an early paper on the
motivation for virtual memory systems. Denning (1970)            1.  Beck, M., H. Bohme, M. Dziadzka, U. Kunitz,
describes the fundamentals of virtual memory systems.                R. Magnus, C. Schroter, and D. Verworner
     Vahalia (1996) describes the various kernel memory              (2002): Linux Kernel Programming, 3rd ed.,
allocators used in Unix systems. McKusick and Karels                 Pearson Education, New York.
(1988) describes the McKusick­Karels memory alloca-              2.  Bonwick, J. (1994): "The slab allocator: An
tor. Lee and Barkley (1989) describes the lazy buddy allo-           object-caching kernel memory allocator,"
cator. Both these allocators are used in Unix. Bonwick               Proceedings of the Summer 1994 Usenix Technical
(1994) and Bonwick and Adams (2001) describe the slab                Conference, 87­98.
allocator. Mauro and McDougall (2006) describes use              3.  Bonwick, J., and J. Adams (2001): "Extending the
of the slab allocator in Solaris, while Beck et al. (2002),          slab allocator to many CPUs and arbitrary



                                                             Chapter 11     Memory Management                 409
     resources," Proceedings of the 2001 USENIX              memory allocation," Proceedings of the Summer
     Annual Technical Conference, 15­34.                     1989 USENIX Technical Conference, 1­13.
4.   Bovet, D. P., and M. Cesati (2005): Understanding  11.  Mauro, J., and R. McDougall (2006): Solaris
     the Linux Kernel, 3rd ed., O'Reilly, Sebastopol,        Internals, 2nd ed., Prentice Hall, Englewood
     Calif.                                                  Cliffs, N. J.
5.   Denning, P. J. (1970): "Virtual Memory,"           12.  McKusick, M. K., and M. J. Karels (1988):
     Computing Surveys, 2 (3), 153­189.                      "Design of a general-purpose memory allocator
6.   Dhamdhere, D. M. (1999): Systems Programming            for the 4.3 BSD Unix kernel," Proceedings of the
     and Operating Systems, 2nd revised ed.,                 Summer 1988 USENIX Technical Conference,
     Tata McGraw-Hill, New Delhi.                            295­303.
7.   Hoare, C. A. R., and R. M. Mckeag (1971):          13.  Peterson, J. L., and T. A. Norman (1977): "Buddy
     "A survey of store management techniques," in           systems,"Communications of the ACM, 20 (6),
     Operating Systems Techniques, by C.A.R. Hoare           421­431.
     and R.H. Perrott (eds.) Academic Press, London.    14.  Randell, B.(1969): "A note on storage
8.   Knuth, D. E. (1973): The Art of Computer                fragmentation and program segmentation,"
     Programming, 2nd ed., Vol. I : Fundamental              Communications of the ACM, 12 (7),
     Algorithms, Addison-Wesley, Reading, Mass.              365­369.
9.   Kuck, D. J., and D. H. Lowrie (1970): "The use     15.  Russinovich, M. E., and D. A. Solomon (2005):
     and performance of memory hierarchies," in              Microsoft Windows Internals, 4th ed., Microsoft
     Software Engineering, 1, J.T. Tou (ed.), Academic       Press, Redmond, Wash.
     Press, New York.                                   16.  Vahalia, U. (1996): Unix Internals--The New
10.  Lee, T. P., and R. E. Barkley (1989):                   Frontiers, Prentice Hall, Englewood
     "A watermark-based lazy buddy system for kernel         Cliffs, N. J.
