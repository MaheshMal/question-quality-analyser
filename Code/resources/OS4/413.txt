Noncontiguous Memory Allocation
                   Modern computer architectures provide the noncontiguous memory allocation
                   model, in which a process can operate correctly even when portions of its address
                   space are distributed among many areas of memory. This model of memory
                   allocation permits the kernel to reuse free memory areas that are smaller than the
                   size of a process, so it can reduce external fragmentation. As we shall see later in
                   this section, noncontiguous memory allocation using paging can even eliminate
                   external fragmentation completely.
                      Example 11.9 illustrates noncontiguous memory allocation. We use the term
                   component for that portion of the process address space that is loaded in a single
                   memory area.
·
     Example 11.9  Noncontiguous Memory Allocation
                   In Figure 11.17(a), four free memory areas starting at addresses 100K, 300K,
                   450K, and 600K, where K = 1024, with sizes of 50 KB, 30 KB, 80 KB and 40
                   KB, respectively, are present in memory. Process P, which has a size of 140 KB,
                   is to be initiated [see Figure 11.17(b)]. If process P consists of three components
                   called P-1, P-2, and P-3, with sizes of 50 KB, 30 KB and 60 KB, respectively;
                   these components can be loaded into three of the free memory areas as follows
                   [see Figure 11.17(c)]:
                                          Process component     Size   Memory start address
                                           P-1                  50 KB         100K
                                           P-2                  30 KB         300K
                   ·                       P-3                  60 KB         450K
                             Memory                                                     Memory
                      100 K       Kernel                                          100K       Kernel
                                           50 KB                                                     P-1
                                  F                                                          F
                      300K                 30 KB                                  300K  307488       P-2
                      450K        C                             Process P         450K       C       P-3
                                           80 KB             0         xyz                           20 KB
                                  D                             51488                        D
                      600K                 40 KB  140K-1                          600K               40 KB
                      (a)                         (b)                             (c)
                   Figure  11.17  Noncontiguous memory allocation to process  P.



                                                                                Chapter 11  Memory Management  393
11.7.1 Logical Addresses, Physical Addresses,
         and Address Translation
In Section 1.1, we mentioned that the abstract view of a system is called its
logical view and the arrangement and relationship among its components is
called the logical organization. On the other hand, the real view of the system
is called its physical view and the arrangement depicted in it is called the physi-
cal organization. Accordingly, the views of process P shown in Figures 11.17(b)
and Figures 11.17(c) constitute the logical and physical views of process P of
Example 11.9, respectively.
A logical address is the address of an instruction or data byte as used in a
process; it may be obtained using index, base, or segment registers. The logical
addresses in a process constitute the logical address space of the process. A physical
address is the address in memory where an instruction or data byte exists. The set
of physical addresses in the system constitutes the physical address space of the
system.
                                                                                                                      ·
Logical and Physical Address Spaces                                                            Example         11.10
In Example 11.9, the logical address space of P extends from 0 to 140K-1,
while the physical address space extends from 0 to 640K-1. Data area xyz in
the program of process P has the address 51488 [see Figure 11.17(b)]. This is
the logical address of xyz. The process component P-1 in Figure 11.17 has a
size of 50 KB , i.e., 51200 bytes, so xyz is situated in component P-2 and has
the byte number 288. Since P-2 is loaded in the memory area with the start
address 300 KB, i.e., 307200 bytes, the physical address of xyz is 307488 [see
Figure 11.17(c)].
                                                                                            ·
The schematic diagram of Figure 11.18 shows how the CPU obtains the
physical address that corresponds to a logical address. The kernel stores infor-
mation about the memory areas allocated to process P in a table and makes
it available to the memory management unit (MMU). In Example 11.9, this
                                        Memory          Memory
                                                        allocation
                                        Kernel          information
                                        area            of P
                                  {                     Operand address
                                                        in current instruction
                  Memory
                  Management
                  Unit                                  Memory areas allocated
                                                        to process P
                  Memory address
                  where operand exists
Figure  11.18  A  schematic of address translation  in  noncontiguous memory allocation.



394  Part 3  Memory Management
             information would consist of the sizes and memory start addresses of P-1,
             P-2, and P-3. The CPU sends the logical address of each data or instruction used
             in the process to the MMU, and the MMU uses the memory allocation infor-
             mation stored in the table to compute the corresponding physical address. This
             address is called the effective memory address of the data or instruction. The pro-
             cedure of computing the effective memory address from a logical address is called
             address translation.
             A logical address used in an instruction consists of two parts--the id of the
             process component containing the address, and the id of the byte within the
             component. We represent each logical address by a pair of the form
                                   (compi, bytei)
             The memory management unit computes its effective memory address through
             the formula
             Effective memory address of (compi, bytei)
                                = start address of memory area allocated to compi
                                + byte number of bytei within compi                (11.1)
             In Examples 11.9 and 11.10, instructions of P would refer to the data area
             xyz through the logical address (P-2, 288). The MMU computes its effective
             memory address as 307,200 + 288 = 307,488.
             11.7.2 Approaches to Noncontiguous Memory Allocation
             There are two fundamental approaches to implementing noncontiguous memory
             allocation:
             · Paging
             · Segmentation
             In paging, each process consists of fixed-size components called pages. The
             size of a page is defined by the hardware of a computer, and demarcation of pages
             is implicit in it. The memory can accommodate an integral number of pages. It
             is partitioned into memory areas that have the same size as a page, and each of
             these memory areas is considered separately for allocation to a page. This way,
             any free memory area is exactly the same size as a page, so external fragmentation
             does not arise in the system. Internal fragmentation can arise because the last
             page of a process is allocated a page-size memory area even if it is smaller than a
             page in size.
             In segmentation, a programmer identifies components called segments in a
             process. A segment is a logical entity in a program, e.g., a set of functions, data
             structures, or objects. Segmentation facilitates sharing of code, data, and pro-
             gram modules between processes. However, segments have different sizes, so the
             kernel has to use memory reuse techniques such as first-fit or best-fit allocation.
             Consequently, external fragmentation can arise.
             A hybrid approach called segmentation with paging combines the features of
             both segmentation and paging. It facilitates sharing of code, data, and program



                                                               Chapter 11     Memory   Management  395
Table 11.4     Comparison of Contiguous and           Noncontiguous
Memory Allocation
Function           Contiguous allocation              Noncontiguous allocation
Memory             The kernel allocates a single      The kernel allocates
allocation         memory area to a process.          several memory areas to a
                                                      process--each memory
                                                      area holds one component
                                                      of the process.
Address            Address translation is not         Address translation is
translation        required.                          performed by the MMU
                                                      during program execution.
Memory             External fragmentation             In paging, external
fragmentation      arises if first-fit, best-fit, or  fragmentation does not
                   next-fit allocation is used.       occur but internal
                   Internal fragmentation             fragmentation can occur.
                   arises if memory allocation        In segmentation, external
                   is performed in blocks of a        fragmentation occurs, but
                   few standard sizes.                internal fragmentation
                                                      does not occur.
Swapping           Unless the computer system         Components of a
                   provides a relocation              swapped-in process can be
                   register, a swapped-in             placed anywhere in
                   process must be placed in its      memory.
                   originally allocated area.
modules between processes without incurring external fragmentation; however,
internal fragmentation occurs as in paging. We discuss features of these three
approaches in later sections.
Table 11.4 summarizes the advantages of noncontiguous memory allocation
over contiguous memory allocation. Swapping is more effective in noncontigu-
ous memory allocation because address translation enables the kernel to load
components of a swapped-in process in any parts of memory.
11.7.3 Memory Protection
Each memory area allocated to a program has to be protected against interference
from other programs. The MMU implements this function through a bounds
check. While performing address translation for a logical address (compi, bytei),
the MMU checks whether compi actually exists in the program and whether bytei
exists in compi. A protection violation interrupt is raised if either of these checks
fails. The bounds check can be simplified in paging--it is not necessary to check
whether bytei exists in compi because, as we shall see in the next section, a logical
address does not have enough bits in it to specify a value of bytei that exceeds the
page size.
