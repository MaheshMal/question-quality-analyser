Classes of Operating Systems
            Classes of operating systems have evolved over time as computer systems and
            users' expectations of them have developed; i.e., as computing environments have
            evolved. As we study some of the earlier classes of operating systems, we need
            to understand that each was designed to work with computer systems of its own
            historical period; thus we will have to look at architectural features representative
            of computer systems of the period.
                      Table 3.2 lists five fundamental classes of operating systems that are named
            according to their defining features. The table shows when operating systems of
            each class first came into widespread use; what fundamental effectiveness crite-
            rion, or prime concern, motivated its development; and what key concepts were
            developed to address that prime concern.
                      Computing hardware was expensive in the early days of computing, so
            the batch processing and multiprogramming operating systems focused on effi-
            cient use of the CPU and other resources in the computer system. Computing
            environments were noninteractive in this era. In the 1970s, computer hardware
            became cheaper, so efficient use of a computer was no longer the prime concern
            and the focus shifted to productivity of computer users. Interactive comput-
            ing environments were developed and time-sharing operating systems facilitated
            Table 3.2     Key  Features of  Classes of Operating Systems
            OS class           Period           Prime concern     Key concepts
            Batch processing   1960s            CPU idle time     Automate transition
                                                                  between jobs
            Multiprogramming   1960s            Resource          Program priorities,
                                                utilization       preemption
            Time-sharing       1970s            Good response     Time slice, round-robin
                                                time              scheduling
            Real time          1980s            Meeting time      Real-time scheduling
                                                constraints
            Distributed        1990s            Resource sharing  Distributed control,
                                                                  transparency



                                                        Chapter 3   Overview of Operating  Systems  55
better productivity by providing quick response to subrequests made to processes.
The 1980s saw emergence of real-time applications for controlling or tracking of
real-world activities, so operating systems had to focus on meeting the time con-
straints of such applications. In the 1990s, further declines in hardware costs led
to development of distributed systems, in which several computer systems, with
varying sophistication of resources, facilitated sharing of resources across their
boundaries through networking.
The following paragraphs elaborate on key concepts of the five classes of
operating systems mentioned in Table 3.2.
Batch Processing Systems  In a batch processing operating system, the prime
concern is CPU efficiency. The batch processing system operates in a strict one-
job-at-a-time manner; within a job, it executes the programs one after another.
Thus only one program is under execution at any time. The opportunity to
enhance CPU efficiency is limited to efficiently initiating the next program when
one program ends, and the next job when one job ends, so that the CPU does not
remain idle.
Multiprogramming Systems  A multiprogramming operating system focuses on
efficient use of both the CPU and I/O devices. The system has several programs
in a state of partial completion at any time. The OS uses program priorities and
gives the CPU to the highest-priority program that needs it. It switches the CPU
to a low-priority program when a high-priority program starts an I/O operation,
and switches it back to the high-priority program at the end of the I/O operation.
These actions achieve simultaneous use of I/O devices and the CPU.
Time-Sharing Systems      A time-sharing operating system focuses on facilitating
quick response to subrequests made by all processes, which provides a tangible
benefit to users. It is achieved by giving a fair execution opportunity to each
process through two means: The OS services all processes by turn, which is called
round-robin scheduling. It also prevents a process from using too much CPU time
when scheduled to execute, which is called time-slicing. The combination of these
two techniques ensures that no process has to wait long for CPU attention.
Real-Time     Systems  A  real-time  operating  system  is  used    to  implement     a
computer application for controlling or tracking of real-world activities. The
application needs to complete its computational tasks in a timely manner to keep
abreast of external events in the activity that it controls. To facilitate this, the
OS permits a user to create several processes within an application program, and
uses real-time scheduling to interleave the execution of processes such that the
application can complete its execution within its time constraint.
Distributed Systems    A distributed operating system permits a user to access
resources located in other computer systems conveniently and reliably. To enhance
convenience, it does not expect a user to know the location of resources in the
system, which is called transparency. To enhance efficiency, it may execute parts of
a computation in different computer systems at the same time. It uses distributed
control; i.e., it spreads its decision-making actions across different computers in
