What is a Deadlock?
A deadlock is a situation concerning a set of processes in which each process in
the set waits for an event that must be caused by another process in the set. Each
process is then waiting for an event that cannot occur. Example 8.1 illustrates
how a deadlock could arise when two processes try to share resources.
                                                                                              277



278  Part 2  Process Management
·
     Example 8.1  Two-Process Deadlock
                  A system contains one tape drive and         one  printer.  Two   processes  Pi       and
                  Pj  make   use  of  the    tape  drive  and  the  printer   through  the  following
                  programs:
                                      Process Pi                    Process Pj
                             Request tape drive;               Request printer;
                             Request printer;                  Request tape drive;
                             Use tape drive and printer;       Use tape drive and printer;
                             Release printer;                  Release tape drive;
                             Release tape drive;               Release printer;
                  As the two processes execute, resource requests take place in the following
                  order:
                     1. Process Pi requests the tape drive
                     2. Process Pj requests the printer
                     3. Process Pi requests the printer
                     4. Process Pj requests the tape drive
                  The first two resource requests are granted right away because the system
                  includes both a tape drive and a printer. Now, Pi holds the tape drive and Pj
                  holds the printer. When Pi asks for the printer, it is blocked until Pj releases the
                  printer. Similarly, Pj is blocked until Pi releases the tape drive. Both processes
                  are blocked indefinitely because they wait for each other.
                  ·
                      The deadlock illustrated in Example 8.1 is called a resource deadlock. Other
                  kinds of deadlock can also arise in an OS. A synchronization deadlock occurs when
                  the awaited events take the form of signals between processes. For example, if a
                  process Pi decides to perform an action ai only after process Pj performs action
                  aj , and process Pj decides to perform action aj only after Pi performs ai, both
                  processes get blocked until the other process sends it a signal (see Section 6.4).
                  Analogously, a communication deadlock occurs for a set of processes if each pro-
                  cess sends a message only after it receives a message from some other process in
                  the set (see Chapter 9). An OS is primarily concerned with resource deadlocks
                  because allocation of resources is an OS responsibility. The other two forms of
                  deadlock are seldom handled by an OS; it expects user processes to handle such
                  deadlocks themselves.
                      Formally, we say that a deadlock arises if the conditions in the following
                  definition are satisfied.
