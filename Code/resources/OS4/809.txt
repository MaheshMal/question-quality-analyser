Message Security
             Approaches to message security can be classified into link-oriented approaches and
             end-to-end approaches. In a link-oriented approach, security measures are applied
             at every link of a communication path. This approach tends to be expensive since
             its cost depends on the number of links over which a message travels. For example,
             if a message between process Pi located at node N1 and process Pj located at
             node N3 passes along the path N1-N2-N3, it has to incur security overhead for
             links N1-N2 and N2-N3. In the end-to-end approach, security measures can be
             employed selectively by nodes or processes in the system. This feature permits
             users to employ security measures with varying degrees of cost and sophistication.
             In the following discussion, we will assume that end-to-end measures are used.
             We describe three approaches to message security. They involve encryp-
             tion using public keys, private keys, and session keys, respectively. Table 21.2
             summarizes their features.
             Private Key Encryption         Private key encryption (also called secret key encryption)
             is the classical approach based on symmetric keys. Each process Pi has a private
             key Vi known to itself and to a few other processes in the system. A process
             sending a message to Pi must encrypt it by using Vi. On receiving a message, Pi
             decrypts it by using Vi. The main advantage of private key encryption is that the
             number of encryption keys in the system is limited to n, where n is the number of
             communicating entities in the system. Since all messages intended for process Pi
             are encrypted with the same key, Pi need not know the identity of the sender of
             a message in order to read the message.
             Private key encryption suffers from a few drawbacks. Each sender process
             needs to know the private key of Pi. Thus, many processes know the private key
             of a process, and an intruder may discover it as a result of somebody's negligence.
             The private key is exposed to intruder attacks over a long period of time, so
             chances of a successful attack on the private key increase with time; however, it is
             not possible to change the private key of a process because it is known to many
             other processes in the system.



                                                           Chapter 21        Distributed System  Security  789
Table 21.2   Encryption Techniques Used for Message Security
Technique              Description
Private key            Employs symmetric encryption. A process Pi has a unique
encryption             encryption key Vi called the private key. All messages sent
                       to Pi must be encrypted by using Vi. Process Pi decrypts
                       them by using Vi. The private key of a process is exposed to
                       intruder attacks over the entire lifetime of a process.
Public key encryption  Employs asymmetric encryption. A process Pi has a pair of
                       unique keys (Ui, Vi). Ui is the public key, which can be
                       made known to all processes in the system, whereas Vi is
                       the private key, which is kept secret. Messages to Pi are
                       encrypted by using Ui, but Pi decrypts them by using Vi.
                       The Rivest­Shamir­Adelman (RSA) algorithm is widely
                       used to generate the pair of keys for a process. The private
                       key of a process is not exposed to intruder attacks.
Session key            A pair of communicating processes (Pi, Pj ) is assigned a
encryption             session key SK ij when they begin a communication session.
                       The session key is used for symmetric encryption of all
                       messages exchanged during the session. The session key has
                       a smaller lifetime than a private or public key, so it suffers
                       less exposure to intruder attacks.
   User processes do not know each other's private keys, so private key encryp-
tion is not useful for security of interprocess messages in general. OS processes
know private keys of user processes, so they use private key encryption while
communicating with user processes. As discussed in Section 21.2.1, this feature
is used in the implementation of key distribution centers. User processes need to
use some other encryption scheme while communicating with one another.
Public Key Encryption  Each process Pi has a pair of keys (Ui, Vi). Ui is the
public key of Pi, which can be made known to all processes in the system. Vi is
the private key known only to process Pi. Ui and Vi are chosen such that
·  Vi cannot be guessed from Ui, and
·  For any message m
                            DVi (EUi (Pm)) = Pm         i                              (21.1)
   where Pm is the plaintext form of message m and E, D are the encryption and
decryption functions, respectively (see Section 15.4).
   When Pj wishes to send a message to Pi, it obtains Pi's public key from the
OS. Transmission of the message takes place as follows:
1. Process Pj encrypts the message with the public key of the destination process
   Pi, i.e., with Ui.
2. The encrypted message, i.e., EUi (Pm), is transmitted over the network and is
   received by process Pi.



790  Part 5  Distributed Operating Systems
             3. Process Pi decrypts the received message with its own private key, i.e., with
             Vi. Thus, it performs DVi (EUi (Pm)), which yields Pm.
             The Rivest­Shamir­Adelman (RSA) encryption algorithm is used to gen-
             erate pairs of keys (Ui, Vi) that satisfy Eq. (21.1). Let (u, v) be such a pair of
             keys. Given two numbers x and y, both smaller than a chosen integer number n,
             encryption and decryption using u and v, respectively, are performed as follows:
                                            Eu(x) = xu mod n
                                            Dv(y) = yv mod n
             To encrypt and decrypt a message m, the RSA algorithm is used as a block cipher
             with a block size s, which is chosen such that 2s < n, the chosen number. x is now
             the number formed by the bit string found in a block of Pm, the plaintext form
             of message m, and y is the number formed by the bit string in the corresponding
             block of Cm, the ciphertext form of message m. This way, x < 2s and y < 2s, so
             each of them is smaller than n, as required.
             The RSA algorithm chooses n as the product of two large prime numbers p
             and q. Typically, p and q are 100 digits each, which makes n a 200-digit number.
             Assuming u and v to be the public and private keys, to satisfy Eq. (21.1) v should
             be relatively prime to (p - 1) × (q - 1) [i.e., v and (p - 1) × (q - 1) should not
             have any common factors except 1], and u should satisfy the relation
                                            u × v mod [(p - 1) × (q - 1)] = 1
             Choice of u and v as the public and private keys implies that a standard value
             of n is used in the system. Alternatively, the pair (u, n) can be used as the public
             key and the pair (v, n) can be used as the private key of a process. It will permit
             different values of n to be used for different pairs of processes.
             An attack on the RSA cipher can succeed if n can be factored into p and q.
             However, it is estimated that factorization of a 200 digit number, which would be
             needed to break the cipher, would need 4 billion years on a computer that can
             perform 1 million operations per second.
             Public key encryption suffers from some drawbacks when compared with
             private key encryption. Keys used in public key encryption are approximately an
             order of magnitude larger in size than private keys. This is unavoidable since public
             keys have to be large to make factorization prohibitively expensive. The encryp-
             tion and decryption operations are also very expensive when compared with
             symmetric encryption; in many situations, these operations are up to 1000 times
             slower. Therefore it is not practical to use public key encryption for interprocess
             messages. Instead, it is used to securely communicate a session key to a pair of
             processes that intend to start a communication session. This aspect is discussed
             in the next section.
             Session Keys  Processes Pi and Pj obtain a session key, also called a conversation
             key, for one session of communication. This key is used for symmetric encryption
             during the session and is discarded at the end of the session. If the processes



                                                                  Chapter 21  Distributed System  Security  791
wish to enter into another session sometime in the future, they obtain a fresh
session key. This approach limits exposure of an encryption key to an intruder,
thereby reducing the risk of a successful attack on the cryptographic system.
21.2.1 Distribution of Encryption Keys
A process needs to know what encryption key to use while communicating with
another process. The OS contains an interactive service called a key distribution
center (KDC) to provide this information. Figure 21.3 shows a schematic of a key
distribution center. A process Pi makes a request to the KDC for an encryption
key to communicate with a process Pj. The KDC returns a key k. Pi uses this
key to encrypt a message m to be sent to process Pj. If processes use public keys
to communicate with one another, the KDC maintains a directory containing
public keys of all entities in the system. If processes use session keys, the KDC
does not posses a directory; it generates a new session key on demand.
An important issue in the KDC schematic is the protocol used for securely
passing the keys. When a public key is requested, it needs to be passed only to
the requester. When a session key is requested by a process Pi to communicate
with a process Pj , the key has to be passed to both Pi and Pj . However, Pj is
unaware that Pi is interested in setting up a session with it, so the KDC does
not send the session key directly to Pj. Instead, Pi can send the session key to Pj
along with its first message. These key transmission protocols are described in the
following.
Distribution of Public Keys  The following messages are exchanged between Pi,
the requesting process, and the KDC:
             1. Pi  KDC                   :       EUkdc (Pi , Pj )             (21.2)
             2. KDC  Pi                   :       EUi (Pj , Uj )
Pi sends its own id and Pj, the id of the intended destination process, to the KDC.
This message is encrypted with Ukdc, the public key of KDC. The KDC replies
by sending Uj, the public key of Pj, encrypted with the public key of Pi. Here, the
encryption is not used to protect confidentiality of Pj's key, because an intruder
can legitimately obtain this key by itself by making a request to the KDC; the
purpose of encryption is to prevent an intruder from tampering with messages
                                          KDC
                             Request key
                             (Pi, Pj)     Key k
                             Pi           Ek (m)  Pj
Figure 21.3  Key distribution center (KDC) in a distributed OS.



792  Part 5  Distributed Operating Systems
             between Pi and the KDC to perpetrate a denial-of-service attack. In the absence
             of encryption, an intruder could have tampered with Pi's message to the KDC
             and changed Pj to some Pk, so that Pi would not obtain Pj 's key, or the intruder
             could have tampered with the KDC's message to Pi and changed Pj's key that
             is being passed to Pi. When encryption is used, both the KDC and Pi would
             recognize tampered messages and discard them.
             Distribution of Session Keys          When Pi wishes to obtain a session key to com-
             municate with Pj, the session key should be made known to both Pi and Pj.
             Figure 21.4 illustrates how it is achieved in three steps. In the first step, Pi sends
             a request message containing its own id and the id of Pj to the KDC. The KDC
             allocates a session key SK i,j for the session between Pi and Pj and sends it to
             Pj . Its reply to Pj also contains an encrypted unit containing SK i,j , which can be
             decrypted only by Pj. Pi passes this encrypted unit to Pj in its first message, or in
             a special message intended for this purpose. Pj obtains SK i,j by decrypting this
             unit, and keeps it for use during the session with Pi.
             In a private key system, this exchange can be implemented as follows:
                          1. Pi  KDC            :        Pi, Pj
                          2. KDC  Pi            :        EVi (Pj , SK i,j , EVj (Pi, SK i,j ))
                          3. Pi  Pj             :        EVj (Pi, SK i,j ), ESKi,j (< message >)  (21.3)
             In the second step, the KDC sends a reply to Pi, which is encrypted with Pi's
             private key. The reply contains the session key SK i,j and EVj (Pi, SK i,j ), which
             is the session key encrypted by using Pj's private key. Pi decrypts the KDC's
             message with its own private key to obtain the session key SK i,j. Decryption
             also yields EVj (Pi, SK i,j ). Pi copies this unit in the first message it sends to Pj .
             When Pj decrypts this unit, it obtains SK i,j , which it uses to decrypt all messages
             from Pi.
             In a public key system, session keys need not be distributed by the KDC--a
             sender process can itself choose a session key. It merely has to communicate the
             session key securely to the destination process, which can be achieved through
             encryption by using the public key of the destination process. Thus a process Pi
                                                1                KDC
                                                Request
                                                session key      2
                                                                 Send
                                                   Pi          session key  Pj
                                                                 Pass
                                                               session key
                                                                 3
             Figure 21.4  Distribution      of  session keys.



                                                     Chapter 21   Distributed System     Security  793
can employ the following protocol to communicate a session key to process Pj:
          1. Pi  KDC  :  EUkdc (Pi , Pj )
          2. KDC  Pi  :  EUi (Pj , Uj )
          3. Pi  Pj   :  EUj (Pi, SK i,j ), ESKi,j (< message >)              (21.4)
The first two steps of this protocol are identical with the first two steps of protocol
(21.2); they provide Pi with the public key of Pj. Now, Pi itself generates a session
key SK i,j and passes the session key and its first message to Pj in Step 3.
21.2.2 Preventing Message Replay Attacks
In a message replay attack, an intruder simply copies messages passing over the
network and "plays them back" in the future. A replayed message may mislead its
recipient into taking wrong or duplicate actions which may affect data consistency
or reveal confidential information. For example, in a system using session keys,
an intruder could replay the message of Step 3 in Protocol (21.3) or Protocol
(21.4). When Pj receives the replayed message, it would be tricked into thinking
that Pi is communicating with it using the session key SK i,j . When process Pj
responds to this message, the intruder would replay the next copied message. In
this manner, it could replay an entire session.
   The recipient of a message can employ the challenge­response protocol to
check whether the message exchange is taking place in real time. Steps of the
challenge­response protocol are as follows:
·  Challenge: When a process Pj receives a message originated by a process Pi,
   it throws a challenge to Pi to prove that it is engaged in a message exchange
   with it in real time. The challenge is in the form of a message containing a
   challenge string, which is encrypted in such a manner that only process Pi
   can decrypt it.
·  Response: On receiving the challenge message, process Pi is expected to
   decrypt it, obtain the challenge string, transform it in a manner expected
   by Pj, encrypt the result so that only Pj can decrypt it, and send it back
   to Pj .
·  Detect: On receiving a reply message, process Pj decrypts the message and
   checks whether the decrypted contents match its expectations. A mismatch
   indicates that it is subject to a replay attack.
   A challenger could send a number as the challenge string, and expect a reply
that is the result of some simple tranformation of that number, like adding 1
to it; however, the challenger should use a different number in every challenge
so that a replay of an old conversation would not provide the expected reply.
Two choices of the challenge string are a random number or the current time
of the day. The actual value of a challenge string is immaterial, so it is called
a nonce.



794  Part 5  Distributed Operating Systems
             The challenge­response protocol should be used in every situation where a
             message replay attack would be meaningful. As an example, consider the distribu-
             tion of session keys through Protocol (21.3). An intruder could save the message
             of Step 3, and replay it sometime in the future to trick process Pj into starting
             a conversation with it using SK i,j. So, before using the session key obtained in
             Step 3, process Pj would use the challenge­response protocol to ensure that the
             conversation is taking place in real time:
                                            4. Pj  Pi     :  ESK i,j (n)
                                            5. Pi  Pj     :  ESKi,j (n + 1)
             Here n is a nonce. Pi is expected to obtain n through decryption, using the session
             key SK i,j , add 1 to it, encrypt the result by using SK i,j , and send it back to Pj . An
             intruder would not be able to perform these actions correctly, since it does not
             know SK i,j . In fact, Pi's ability to extract n from Pj 's message implicitly verifies
             its identity. This property is useful in mutual authentication discussed in the next
             session.
             21.2.3 Mutual Authentication
             To defeat masquerading attacks, processes involved in a communication session
             should validate each other's identity at the start of the session. Recall from the
             previous section that the challenge­response protocol implicitly verifies the iden-
             tity of the process that responds to a chellenge, so it can be employed for this
             purpose. Consider protocol (21.4), which is used to select session keys in a pub-
             lic key system. In Step 3, Pi sends the session key to Pj in a message that is
             encrypted by using the public key of Pj. In principle, any process could fabricate
             such a message and trick process Pj into thinking that it is engaging in a session
             with process Pi. So Pj must authenticate Pi before it engages in a session with it.
             Pj can achieve it as in the following protocol, whose first three steps are identical
             with protocol (21.4):
                                    1. Pi  KDC         :     EUkdc (Pi , Pj )
                                    2. KDC  Pi         :     EUi (Pj , Uj )
                                    3. Pi  Pj          :     EUj (Pi, SK i,j )
                                    4. Pj  Pi          :     EUi (Pj , n)
                                    5. Pi  Pj          :     EUj (n + 1)
                                    6. Pi  Pj          :     ESKi,j (<message>)
             In Step 4, Pj sends a nonce n encrypted with the public key of Pi. The identity of Pi
             is verified by its ability to decrypt this message, extract the nonce, and transform
             it in the expected manner. Note that in Step 4, Pj must not encrypt its message
             by using the session key SK i,j, as the intruder would be able to decrypt such a
             message if he had fabricated the message in Step 3!
