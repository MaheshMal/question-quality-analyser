Summary
A distributed control algorithm is an algorithm for     aware of its own local state, and interacts with
use in an OS, whose actions are performed in many       other nodes to convey state information. The cor-
nodes of the distributed system. An OS uses dis-        rectness of the algorithm depends on how state
tributed control algorithms so that it can avoid the    information is conveyed among nodes and how
overhead of collecting state information about all      decisions are made, while performance depends
entities in the system in one place, be responsive to   on the nature of the system model used by the
events occurring in its nodes, and provide reliable     algorithm.
operation in the presence of node and link faults. In   Mutual exclusion is performed by using either
this chapter, we discussed distributed control algo-    a fully connected logical model and timestamping
rithms for mutual exclusion, deadlock handling,         of requests, or a token to represent the privilege
scheduling, electing coordinators for functions and     to enter a critical section. The former incurs small
services, and detecting termination of a distributed    decision times, while the latter requires fewer mes-
computation.                                            sages. Distributed deadlock detection algorithms
    Parts of a distributed control algorithm exe-       use a logical model in which edges represent wait-
cuting in different nodes of a distributed system       for relationships between processes, and special
reach a decision by interacting among themselves        messages    are  sent  over  the  edges  for  deadlock
through interprocess messages. This method of           detection. Either a special algorithm called diffu-
operation may delay decisions; however, the algo-       sion computation is used to collect state informa-
rithm must make the correct decision eventually.        tion from all relevant processes, or presence of a
Since distributed algorithms do not have access         cycle is inferred when a sender process receives
to states of all relevant entities at the same time,    back its own deadlock detection message. Dis-
they must also ensure that they would not per-          tributed scheduling is performed by exchanging
form a wrong action. These two aspects of their         state information among nodes of the system to
correctness are called liveness and safety, respec-     decide whether processes should be transferred
tively. They have to be interpreted in the context      between   nodes  to    balance    the  execution   loads
of the function performed by a distributed con-         among nodes.
trol algorithm. For example, in mutual exclusion,       A  distributed         computation     terminates  only
liveness implies that the progress and bounded          when all its processes are idle and no messages are
wait conditions of Section 6.3.1 are satisfied, while   in transit between them. Distributed termination
safety implies that at most one process is in the       detection can be performed by using a diffusion
CS  at   any  time.   Performance   of  a  distributed  computation to check whether any process is active
control    algorithm  is  measured  in  terms  of  the  or any interprocess message is in transit. Alter-
number of messages exchanged by the algorithm,          natively, some known amount of credit can be
and the delay incurred until a required action is       distributed among processes and some of it can
performed.                                              be put on every interprocess message. Termination
    A distributed control algorithm uses a sys-         has occurred if the total credit with idle processes
tem model that is either a physical model of the        equals the amount of credit with which the sys-
system or a logical model in which nodes are pro-       tem started. Election algorithms use logical models
cesses and an edge indicates that two processes         and special messages to find the highest-priority
exchange messages. Each node in the model is            nonfailed process.



740         Part 5  Distributed Operating Systems
TEST  YOUR CONCEPTS                                                                                                    ·
18.1  Classify each of the following statements as true         a.  Which of the following properties of a critical
      or false:                                                     section implementation will ensure liveness
      a. The control part of a process never blocks.                of a distributed mutual exclusion algorithm
      b. The Ricart­Agrawala algorithm is deadlock-                 (refer to Table 6.1)?
      free if timestamps are distinct.                              i. The progress property
      c. In a token-based algorithm for mutual exclu-               ii. The bounded wait property
      sion, a requesting process sends its request to               iii. The    progress    and  bounded      wait
      every other process.                                             properties
      d. In a diffusion computation model, a process                iv. None of (i)­(iii).
      does not send a reply to a nonengaging query.             b.  A process Pi initiates a diffusion computa-
      e. A centralized deadlock detection algorithm                 tion by sending out queries. A process Pk in
      may detect phantom deadlocks.                                 the system
      f. A  sender-initiated  distributed     scheduling            i. Receives the query initiated by Pi exactly
      algorithm is unstable at high system loads.                      once.
      g. A distributed computation is said to have ter-             ii. May not receive the query even once.
      minated if all processes in the computation                   iii. Receives the query at least once, but may
      are in the passive state.                                        receive it several times
18.2  Select the appropriate alternative in each of the             iv. None of (i)­(iii).
      following questions:
EXERCISES                                                                                                              ·
18.1  State and compare the liveness properties of (a)          detection does not possess the liveness property
      a distributed mutual exclusion algorithm, and             if a killed process is given a new timestamp when
      (b) an election algorithm.                                it is reinitiated.
18.2  Step 2 of the Ricart­Agrawala algorithm is mod-     18.7  It is proposed to use an edge chasing dead-
      ified such that a process wishing to enter a CS           lock detection algorithm for deadlocks arising
      does not send a "go ahead" reply to any other             in interprocess communication. When a process
      process until it has used its CS. Prove that this         gets blocked on a "receive message" request,
      modified algorithm is not deadlock-free.                  a query is sent to the process from which it
18.3  Prove the safety property of Maekawa's algo-              expects the message. If that process is blocked
      rithm, which uses request sets of size    n.              on a "receive message" request, it forwards the
18.4  Construct an example where Raymond's algo-                query to the process for which it is waiting, and
      rithm does not exhibit FCFS behavior for entry            so on. A process declares a deadlock if it receives
      to a CS. (Hint: Consider the following situation          its own query. Comment on the suitability of this
      in Example 18.2: Process P2 makes a request for           algorithm for
      CS entry while P5 is still in CS.)                        a. Symmetric communication.
18.5  Identify the engaging and nonengaging queries             b. Asymmetric communication.
      in the Chandy­Lamport algorithm for consis-         18.8  If use of the inc function in the block rule is omit-
      tent state recording (Algorithm 17.2). Extend             ted from the Mitchell­Merritt algorithm, show
      the algorithm to collect the recorded state infor-        that the modified algorithm violates the liveness
      mation at the site of the node that initiated a           requirement.
      state recording.                                    18.9  Prove  correctness  of      the  credit  distribution-
18.6  Prove that a resource allocator using the wait-           based  distributed          termination  detection
      or-die and wound-or-wait scheme for deadlock              algorithm.



                                                              Chapter 18     Distributed Control Algorithms             741
18.10     A sender-initiated distributed scheduling algo-            d. The    sender   transfers   a  process      when    it
          rithm uses the following protocol to transfer a            receives a yes reply.
          process from one node to another:                          e. If it receives a no reply, it selects another node
          a. A sender polls all other nodes in the system            and repeats Steps 10(b)­10(e).
          in search of a receiver node.                              Does    this  protocol  avoid     instability  at  high
          b. It selects a node as the prospective receiver,          system loads?
          and sends it a "lock yourself for a process         18.11  Define the liveness and safety properties of a
          transfer" message.                                         distributed   scheduling  algorithm.    (Hint:     Will
          c. The recipient of the message sends a no reply           imbalances of computational load arise in a
          if it is no longer a receiver. Else it increases           system  if    its  scheduling  algorithm       possesses
          the length of its CPU queue by 1 and sends                 liveness and safety properties?)
          a yes reply.
BIBLIOGRAPHY                                                                                                                ·
Dijkstra and Scholten (1980) and Chang (1982) discuss         3.   Chandy, K. M., J. Misra, and L. M. Haas (1983):
the diffusion computation model of distributed algo-               "Distributed deadlock detection," ACM
rithms. Andrews (1991) discusses broadcast and token               Transactions on Computer Systems, 1 (2),
passing algorithms.                                                144­152.
    Raymond       (1989)  and  Ricart      and    Agrawala    4.   Chang, E. (1982): "Echo algorithms: depth
(1981) discuss distributed mutual exclusion algorithms.            parallel operations on general graphs," IEEE
Dhamdhere      and   Kulkarni  (1994)  discusses  a   fault-       Transactions on Software Engineering, 8 (4),
tolerant  mutual    exclusion  algorithm.    The  diffusion        391­401.
computation-based distributed deadlock detection algo-        5.   Dhamdhere, D. M., and S. S. Kulkarni (1994): "A
rithm (Algorithm 18.4) is adapted from Chandy et al.               token based k-resilient mutual exclusion
(1983). Knapp (1987) discusses several distributed dead-           algorithm for distributed systems," Information
lock detection algorithms. Sinha and Natarajan (1984)              Processing Letters, 50 (1994), 151­157.
discuss an edge chasing algorithm for distributed dead-       6.   Dhamdhere, D. M., S. R. Iyer, and E. K. K.
lock detection. Wu et al. (2002) describes a distributed           Reddy (1997): "Distributed termination detection
deadlock detection algorithm for the AND model.                    of dynamic systems," Parallel Computing, 22 (14),
    Distributed termination detection is discussed in              2025­2045.
Dijkstra  and  Scholten   (1980),  Mattern   (1989),  and     7.   Dijkstra, E. W., and C. S. Scholten (1980):
Dhamdhere et al. (1997). The bully algorithm for dis-              "Termination detection for diffusing computa-
tributed elections is discussed in Garcia-Molina (1982).           tions," Information Processing Letters, 11 (1).
Smith (1988) discusses process migration techniques.          8.   Garg, V. K. (2002): Elements of Distributed
    Singhal and Shivaratri (1994) and Lynch (1996)                 Computing, Wiley-IEEE, New York.
describe many distributed control algorithms in detail.       9.   Garcia-Molina, H. (1982): "Elections in
Tel (2000) and Garg (2002) discuss election and termi-             distributed computing systems," IEEE
nation detection algorithms. Attiya and Welch (2004)               Transactions on Computers, 31 (1).
discusses algorithms for the election problem.                10.  Knapp, E. (1987): "Deadlock detection in
                                                                   distributed databases," Computing Surveys,
1.  Andrews, G. R. (1991): "Paradigms for process                  19, (4), 303­328.
    interaction in distributed programs," Computing           11.  Lynch, N. (1996): Distributed Algorithms,
    Surveys, 23, 1, 49­40.                                         Morgan Kaufmann.
2.  Attiya, H. and J. Welch (2004): Distributed               12.  Mattern, F. (1989): "Global quiescence detection
    Computing: Fundamentals, Simulations and                       based on credit distribution and recovery,"
    Advanced Topics, John Wiley, New York.                         Information Processing Letters, 30 (4), 195­200.



742  Part 5  Distributed Operating Systems
13.  Mitchell, D. P., and M. J. Merritt (1982):       18.  Sinha, M. K., and N. Natarajan (1984):
     "A distributed algorithm for deadlock detection       "A priority based distributed deadlock detection
     and resolution," Proceedings of the ACM               algorithm," IEEE Transactions on Software
     Conference on Principles of Distributed               Engineering, 11 (1), 67­80.
     Computing, August 1984, 282­284.                 19.  Smith, J. M. (1988): "A survey of process
14.  Obermarck, R. (1982): "Distributed deadlock           migration mechanisms," Operating Systems
     detection algorithm," ACM Transactions on             Review, 22 (3), 28­40.
     Database Systems, 7 (2), 187­202.                20.  Tel, G. (2000): Introduction to Distributed
15.  Raymond, K. (1989): "A tree-based algorithm for       Algorithms, 2nd ed., Cambridge University Press,
     distributed mutual exclusion," ACM Transactions       Cambridge.
     on Computer Systems, 7, 61­77.                   21.  Wu, H., W. Chin, and J. Jaffer (2002):
16.  Ricart, G., and A. K. Agrawala (1981):                "An efficient distributed deadlock avoidance
     "An optimal algorithm for mutual exclusion in         algorithm for the AND model," IEEE
     computer networks," Communications of the             Transactions on Software Engineering,
     ACM, 24 (1), 9­17.                                    28, 1, 18­29.
17.  Singhal, M., and N. G. Shivaratri (1994):
     Advanced Concepts in Operating Systems,
     McGraw-Hill, New York.
