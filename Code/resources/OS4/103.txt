Structure of an Operating System
                 4.2.1 Policies and Mechanisms
                 In determining how an operating system is to perform one of its functions, the
                 OS designer needs to think at two distinct levels:
                    ·  Policy: A policy is the guiding principle under which the operating system
                       will perform the function.
                    ·  Mechanism: A mechanism is a specific action needed to implement a policy.
                       A policy decides what should be done, while a mechanism determines how
                 something should be done and actually does it. A policy is implemented as a
                 decision-making module that decides which mechanism modules to call under
                 what conditions. A mechanism is implemented as a module that performs a
                 specific action. The following example identifies policies and mechanisms in
                 round-robin scheduling.
·
    Example 4.1  Policies and Mechanisms in Round-Robin Scheduling
                 In scheduling, we would consider the round-robin technique (Section 3.6) to
                 be a policy. The following mechanisms would be needed to implement the
                 round-robin scheduling policy:
                    Maintain a queue of ready processes
                    Switch the CPU to execution of the selected process (this action is called
                    dispatching).
                 ·
                       The priority-based scheduling policy, which is used in multiprogramming
                 systems (see Section 3.5.1), would also require a mechanism for maintaining infor-
                 mation about ready processes; however, it would be different from the mechanism
                 used in round-robin scheduling because it would organize information according
                 to process priority. The dispatching mechanism, however, would be common to
                 all scheduling policies.
                       Apart  from  mechanisms     for  implementing  specific  process  or  resource
                 management policies, the OS also has mechanisms for performing housekeep-
                 ing actions. The context save action mentioned in Section 4.1 is implemented as
                 a mechanism.
                 4.2.2 Portability and Extensibility of Operating Systems
                 The design and implementation of operating systems involves huge financial
                 investments. To protect these investments, an operating system design should have
                 a lifetime of more than a decade. Since several changes will take place in com-
                 puter architecture, I/O device technology, and application environments during



                                                           Chapter 4  Structure of Operating  Systems  83
this time, it should be possible to adapt an OS to these changes. Two features are
important in this context--portability and extensibility.
   Porting is the act of adapting software for use in a new computer system.
Portability refers to the ease with which a software program can be ported--it is
inversely proportional to the porting effort. Extensibility refers to the ease with
which new functionalities can be added to a software system.
   Porting of an OS implies changing parts of its code that are architecture-
dependent so that the OS can work with new hardware. Some examples of
architecture-dependent data and instructions in an OS are:
·  An interrupt vector contains information that should be loaded in various
   fields of the PSW to switch the CPU to an interrupt servicing routine (see
   Section 2.2.5). This information is architecture-specific.
·  Information concerning memory protection and information to be pro-
   vided to the memory management unit (MMU) is architecture-specific (see
   Sections 2.2.2 and 2.2.3).
·  I/O instructions used to perform an I/O operation are architecture-specific.
The architecture-dependent part of an operating system's code is typically asso-
ciated with mechanisms rather than with policies. An OS would have high porta-
bility if its architecture-dependent code is small in size, and its complete code is
structured such that the porting effort is determined by the size of the architecture-
dependent code, rather than by the size of its complete code. Hence the issue
of OS portability is addressed by separating the architecture-dependent and
architecture-independent parts of an OS and providing well-defined interfaces
between the two parts.
   Extensibility of an OS is needed for two purposes: for incorporating new
hardware in a computer system--typically new I/O devices or network adapters--
and for providing new functionalities in response to new user expectations. Early
operating systems did not provide either kind of extensibility. Hence even addi-
tion of a new I/O device required modifications to the OS. Later operating systems
solved this problem by adding a functionality to the boot procedure. It would
check for hardware that was not present when the OS was last booted, and either
prompt the user to select appropriate software to handle the new hardware, typ-
ically a set of routines called a device driver that handled the new device, or itself
select such software. The new software was then loaded and integrated with the
kernel so that it would be invoked and used appropriately. Modern operating
systems go a step further by providing a plug-and-play capability, whereby new
hardware can be added even while an OS is in operation. The OS handles the
interrupt caused by addition of new hardware, selects the appropriate software,
and integrates it with the kernel.
   Lack of extensibility leads to difficulties in adapting an OS to new user
expectations. Several examples of such difficulties can be found in the history
of operating systems. In 1980s and 1990s, PC users desired a new feature for
setting up several sessions with an operating system at the same time. Several well-
known operating systems of that time, e.g., MS-DOS, had difficulties providing
