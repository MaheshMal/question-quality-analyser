Static and Dynamic Memory Allocation
Memory allocation is an aspect of a more general action in software opera-
tion known as binding. Two other actions related to a program--its linking and
loading--are also aspects of binding.
Any entity in a program, e.g., a function or a variable, has a set of attributes,
and each attribute has a value. Binding is the act of specifying the value of an
attribute. For example, a variable in a program has attributes such as name,
type, dimensionality, scope, and memory address. A name binding specifies the
variable's name and a type binding specifies its type. Memory binding is the act
of specifying the variable's memory address; it constitutes memory allocation for



366  Part 3  Memory Management
             the variable. Memory allocation to a process is the act of specifying memory
             addresses of its instructions and data.
             A binding for an attribute of an entity such as a function or a variable can be
             performed any time before the attribute is used. Different binding methods per-
             form the binding at different times. The exact time at which binding is performed
             may determine the efficiency and flexibility with which the entity can be used.
             Broadly speaking, we can differentiate between early binding and late binding.
             Late binding is useful in cases where the OS or run-time library may have more
             information about an entity at a later time, using which it may be able to perform
             a better quality binding. For example, it may be able to achieve more efficient use
             of resources such as memory. Early and late binding are represented by the two
             fundamental binding methods of static and dynamic binding, respectively.
             Definition 11.1 Static Binding   A binding performed before the execution of
             a program (or operation of a software system) is set in motion.
             Definition 11.2 Dynamic Binding          A binding performed during the execution
             of a program (or operation of a software system).
             Static memory allocation can be performed by a compiler, linker, or loader
             while a program is being readied for execution. Dynamic memory allocation is
             performed in a "lazy" manner during the execution of a program; memory is
             allocated to a function or a variable just before it is used for the first time.
             Static memory allocation to a process is possible only if sizes of its data
             structures are known before its execution begins. If sizes are not known, they
             have to be guessed; wrong estimates can lead to wastage of memory and lack
             of flexibility. For example, consider an array whose size is not known during
             compilation. Memory is wasted if we overestimate the array's size, whereas the
             process may not be able to operate correctly if we underestimate its size. Dynamic
             memory allocation can avoid both these problems by allocating a memory area
             whose size matches the actual size of the array, which would be known by
             the time the allocation is performed. It can even permit the array size to vary
             during operation of the process. However, dynamic memory allocation incurs
             the overhead of memory allocation actions performed during operation of a
             process.
             Operating systems choose static and dynamic memory allocation under dif-
             ferent circumstances to obtain the best combination of execution efficiency and
             memory efficiency. When sufficient information about memory requirements is
             available a priori, the kernel or the run-time library makes memory allocation
             decisions statically, which provides execution efficiency. When little information
             is available a priori, the memory allocation decisions are made dynamically, which
             incurs higher overhead but ensures efficient use of memory. In other situations,
             the available information is used to make some decisions concerning memory
             allocation statically, so that the overhead of dynamic memory allocation can be
