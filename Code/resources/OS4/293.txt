Summary
The scheduler of an OS decides which process                 long-term scheduler decides when a process should
should be serviced next by the CPU and for how               be admitted for servicing, whereas the medium-
long it should be serviced. Its decisions influence          term  scheduler   decides  when      a  process           should
both user service and system performance. In this            be swapped out to a disk and when it should
chapter, we discussed three techniques of process            be  reloaded  in  memory.       The  short-term           sched-
schedulers: priority-based scheduling, reordering of         uler selects one of the processes that is present in
requests, and variation of time slice; and studied           memory. The multilevel adaptive scheduling policy
how schedulers use them to provide a desired com-            assigns different values of time slice to processes
bination of user service and system performance.             with different priorities and varies a process's pri-
We also studied real-time scheduling.                        ority in accordance with its recent behavior to
     A nonpreemptive scheduling policy performs              provide a combination of good response time and
scheduling   only    when      the  process  being  ser-     low scheduling overhead. The fair share schedul-
viced by the CPU completes; the policy focuses               ing policy ensures that processes of an application
merely on reordering of requests to improve mean             collectively do not exceed a specified share of the
turnaround time of processes. The shortest request           CPU time.
next (SRN) policy suffers from starvation, as some               Real-time scheduling focuses on meeting the
processes may be delayed indefinitely. The highest           time constraints of applications. Deadline schedul-
response ratio next (HRN) policy does not have this          ing considers deadlines of processes while perform-
problem because the response ratio of a process              ing scheduling decisions. Rate monotonic schedul-
keeps increasing as it waits for the CPU.                    ing assigns priorities to processes based on their
     Preemptive scheduling policies preempt a pro-           periods and performs priority-based scheduling.
cess when it is considered desirable to make a fresh             Modern operating systems face diverse work-
scheduling decision. The round-robin (RR) policy             loads, so schedulers divide processes into different
services all processes by turn, limiting the amount          classes such as real-time and non-real-time, and use
of CPU time used by each process to the value of             an appropriate scheduling policy for each class.
the time slice. The least completed next (LCN) pol-              Performance analysis is used to both study and
icy selects the process that has received the least          tune performance of scheduling policies without
amount of service, whereas the shortest time to go           implementing them in an OS. It uses a mathemat-
(STG) policy selects the process that is closest to          ical characterization of the typical workload in a
completing.                                                  system to determine system throughput or values
     In  practice,   an  operating    system  uses    an     of key scheduler parameters such as the time slice
arrangement         involving  three  schedulers.   The      and sizes of scheduling lists.
TEST     YOUR CONCEPTS                                                                                                      ·
7.1      Classify each of the following statements as true         (SRN)       scheduling    policy          and  the  system
         or false:                                                 completes     execution    of     these        requests  in
         a. If the scheduling overhead is negligible, the          the     sequence     r1, r2, . . . , rn,  then  weighted
         schedule length is identical in batch process-            turnaround of ri > weighted turnaround of
         ing and multiprogramming systems.                         rj if i > j.
         b. If all requests arrive at the same time instant        c. The     round-robin    scheduling           policy  with
         in a system using the shortest request next               time-slicing  provides     approximately               equal



                                                                               Chapter 7         Scheduling            273
         response ratios to requests that arrive at the               j. If processes do not perform I/O, the Unix
         same time instant.                                           scheduling      policy     degenerates  to  the  RR
     d.  If processes do not perform I/O, the round-                  scheduling policy.
         robin  scheduling    policy       with   time-slicing   7.2  Processes A, B, and C arrive at times 0, 1, and
         resembles the least completed next (LCN)                     2, respectively. The processes do not perform
         scheduling policy.                                           I/O and require 5, 3, and 1 second of CPU
     e.  When   both     CPU-bound         and    I/O-bound           time. The process-switching time is negligible. At
         requests  are   present,     the  least  completed           what time does process B complete if the sched-
         next (LCN) scheduling policy provides bet-                   uler uses the shortest time to go (STG) policy.
         ter turnaround times for I/O-bound requests                  a. 8,    b. 4,      c. 5,    d. 9.
         than provided by the round-robin scheduling             7.3  Which of the following scheduling policies will
         policy with time-slicing.                                    provide the least turnaround time for an I/O-
     f.  The    highest  response     ratio      next  (HRN)          bound   process?    (Both  I/O-bound    and  CPU-
         scheduling policy avoids starvation.                         bound requests are present in the system.)
     g.  If a feasible schedule exists for a real-time                a. RR,
         application, use of the earliest deadline first              b. LCN,
         (EDF) scheduling policy guarantees that no                   c. multilevel adaptive scheduling,
         deadline overruns will occur.                                d. None of these.
     h.  An I/O-bound process is executed twice, once
         in a system using RR scheduling and again               7.4  Which of the following scheduling policies will
         in a system using multilevel adaptive schedul-               provide the least turnaround time for a CPU-
         ing. The number of times it is scheduled by the              bound   process?    (Both  I/O-bound    and  CPU-
         RR scheduler and by the multilevel scheduler                 bound requests are present in the system.)
         is identical.                                                a. RR,
     i.  A CPU-bound process cannot starve when                       b. LCN,
         multilevel adaptive scheduling is employed.                  c. multilevel adaptive scheduling.
EXERCISES                                                                                                                 ·
7.1  Give examples of conflicts between user-centric                  consumes 200 ms. Ten independent executions
     and system-centric views of scheduling.                          of this program are started at the same time. The
7.2  Study the performance of the nonpreemptive                       scheduling overhead of the kernel is 3 ms. Com-
     and preemptive scheduling policies on processes                  pute the response time of the first process in the
     described in Table 7.2 if their arrival times are 0,             first and subsequent iterations if
     1, 3, 7, and 10 seconds, respectively. Draw timing               a. The time slice is 50 ms.
     charts analogous to those in Sections 7.2 and 7.3                b. The time slice is 20 ms.
     to show operation of these policies.                        7.5  The kernel of an OS implements the HRN pol-
7.3  Show that SRN scheduling provides the min-                       icy preemptively as follows: Every t seconds,
     imum     average    turnaround        time   for   a  set        response ratios of all processes are computed
     of  requests       that  arrive  at   the    same     time       and the process with the highest response ratio
     instant. Would it provide the minimum average                    is scheduled. Comment on this policy for large
     turnaround time if requests arrive at different                  and small values of t. Also, compare it with the
     times?                                                           following policies
7.4  A program contains a single loop that executes                   a. Shortest time to go (STG) policy.
     50 times. The loop includes a computation that                   b. Least completed next (LCN) policy.
     lasts 50 ms followed by an I/O operation that                    c. Round-robin policy with time-slicing (RR).



274        Part 2       Process Management
7.6   A process consists of two parts that are function-               as  CPU-bound            or      I/O-bound     based   on      its
      ally independent of one another. It is proposed                  recent behavior vis-a-vis the time slice--it was
      to separate the two parts and create two pro-                    considered        to     be   a   CPU-bound          process   if
      cesses to service them. Identify those scheduling                it  used     up     its  entire   time-slice     when     sched-
      policies under which the user would receive bet-                 uled; otherwise, it was an I/O-bound process.
      ter user service through use of the two processes                To    obtain     good        throughput,    HASP       required
      instead of the original single process.                          that    a    fixed   percentage        of   processes  in      the
7.7   For each of the scheduling policies discussed                    scheduling queue must be I/O-bound processes.
      in Sections 7.2 and 7.3, a group of 20 requests                  Periodically, HASP adjusted the time slice to
      is serviced with negligible overheads and the                    satisfy    this     requirement--the           time  slice  was
      average      turnaround  time    is  determined.  The            reduced if more processes were considered I/O-
      requests are now organized arbitrarily into two                  bound      than     desired,      and  it   was     increased  if
      groups of 10 requests each. These groups of                      lesser     number        of   processes     were    I/O-bound.
      requests     are  now  serviced  one  after    another           Explain      the     purpose      of   adjusting     the    time
      through each of the scheduling policies used                     slice. Describe operation of HASP if most pro-
      earlier and the average turnaround time is com-                  cesses in the system were (a) CPU-bound and
      puted. Compare the two average turnaround                        (b) I/O-bound.
      times  for   each  scheduling        policy  and  men-     7.11  Comment          on      the  similarities     and   differences
      tion conditions under which the two could be                     between
      different.                                                       a. LCN and Unix scheduling
7.8   A multilevel adaptive scheduler uses five prior-                 b. HASP         and      multilevel    adaptive      scheduling
      ity levels numbered from 1 to 5, level 1 being the                   (see Exercise 7.10).
      highest priority level. The time slice for a prior-        7.12  Determine the starting deadlines for the pro-
      ity level is 0.1 × n, where n is the level number.               cesses of Example 7.11.
      It puts every process in level 1 initially. A pro-         7.13  An OS using a preemptive scheduling policy
      cess requiring 5 seconds of CPU time is serviced                 assigns dynamically changing priorities. The pri-
      through this scheduler. Compare the response                     ority    of  a   process      changes      at  different    rates
      time of the process and the total scheduling over-               depending on its state as follows
      head incurred if there are no other processes in
      the system. If the process is serviced through a                       Rate of change of priority when a
      round-robin scheduler using a time slice of 0.1                        process is running
      CPU seconds, what would be the response time                           Rate of change of priority when a
      of the process and the total scheduling overhead                       process is ready
      incurred?                                                              Rate of change of priority when a
7.9   A multilevel adaptive scheduling policy avoids                         process is performing I/O
      starvation by promoting a process to a higher                    Note that the rate of change of priority can be
      priority level if it has spent 3 seconds in its                  positive, negative, or zero. A process has prior-
      present priority level without getting scheduled.                ity 0 when it is created. A process with a larger
      Comment      on   the    advantages   and    disadvan-           numerical value of priority is considered to have
      tages of the following methods of implementing                   a higher priority for scheduling.
      promotion:                                                       Comment on properties of the scheduling poli-
      a. Promote a process to the highest priority                     cies in each of the following cases:
           level.                                                      a.  > 0,  = 0,  = 0.
      b. Promote a process to the next higher priority                 b.  = 0,  > 0,  = 0.
           level.                                                      c.  =  = 0,  > 0.
7.10  The    Houston     Automatic         Spooling  system            d.  < 0,  = 0,  = 0.
      (HASP) was a scheduling subsystem used in
      the  IBM/360.      HASP  assigned     high     priority          Will    the  behavior         of  the  scheduling      policies
      to   I/O-bound    processes    and   low     priority  to        change if the priority of a process is set to 0 every
      CPU-bound processes. A process was classified                    time it is scheduled?



                                                                                      Chapter 7       Scheduling            275
7.14  A background process should operate in such a               of T3 for which the rate monotonic schedul-
      manner that it does not significantly degrade the           ing policy will be able to meet deadlines of all
      service provided to other processes. Which of the           processes?
      following alternatives would you recommend for       7.18   A system uses the FCFS scheduling policy. Iden-
      implementing it?                                            tical computational requests arrive in the system
      a. Assign the lowest priority to a background               at the rate of 20 requests per second. It is desired
      process.                                                    that the mean wait time in the system should
      b. Provide   a  smaller  quantum   to  a  back-             not exceed 2.0 seconds. Compute the size of each
      ground process than to other processes (see                 request in CPU seconds.
      Section 7.4.8).                                      7.19   Identical requests, each requiring 0.05 CPU sec-
7.15  Prepare a schedule for operation of the periodic            onds, arrive in an OS at the rate of 10 requests per
      processes P1­P3 of Section 7.5.3, using EDF                 second. The kernel uses a fixed-size ready queue.
      scheduling.                                                 A new request is entered in the ready queue if
7.16  If the response requirement of the application              the queue is not already full, else the request is
      of Figure 7.13 is 30 seconds and service times              discarded. What should be the size of the ready
      of processes P2­P5 are as shown in Figure 7.13,             queue if less than 1 percent of requests should
      what is the largest service time of P1 for which            be discarded?
      a feasible schedule exists? Answer this question     7.20   The mean arrival rate of requests in a system
      under two conditions:                                       using FCFS scheduling is 5 requests per second.
      a. None of the processes perform any I/O oper-              The mean wait time for a request is 3 seconds.
      ations.                                                     Find the mean execution rate.
      b. Process P2 performs I/O for 3 seconds, 2 sec-     7.21   We define "small request" as a request whose
      onds of which can be overlapped with the                    service       time  is  less  than  5  percent  of  1  .  Com-
                                                                                                                      
      processing of process P3.                                   pute the turnaround time for a small request in
7.17  The service times of three processes P1, P2, and            a system using the HRN scheduling policy when
      P3 are 5 ms, 3 ms, and 10 ms, respectively; T1 =                 =  5 and           =  8.
      25 ms and T2 = 8 ms. What is the smallest value
BIBLIOGRAPHY                                                                                                                ·
Corbato et al. (1962) discusses use of multilevel feed-    Bovet  and     Cesati      (2005),    and  Love  (2005)       discuss
back queues in the CTSS operating system. Coffman          scheduling  in  Linux;         Mauro  and     McDougall          (2006)
and Denning (1973) reports studies related to multilevel   discusses scheduling in Solaris; while Russinovich and
scheduling. A fair share scheduler is described in Kay     Solomon (2005) discusses scheduling in Windows.
and Lauder (1988), and lottery scheduling is described         Trivedi (1982) is devoted to queuing theory. Heller-
in Waldspurger and Weihl (1994). Real-time scheduling      man and Conroy (1975) describes use of queuing theory
is discussed in Liu and Layland (1973), Zhao (1989),       in performance evaluation.
Khanna et al. (1992), and Liu (2000). Power conserva-
tion is a crucial new element in scheduling. Power can
be conserved by running the CPU at lower speeds. Zhu       1.     Bach, M. J. (1986): The Design of the Unix
et al. (2004) discusses speculative scheduling algorithms         Operating System, Prentice Hall, Englewood
that save power by varying the CPU speed and reducing             Cliffs, N.J.
the number of speed changes while ensuring that an         2.     Bovet, D. P., and M. Cesati (2005): Understanding
application meets its time constraints.                           the Linux Kernel, 3rd ed., O'Reilly, Sebastopol.
Bach (1986), McKusick et al. (1996), and Vahalia           3.     Brinch Hansen, P. (1972): Operating System
(1996) discuss scheduling in Unix; O'Gorman (2003),               Principles, Prentice Hall, Englewood Cliffs, N.J.



276          Part 2  Process Management
4.   Coffman, E. G., and R. C. Wood (1996):               13.  Mauro, J., and R. McDougall (2006): Solaris
     "Interarrival statistics for time sharing systems,"       Internals, 2nd ed., Prentice Hall, Englewood
     Communications of the ACM, 9 (7),                         Cliffs, N.J.
     500­503.                                             14.  McKusick, M. K., K. Bostic, M. J. Karels, and
5.   Coffman, E. G., and P. J. Denning (1973):                 J. S. Quarterman (1996): The Design and
     Operating Systems Theory, Prentice Hall,                  Implementation of the 4.4BSD Operating System,
     Englewood Cliffs, N.J.                                    Addison-Wesley, Reading, Mass.
6.   Corbato, F. J., M. Merwin-Daggett, and               15.  O'Gorman, J. (2003): Linux Process Manager:
     R. C. Daley (1962): "An experimental                      The Internals of Scheduling, Interrupts and
     time-sharing system," Proceedings of the                  Signals, John Wiley, New York.
     AFIPS Fall Joint Computer Conference,                16.  Russinovich, M. E., and D. A. Solomon (2005):
     335­344.                                                  Microsoft Windows Internals, 4th ed., Microsoft
7.   Hellerman, H., and T. F. Conroy (1975):                   Press, Redmond, Wash.
     Computer System Performance, McGraw-Hill             17.  Trivedi, K. S. (1982): Probability and Statistics
     Kogakusha, Tokyo.                                         with Reliability--Queuing and Computer Science
8.   Kay, J., and P. Lauder (1988): "A fair share              Applications, Prentice Hall, Englewood
     scheduler," Communications of the ACM, 31 (1),            Cliffs, N.J.
     44­55.                                               18.  Vahalia, U. (1996): Unix Internals: The New
9.   Khanna, S., M. Sebree, and J. Zolnowsky (1992):           Frontiers, Prentice Hall, Englewood Cliffs, N.J.
     "Real-time scheduling in SunOS 5.0," Proceedings     19.  Waldspurger, C. A., and W. E. Weihl (1994):
     of the Winter 1992 USENIX Conference,                     "Lottery scheduling," Proceedings of the First
     San Francisco, January 1992, 375­390.                     USENIX Symposium on Operating System Design
10.  Love, R. (2005): Linux Kernel Development,                and Implementation (OSDI), 1­11.
     2nd ed., Novell Press.                               20.  Zhao, W. (1989): Special issue on real-time
11.  Liu, C. L., and J. W. Layland (1973): "Scheduling         operating systems, Operating System Review,
     algorithms for multiprogramming in a hard                 23, 7.
     real-time environment," Journal of the ACM,          21.  Zhu, D., D. Mosse, and R. Melhem (2004):
     20, 1, 46­61.                                             "Power-aware scheduling for AND/OR graphs in
12.  Liu, J. W. S. (2000): Real-Time Systems, Pearson          real-time systems," IEEE Transactions on Parallel
     Education, New York.                                      and Distributed Systems, 15 (9), 849­864.
