Virtual Memory Basics
     Users always want more from a computer system--more resources and more
     services. The need for more resources is satisfied either by obtaining more effi-
     cient use of existing resources, or by creating an illusion that more resources exist
     in the system. A virtual memory is what its name indicates--it is an illusion of
410



                                                                       Chapter 12        Virtual Memory  411
a memory that is larger than the real memory, i.e., RAM, of the computer sys-
tem. As we pointed out in Section 1.1, this illusion is a part of a user's abstract
view of memory. A user or his application program sees only the virtual memory.
The kernel implements the illusion through a combination of hardware and soft-
ware means. We refer to real memory simply as memory. We refer to the software
component of virtual memory as a virtual memory manager.
The illusion of memory larger than the system's memory crops up any time a
process whose size exceeds the size of memory is initiated. The process is able to
operate because it is kept in its entirety on a disk and only its required portions are
loaded in memory at any time. The basis of virtual memory is the noncontiguous
memory allocation model described earlier in Section 11.7. The address space of
each process is assumed to consist of portions called components. The portions
can be loaded into nonadjacent areas of memory. The address of each operand or
instruction in the code of a process is a logical address of the form (compi, bytei).
The memory management unit (MMU) translates it into the address in memory
where the operand or instruction actually resides.
Use of the noncontiguous memory allocation model reduces memory frag-
mentation, since a free area of memory can be reused even if it is not large enough
to hold the entire address space of a process. More user processes can be accom-
modated in memory this way, which benefits both users and the OS. The kernel
carries this idea further--even processes that can fit in memory are not loaded
fully into memory. This strategy reduces the amount of memory that is allocated
to each process, thus further increasing the number of processes that can be in
operation at the same time.
Figure 12.1 shows a schematic diagram of a virtual memory. The logical
address space of the process shown consists of five components. Three of these
components are presently in memory. Information about the memory areas where
these components exist is maintained in a data structure of the virtual memory
manager. This information is used by the MMU during address translation. When
an instruction in the process refers to a data item or instruction that is not in
memory, the component containing it is loaded from the disk. Occasionally, the
virtual memory manager removes some components from memory to make room
for other components.
                                           Memory
              Process                                Loading/    Disk
                                                     removal of
                                                     components
              Logical        Memory
              address        allocation
              space          information   Physical
                                           address
                                           space
Figure  12.1  Overview of virtual memory.



412  Part 3  Memory Management
             The arrangement shown in Figure 12.1 is a memory hierarchy as discussed in
             Section 2.2.3 and illustrated in Figure 2.4. The hierarchy consists of the system's
             memory and a disk. Memory is fast, but small in size. The disk is slow, but has
             a much larger capacity. The MMU and the virtual memory manager together
             manage the memory hierarchy, so that the current instruction in a process finds
             its operands in memory.
             We are now ready to define virtual memory.
             Definition 12.1 Virtual Memory  A memory hierarchy, consisting of a com-
             puter system's memory and a disk, that enables a process to operate with only
             some portions of its address space in memory.
             Demand Loading of Process Components       The virtual memory manager loads
             only one component of a process address space in memory to begin with--the
             component that contains the start address of the process, that is, address of the
             instruction with which its execution begins. It loads other components of the pro-
             cess only when they are needed. This technique is called demand loading. To keep
             the memory commitment to a process low, the virtual memory manager removes
             components of the process from memory from time to time. These components
             would be loaded back in memory when needed again.
             Performance of a process in virtual memory depends on the rate at which
             its components have to be loaded into memory. The virtual memory manager
             exploits the law of locality of reference to achieve a low rate of loading of process
             components. We discuss this law in Section 12.2.1.1.
             Table 12.1         Comparison of Paging and Segmentation
             Issue                    Comparison
             Concept                  A page is a fixed-size portion of a process address space
                                      that is identified by the virtual memory hardware. A
                                      segment is a logical entity in a program, e.g., a
                                      function, a data structure, or an object. Segments are
                                      identified by the programmer.
             Size of components       All pages are of the same size. Segments may be of
                                      different sizes.
             External fragmentation   Not found in paging because memory is divided into
                                      page frames whose size equals the size of pages.
                                      It occurs in segmentation because a free area of
                                      memory may be too small to accommodate a segment.
             Internal fragmentation   Occurs in the last page of a process in paging. Does not
                                      occur in segmentation because a segment is allocated a
                                      memory area whose size equals the size of the segment.
             Sharing                  Sharing of pages is feasible subject to the constraints
                                      on sharing of code pages described later in
                                      Section 12.6. Sharing of segments is freely possible.
