Summary
A distributed file system (DFS) stores user files              The notion of transparency concerns the asso-
in several nodes of a distributed system, hence a          ciation between the path name of a file and location
process and a file being accessed by it may exist          of  the  file--whether  a     user  must  know   a  file's
in different nodes. This situation requires a dis-         location in order to access it and whether the sys-
tributed file system to use special techniques so          tem can change the location without affecting the
that  a  user  (1)  need  not  know  where  a  file    is  file's name. High transparency provides user con-
located, (2) can perform file processing even when         venience and also enables a DFS to reduce network
link and node failures occur in the system, and            traffic by moving a file to a node where it is accessed
(3) can process files efficiently. In this chapter we      very frequently. File sharing semantics represent
discussed how distributed file systems fulfill these       another aspect of user convenience. They specify
requirements.                                              whether the file updates made by a process would



782   Part 5     Distributed Operating Systems
be visible to other processes accessing the file con-      to find its location. The notion of a hint is used
currently. Three popular file sharing semantics are        to improve performance of a stateless file server.
as follows: In Unix semantics, file updates made           A hint is simply a part of DFS state; however, the
by a process are visible immediately to all other          server is designed in such a manner that it uses a
processes using the file. In session semantics, the        hint if one is available, but proceeds in a stateless
updates made by a process are visible to only some         manner if a hint is not available.
processes in the same node. In transaction seman-          Performance of a DFS is affected by network
tics, a complete file processing activity is treated       latencies when a process and the file processed by
as a single atomic transaction so that either all file     it exist in different nodes. A DFS uses the tech-
updates made during the activity are reflected in the      nique of file caching to improve its performance.
file or none of them are, and the updates made by a        It maintains a copy of a file's data in the node
file processing activity are visible to other processes    where the process exists, so that accesses to file
only after the activity completes.                         data are implemented locally in the node rather
     High availability of a file system requires that      than over the network. If processes located in dif-
a file processing activity in a process should not be      ferent nodes update the same file concurrently,
affected by a transient fault in the node holding          copies of the file would exist in caches in many
the file, which is called the server node. The DFS         nodes, so a process may not see the latest value
uses a stateless server design to provide high avail-      of the data that was updated by another process.
ability. The stateless server does not maintain any        This problem is overcome by using cache coher-
state information about an ongoing file processing         ence techniques, which prevent accesses to stale file
activity. Consequently, a crash of the server node         data. However, it causes network traffic for refresh-
does not disrupt the file processing activity--it can      ing stale copies of a file's data in caches, which
be resumed when the server's operation is restored.        reduces the benefit of file caching. Session seman-
However, the stateless design of the server implies        tics eliminate the cache coherence traffic because
that every time a file is accessed, the file server        updates made by a process are not visible outside
would have to access the directory entry of the file       its node.
TEST  YOUR CONCEPTS                                                                                                 ·
20.1  Classify each of the following statements as true    20.2  Select the appropriate alternative in each of the
      or false:                                                  following questions:
      a. Location independence in a distributed file             a. A distributed file system uses file caching to
      system provides user convenience.                               ensure good file access performance. Which
      b. The     session  semantics  use  multiple-image              file sharing semantics cause the least cache
      mutable files.                                                  validation overhead?
      c. Robustness of a file can be achieved through                 i. Session semantics
      disk mirroring.                                                 ii. Unix semantics
      d. File caching has exactly the same effect as                  iii. Transaction semantics.
      file migration, i.e., movement of files among              b. File replication improves
      nodes in the system.                                            i. Robustness of a file system
      e. Directory caching improves file access perfor-               ii. Recoverability of a file system
      mance in a distributed file system.                             iii. Availability of a file system
      f. Faults that occur in a file server during a file             iv. None of (i)­(iii).
      processing activity can be tolerated by using
      a stateless file server.



                                                                    Chapter 20  Distributed File Systems               783
EXERCISES                                                                                                                     ·
20.1    Discuss how session semantics can be imple-                 stateful file server design, (b) a stateless file server
        mented.                                                     design.
20.2    Should a DFS maintain file buffers at a server        20.6  What are the benefits and limitations of spawn-
        node or at a client node? What is the influence of          ing  multiple   threads   in  a  file  server  to  han-
        this decision on Unix file sharing semantics (see           dle file processing activities of different clients?
        Section 13.10) and session semantics?                       Describe the synchronization requirements of
20.3    Justify the following statement: "File caching              these threads.
        integrates well with session semantics, but not       20.7  Discuss important issues to be handled during
        so with Unix semantics."                                    recovery of a failed node in a system that uses
20.4    Discuss the various techniques discussed in this            file replication to provide availability.
        chapter and in Chapters 13 and 19 that can be         20.8  Discuss how locking can be used to reduce cache
        used to ensure robustness of a file.                        validation overhead and enhance scalability of a
20.5    Discuss how a client should protect itself against          distributed file system.
        failures in a distributed file system using (a) a
BIBLIOGRAPHY                                                                                                                  ·
Svobodova (1986) and Levy and Silberschatz (1990)             files. Schmuck and Haskin (2002) discusses use of shared
are survey papers on distributed file systems. Comer          disks in a parallel file system and describes distributed
and Peterson (1986) discusses concepts in naming and          synchronization and fault tolerance techniques.
discusses name resolution mechanisms in many systems.
Lampson (1983) and Terry (1987) discuss use of                1.  Braam, P. J., and P. A. Nelson (1999): "Removing
hints to improve performance of a distributed file system.        bottlenecks in distributed file systems: Coda and
Makaroff and Eager (1990) discusses effect of cache sizes         InterMezzo as examples," Proceedings of Linux
on file system performance.                                       Expo, 1999.
Brownbridge et al. (1982) discusses the Unix United           2.  Brownbridge, D. R., L. F. Marshall, and
system, which is an early network file system. Sandberg           B. Randell (1982): "The Newcastle Connection
(1987)  and  Callaghan  (2000)    discuss     the  Sun  NFS.      or UNIXes of the World Unite!,"
Satyanarayanan (1990) discusses the Andrew distributed            Software--Practice and Experience, 12 (12),
file system, while Kistler and Satyanarayanan (1992)              1147­1162.
describes  the  Coda  file   system.  Braam   and  Nelson     3.  Callaghan, B. (2000): NFS Illustrated,
(1999) discusses the performance bottlenecks in Coda              Addison-Wesley, Reading, Mass.
and Intermezzo, which is a sequel to Coda that incor-         4.  Carns, P. H., W. B. Ligon III, R. B. Ross, and
porates journaling. Russinovich and Solomon (2005)                R. Thakur (2000): "PVFS: A parallel file system
discusses data replication and data distribution features         for Linux Clusters," 2000 Extreme Linux
of the Windows file system.                                       Workshop.
Application processes running in different nodes              5.  Comer, D., and L. L. Peterson (1986): "A model
of a cluster of computer systems may make parallel                of name resolution in distributed mechanisms,"
accesses to files. Thekkath et al. (1997) discusses a scal-       Proceedings of the 6th International Conference on
able distributed file system for clusters of computer             Distributed Computing Systems, 509­514.
systems. Preslan et al. (2000) describes fault tolerance      6.  Ghemawat, S., H. Gobioff, and S. T. Leung
in a cluster file system through journaling. Carns et al.         (2003): "The Google file system," Proceedings of
(2000) discusses a parallel file system that provides high        the 19th ACM Symposium on Operating System
bandwidth for parallel file accesses to data in shared            Principles, 29­43.



784          Part 5  Distributed Operating Systems
7.   Gray, C. G., and D. R. Cheriton (1989): "Leases:          journaling in a Linux shared disk file system,"
     an efficient fault-tolerant mechanism for                 Proceedings of the 7th IEEE Symposium on Mass
     distributed file cache consistency," Proceedings of       Storage Systems, 351­378.
     the 12th ACM Symposium on Operating Systems          14.  Russinovich, M. E., and D. A. Solomon (2005):
     Principles, 202­210.                                      Microsoft Windows Internals, 4th ed., Microsoft
8.   Kistler, J. J., and M. Satyanarayanan (1992):             Press, Redmond, Wash.
     "Disconnected operation in the Coda file             15.  Sandberg, R. (1987): The Sun Network File
     system," ACM Transactions on Computer                     System: Design, Implementation, and experience,
     Systems, 10, 1, 3­25.                                     Sun Microsystems, Mountain View, Calif.
9.   Lampson, B. W. (1983): "Hints for computer           16.  Satyanarayanan, M. (1990): "Scalable, secure,
     system designers," Proceedings of the 9th                 and highly available distributed file access,"
     Symposium of Operating Systems Principles,                Computer, 23 (5), 9­21.
     33­48.                                               17.  Schmuck, F., and R. Haskin (2002): "GPFS: A
10.  Levy, E., and A. Silberschatz (1990): "Distributed        shared-disk file system for large computing
     File Systems: Concepts and Examples,"                     clusters," Proceedings of the First USENIX
     Computing Surveys, 22 (4), 321­374.                       Conference on File and Storage Technologies,
11.  Melamed, A. S. (1987): "Performance analysis of           231­244.
     Unix-based network file systems," IEEE Micro,        18.  Svobodova, L. (1986): "File servers for
     25­38.                                                    network-based distributed systems," Computing
12.  Makaroff, D. J., and D. L. Eager (1990): "Disk            Surveys, 16 (4), 353­398.
     cache performance for distributed systems,"          19.  Terry, D. B. (1987): "Caching hints in distributed
     Proceedings of the 10th International Conference          systems," IEEE Transactions on Software
     on Distributed Computing Systems, 212­219.                Engineering, 13 (1), 48­54.
13.  Preslan, K. W., A. P. Barry, J. Brassow,             20.  Thekkath, C. A., T. Mann, and E. K. Lee (1997):
     R. Cattelan, A. Manthei, E. Nygaard, S. V. Oort,          "Frangipani: A scalable DFS," Proceedings of the
     D. Teigland, M Tilstra, M. O'Keefe, G. Erickson,          16th ACM symposium on Operating System
     and M. Agarwal (2000): "Implementing                      Principles, 224­237.
