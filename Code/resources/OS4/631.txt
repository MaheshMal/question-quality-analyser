Security attacks
             Attempts to breach the security of a system are called security attacks, and the
             person or the program making the attack is called an adversary or intruder. Two
             common forms of security attacks are:
             ·  Masquerading: Assuming the identity of a registered user of the system
                through illegitimate means.
             ·  Denial of service: Preventing registered users of the system from accessing
                resources for which they possess access privileges.
                In a successful masquerading attack, the intruder gains access to resources
             that the impersonated user is authorized to access, hence he can corrupt or destroy
             programs and data belonging to the impersonated user at will. The obvious way to
             launch a masquerading attack is to crack a user's password and use this knowledge
             to pass the authentication test at log in time. Another approach is to perform
             masquerading in a more subtle manner through programs that are imported into
             a software environment. We discuss this approach in Section 15.2.1.
                A denial-of-service attack, also called a DoS attack, is launched by exploiting
             some vulnerability in the design or operation of an OS. A DoS attack can be
             launched through several means; some of these means can be employed only by
             users of a system, while others may be employed by intruders located in other
             systems. Many of these means are legitimate, which makes it easy to launch DoS
             attacks and hard for an OS to detect and prevent them. For example, a DoS
             attack can be launched by overloading a resource through phantom means to
             such an extent that genuine users of the resource are denied its use. If the kernel
             of an OS limits the total number of processes that can be created in order to
             control pressure on kernel data structures, a user may create a large number of
             processes so that no other users can create processes. Use of network sockets
             may be similarly denied by opening a large number of sockets. A DoS attack
             can also be launched by corrupting a program that offers some service, or by
             destroying some configuration information within the kernel, e.g., use of an I/O



                                                              Chapter 15         Security and Protection  611
device can be denied by changing its entry in the physical device table of the kernel
(see Section 14.5.2).
A network DoS attack may be launched by flooding the network with mes-
sages intended for a particular server so that network bandwidth is denied to
genuine messages, and the server is so busy receiving messages that it cannot get
around to responding to any messages. A distributed DoS attack is one that is
launched by a few intruders located in different hosts in the network; it is even
harder to detect and prevent than a nondistributed one.
Many other security attacks are launched through the message commu-
nication  system.  Reading  of  messages  without         authorization,  which  is      also
called eavesdropping, and tampering with messages are two such attacks. These
attacks primarily occur in distributed operating systems, so we discuss them in
Chapter 21.
15.2.1 Trojan Horses, Viruses, and Worms
Trojan horses, viruses, and worms are programs that contain some code that can
launch a security attack when activated. Table 15.4 summarizes their charac-
teristics. A Trojan horse or a virus enters a system when an unsuspecting user
downloads programs over the Internet or from a disk. On the contrary, a worm
existing in one computer system spreads to other computer systems by itself.
A Trojan horse is a program that has a hidden component that is designed
to cause havoc in a computer system. For example, it can erase a hard disk in the
computer, which is a violation of integrity; collect information for masquerading;
or force a system to crash or slow down, which amounts to denial of service. A
typical example of a Trojan horse is a spoof login program, which provides a fake
login prompt to trick a user into revealing his password, which can be used later
for masquerading. Since a Trojan horse is loaded explicitly by an unsuspecting
user, it is not difficult to track its authorship or origin.
Table 15.4    Security Threats through Trojan Horses,
Viruses, and Worms
Threat                 Description
Trojan horse           A program that performs a legitimate function that is known
                       to an OS or its users, and also has a hidden component that
                       can be used later for nefarious purposes like attacks on
                       message security or masquerading.
Virus                  A piece of code that can attach itself to other programs in the
                       computer system and spread to other computer systems when
                       programs are copied or transferred.
Worm                   A program that spreads to other computer systems by
                       exploiting security holes in an OS like weaknesses in facilities
                       for creation of remote processes.



612  Part 4  File Systems and I/O Management
             A virus is a piece of code that infects other programs and spreads to other
             systems when the infected programs are copied or transferred. A virus called an
             executable virus or file virus causes infection as follows: The virus inspects the
             disk, selects a program for infection, and adds its own code, which we will call the
             viral code, to the program's code. It also modifies the program's code such that
             the viral code is activated when the program is executed. A simple way to achieve
             it is to modify the first instruction in the program's code, i.e., the instruction
             whose address is the execution start address of the program (see Section 11.3), to
             transfer control to the viral code. When the viral code gets activated, it inspects
             the disk looking for other programs to infect. After infecting these programs,
             it passes control to the genuine code of the program. Since the infection step
             does not consume much CPU time and the infected program's functioning is not
             affected, a user has no way of knowing whether a program has been infected. The
             way a virus attaches itself to another program makes it far more difficult to track
             than a Trojan horse.
             A virus typically sets up a back door that can be exploited for a destructive
             purpose at a later date. For example, it may set up a daemon that remains dormant
             until it is activated by a trigger, which could be a specific date, time, or message,
             and performs some destructive acts when activated. Different categories of viruses
             infect and replicate differently. Apart from the file virus described above, a boot-
             sector virus plants itself in the boot sector of a hard or floppy disk. Such a virus
             gets an opportunity to execute when the system is booted, and gets an opportunity
             to replicate when a new bootable disk is made.
             Executable and boot-sector viruses thrived when programs were loaded
             through floppies. Use of CDs that cannot be modified has curtailed their men-
             ace. However, newer viruses have switched to more sophisticated techniques to
             breach a computer's defenses. An e-mail virus enters a computer system through
             an e-mail and sends spurious mails to users whose e-mail ids can be found in
             an address book. The Melissa virus of 1999 used a viral code that was a Word
             document posted on an Internet newsgroup. The virus was triggered when a user
             opened a downloaded copy of the Word document, and it sent the document
             itself to 50 persons whose e-mail id's were found in the user's address book.
             The back door in this case was a tiny code fragment that was associated with
             the Word document using the language called Visual Basic Application (VBA).
             It was triggered by the autoexecute feature of Microsoft Word, which automati-
             cally executes the program associated with a Word document when the document
             is opened. The I LOVE YOU virus of year 2000 was an e-mail virus that attached
             viral code as an attachment in an e-mail. This code executed when some user
             double-clicked on the attachment. It sent e-mails containing its own copies to
             several others and then corrupted files on the disk of the host where it executed.
             Both Melissa and I LOVE YOU viruses were so powerful that they forced large
             corporations to completely shut off their e-mail servers until the viruses could be
             contained.
             Viruses use various techniques to escape detection by antivirus software.
             These techniques include changing their form, compressing or encrypting their
             code and data, hiding themselves in parts of the OS, etc.



                                                               Chapter 15  Security and Protection  613
   A worm is a program that replicates itself in other computer systems by
exploiting holes in their security setup. It is more difficult to track than a virus
because of its self-replicating nature. Worms are known to replicate at unimag-
inably high rates, thus loading the network and consuming CPU time during
replication. The Code Red worm of 2001 spread to a quarter of a million hosts
in 9 hours, using a buffer overflow attack. The Morris worm of 1988 spread to
thousands of hosts through three weaknesses in the Unix system:
·  The Unix remote login facility rsh enabled a user to set up an arrangement
   through which he could log into a remote host without having to supply a
   password. The worm searched for files that stored names of remote hosts that
   could be accessed through rsh and used these files to move to remote hosts.
·  The buffer overflow technique, described later in Section 15.2.2, forces a dae-
   mon on an unprotected server to accept and execute a piece of code. The
   Morris worm used this attack on the finger daemon of a remote Unix host
   to send its own code to the remote host and achieve its execution on that host.
·  It used the debug facility in the sendmail program of Unix to mail a copy
   of its code to another host and execute it there.
   The security attacks launched through Trojan horses, viruses, or worms can
be foiled through the following measures:
·  Exercising caution while loading new programs into a computer
·  Using antivirus programs
·  Plugging security holes as they are discovered or reported
   Loading programs from original disks on which they are supplied by a vendor
can eliminate a primary source of Trojan horses or viruses. This approach is
particularly effective with the compact disk (CD) technology. Since such disks
cannot be modified, a genuine program cannot be replaced by a Trojan horse, or
a vendor-supplied disk cannot be infected by a virus.
   Antivirus programs analyze each program on a disk to see if it contains any
features analogous to any of the known viruses. The fundamental feature it looks
for is whether the execution start address of the program has been modified or
whether the first few bytes of a program perform actions resembling replication,
e.g., whether they attach code to any programs on a disk.
   OS vendors post information about security vulnerabilities of their operating
systems on their websites periodically and provide security patches that seal these
loopholes. A system administrator should check such postings and apply security
patches regularly. It would foil security attacks launched through worms.
15.2.2 The Buffer Overflow Technique
The buffer overflow technique can be employed to force a server program to
execute an intruder-supplied code to breach the host computer system's security.
It has been used to a devastating effect in mail servers and other Web servers.
The basic idea in this technique is simple: Most systems contain a fundamental
vulnerability--some programs do not validate the lengths of inputs they receive



614  Part 4  File Systems and I/O Management
             from users or other programs. Because of this vulnerability, a buffer area in which
             such input is received may overflow and overwrite contents of adjoining areas of
             memory. On hardware platforms that use stacks that grow downward in memory,
             e.g., the Intel 80x86 architecture, such overflows provide an opportunity to execute
             a piece of code that is disguised as data put in the buffer. This code could launch
             a variety of security attacks.
             Figure 15.2 illustrates how an intruder can launch a security attack through
             the buffer overflow technique. A Web server is in operation. When one of its
                                                       Top of
                                                       stack      Other local data
                                                  Start address   of sample
                                                  of beta         Variable beta
                                                  End address     (400 bytes)           412 bytes
                                                  of beta         Parameters            copied into
                                                                  (8 bytes)             beta occupy
                                                                  Return address        this area
                     Top of                                       (4 bytes)
                     stack      Local data of                     Local data of
                                calling function                  calling function
                     Direction                         Direction
                     of growth                         of growth
                                Stack before function             Stack after function
                                sample is called                  sample is called
             How a buffer overflow can be used to launch a security attack
             1.      The stack grows downward, i.e., toward smaller addresses in memory.
                     It looks as shown on the left before the currently executing function
                     calls function sample.
             2.      The code of the calling function pushes a return address and two
                     parameters of sample onto the stack. Each of these occupies four
                     bytes.
             3.      The code of sample allocates the variable beta and other variables
                     on the stack. The stack now looks as shown on the right. Notice that
                     the start address of beta is at the low end of the memory allocated to
                     it. The end address of beta adjoins the last byte of the parameters.
             4.      The function sample copies 412 bytes into the variable beta. The
                     first 408 bytes contain code whose execution would cause a security
                     violation. Bytes 409­412 contain the start address of this code. These
                     four bytes overwrite the return address in the stack.
             5.      The function sample executes a return statement. Control is trans-
                     ferred to the address found in the stack entry that is expected to contain
                     the return address. Effectively, the code in variable beta is invoked.
                     It executes with the privileges of the calling function.
             Figure  15.2  Launching a security attack through the buffer overflow technique.
