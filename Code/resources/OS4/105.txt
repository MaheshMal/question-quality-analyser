Operating Systems with Monolithic Structure
            An OS is a complex software that has a large number of functionalities and may
            contain millions of instructions. It is designed to consist of a set of software
            modules, where each module has a well-defined interface that must be used to
            access any of its functions or data. Such a design has the property that a mod-
            ule cannot "see" inner details of functioning of other modules. This property
            simplifies design, coding and testing of an OS.
                      Early operating systems had a monolithic structure, whereby the OS formed
            a single software layer between the user and the bare machine, i.e., the computer
            system's hardware (see Figure 4.2). The user interface was provided by a com-
            mand interpreter. The command interpreter organized creation of user processes.
            Both the command interpreter and user processes invoked OS functionalities and
            services through system calls.
                      Two kinds of problems with the monolithic structure were realized over a
            period of time. The sole OS layer had an interface with the bare machine. Hence
            architecture-dependent code was spread throughout the OS, and so there was
            poor portability. It also made testing and debugging difficult, leading to high
            costs of maintenance and enhancement. These problems led to the search for
            alternative ways to structure an OS. In the following sections we discuss three
            methods of structuring an OS that have been implemented as solutions to these
            problems.
            ·         Layered structure: The layered structure attacks the complexity and cost of
                      developing and maintaining an OS by structuring it into a number of layers
                      (see Section 4.4). The THE multiprogramming system of the 1960s is a well-
                      known example of a layered OS.
            ·         Kernel-based  structure:  The   kernel-based  structure  confines  architecture
                      dependence to a small section of the OS code that constitutes the kernel (see
                      Section 4.6), so that portability is increased. The Unix OS has a kernel-based
                      structure.
                                                User                User
                                        interface                   process
                                                      OS layer
                                                      Bare machine
            Figure 4.2  Monolithic OS.
