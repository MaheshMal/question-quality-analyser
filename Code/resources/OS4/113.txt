Kernel-Based Operating Systems
            Figure 4.6 is an abstract view of a kernel-based OS. The kernel is the core of the OS;
            it provides a set of functions and services to support various OS functionalities.
            The rest of the OS is organized as a set of nonkernel routines, which implement
            operations on processes and resources that are of interest to users, and a user
                                              User interface
                                              Nonkernel routines
                                                              Kernel
                                              Bare machine
            Figure 4.6  Structure    of  a  kernel-based OS.



                         Chapter 4                                 Structure of Operating  Systems  93
interface. Recall from Section 4.1 and Figure 4.1 that the operation of the kernel
is interrupt-driven. The kernel gets control when an interrupt such as a timer
interrupt or an I/O completion interrupt notifies occurrence of an event to it, or
when the software-interrupt instruction is executed to make a system call. When
the interrupt occurs, an interrupt servicing routine performs the context save
function and invokes an appropriate event handler, which is a nonkernel routine
of the OS.
A system call may be made by the user interface to implement a user
command, by a process to invoke a service in the kernel, or by a nonkernel routine
to invoke a function of the kernel. For example, when a user issues a command to
execute the program stored in some file, say file alpha, the user interface makes
a system call, and the interrupt servicing routine invokes a nonkernel routine
to set up execution of the program. The nonkernel routine would make system
calls to allocate memory for the program's execution, open file alpha, and load
its contents into the allocated memory area, followed by another system call to
initiate operation of the process that represents execution of the program. If a
process wishes to create a child process to execute the program in file alpha, it,
too, would make a system call and identical actions would follow.
The historical motivations for the kernel-based OS structure were portabil-
ity of the OS and convenience in the design and coding of nonkernel routines.
Portability of the OS is achieved by putting architecture-dependent parts of
OS code--which typically consist of mechanisms--in the kernel and keeping
architecture-independent parts of code outside it, so that the porting effort is
limited only to porting of the kernel. The kernel is typically monolithic to ensure
efficiency; the nonkernel part of an OS may be monolithic, or it may be further
structured into layers.
Table 4.3 contains a sample list of functions and services offered by the kernel
to support various OS functionalities. These functions and services provide a set
of abstractions to the nonkernel routines; their use simplifies design and coding of
nonkernel routines by reducing the semantic gap faced by them (see Section 4.4).
For example, the I/O functions of Table 4.3 collectively implement the abstraction
of virtual devices (see Section 1.3.2). A process is another abstraction provided
by the kernel.
A kernel-based design may suffer from stratification analogous to the layered
OS design (see Section 4.4) because the code to implement an OS command
may contain an architecture-dependent part, which is typically a mechanism that
would be included in the kernel, and an architecture-independent part, which
is typically the implementation of a policy that would be kept outside the ker-
nel. These parts would have to communicate with one another through system
calls, which would add to OS overhead because of interrupt servicing actions.
Consider the command to initiate execution of the program in a file named
alpha. As discussed earlier, the nonkernel routine that implements the command
would make four system calls to allocate memory, open file alpha, load the pro-
gram contained in it into memory, and initiate its execution, which would incur
considerable overhead. Some operating system designs reduce OS overhead by
including the architecture-independent part of a function's code also in the kernel.



94  Part 1  Overview
            Table 4.3          Typical Functions and Services Offered by the Kernel
               OS functionality                Examples of kernel functions and services
               Process management              Save context of the interrupted program, dispatch a
                                               process, manipulate scheduling lists
               Process communication           Send and receive interprocess messages
               Memory management               Set memory protection information, swap-in/
                                               swap-out, handle page fault (that is, "missing from
                                               memory" interrupt of Section 1.4)
               I/O management                  Initiate I/O, process I/O completion interrupt,
                                               recover from I/O errors
               File management                 Open a file, read/write data
               Security and protection         Add authentication information for a new user,
                                               maintain information for file protection
               Network management              Send/receive data through a message
            Thus, the nonkernel routine that initiated execution of a program would become
            a  part   of  the  kernel.  Other  such  examples  are  process  scheduling         policies,
            I/O scheduling policies of device drivers, and memory management policies.
            These inclusions reduce OS overhead; however, they also reduce portability of
            the OS.
                      Kernel-based operating systems have poor extensibility because addition of
            a new functionality to the OS may require changes in the functions and services
            offered by the kernel.
            4.6.1 Evolution of Kernel-Based Structure
                      of Operating Systems
            The structure of kernel-based operating systems evolved to offset some of its
            drawbacks. Two steps in this evolution were dynamically loadable kernel modules
            and user-level device drivers.
                      To provide dynamically loadable kernel modules, the kernel is designed as a
            set of modules that interact among themselves through well-specified interfaces.
            A base kernel consisting of a core set of modules is loaded when the system is
            booted. Other modules, which conform to interfaces of the base kernel, are loaded
            when their functionalities are needed, and are removed from memory when they
            are no longer needed. Use of loadable modules conserves memory during OS
            operation because only required modules of the kernel are in memory at any
            time. It also provides extensibility, as kernel modules can be modified separately
            and new modules can be added to the kernel easily. Use of loadable kernel modules
            has a few drawbacks too. Loading and removal of modules fragments memory,
            so the kernel has to perform memory management actions to reduce its memory
            requirement. A buggy module can also crash a system. Loadable kernel modules
            are used to implement device drivers for new I/O devices, network adapters, or
