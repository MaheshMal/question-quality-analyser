Handling Deadlocks
Table 8.3 describes the three fundamental approaches to deadlock handling. Each
approach has different consequences in terms of possible delays in resource allo-
cation, the kind of resource requests that user processes are allowed to make, and
the OS overhead.
     Under the deadlock detection and resolution approach, the kernel aborts some
processes when it detects a deadlock on analyzing the allocation state. This action
frees the resources held by the aborted process, which are now allocated to other
processes that had requested them. The aborted processes have to be reexecuted.
Thus, the cost of this approach includes the cost of deadlock detection and the
cost of reexecuting the aborted processes. In the system of Example 8.1, the
Table 8.3      Deadlock  Handling Approaches
Approach                     Description
Deadlock detection and   The kernel analyzes the resource state to check whether
resolution               a deadlock exists. If so, it aborts some process(es) and
                         allocates the resources held by them to other processes
                         so that the deadlock ceases to exist.
Deadlock prevention      The kernel uses a resource allocation policy that ensures
                         that the four conditions for resource deadlocks
                         mentioned in Table 8.2 do not arise simultaneously.
                         It makes deadlocks impossible.
Deadlock avoidance       The kernel analyzes the allocation state to determine
                         whether granting a resource request can lead to a
                         deadlock in the future. Only requests that cannot lead to
                         a deadlock are granted, others are kept pending until
                         they can be granted. Thus, deadlocks do not arise.
