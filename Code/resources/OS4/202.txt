Structure of Concurrent Systems
A concurrent system consists of three key components:
·  Shared data
·  Operations on shared data
·  Interacting processes
     Shared data include two kinds of data--application data used and manipu-
lated by processes, and synchronization data, i.e., data used for synchronization
between processes. An operation is a convenient unit of code, typically a func-
tion or a procedure in a programming language, which accesses and manipulates
shared data. A synchronization operation is an operation on synchronization data.
     A snapshot of a concurrent system is a view of the system at a specific time
instant. It shows relationships between shared data, operations and processes
at that instant of time. We use the pictorial conventions shown in Figure 6.11
to depict a snapshot. A process is shown as a circle. A circle with a cross in it
indicates a blocked process. A data item, or a set of data items, is represented by
a rectangular box. The value(s) of data, if known, are shown inside the box.
     Operations on data are shown as connectors or sockets joined to the data. An
oval shape enclosing a data item indicates that the data item is shared. A dashed
line connects a process and an operation on data if the process is currently engaged
in executing the operation. Recall that a dashed rectangular box encloses code
executed as a critical section. We extend this convention to operations on data.
Hence mutually exclusive operations on data are enclosed in a dashed rectangular
box. A queue of blocked processes is associated with the dashed box to show the
processes waiting to perform one of the operations.
     The execution of a concurrent system is represented by a series of snapshots.
                Pi         : Process Pi               d
                                                      5                      : Shared data d
                Pi         : Blocked
                           process Pi
                                                      d      OP1
     ..  .                 : Queue of blocked                            Pi
                           processes                  2                      :  Process Pi performs
                                                             OP2                OP1 on shared data d
            d
            25             : Data d                          OP1
                                                      d
            d       OP1                               8                      :  OP1, OP2 are mutually
            37             : Operations                                         exclusive operations
                    OP2    on data d                         OP2
Figure   6.11   Pictorial  conventions for snapshots     of  concurrent  systems.



182  Part 2  Process Management
·
     Example 6.3  Snapshots of a Concurrent System
                  Consider the system of Figure 6.5, where process Pi performs action ai only
                  after process Pj performs action aj . We assume that operations ai and aj operate
                  on shared data items X and Y , respectively. Let the system be implemented
                  using the operations check_aj and post_aj of Figure 6.7. This system comprises
                  the following components:
                  Shared data                            Boolean variables operation_aj_performed
                                                         and pi_blocked, both initialized to false,
                                                         and data items X and Y.
                  Operations on application data         Operations ai and aj .
                  Synchronization operations             Operations check_aj and post_aj.
                  Processes                              Processes Pi and Pj .
                     Figure 6.12 shows three snapshots of this system. T and F indicate val-
                  ues true and false, respectively. Operations check_aj and post_aj both use the
                  boolean variables operation_aj_performed and pi_blocked. These operations
                  are indivisible operations, so they are mutually exclusive. Accordingly, they
                  are enclosed in a dashed box. Figure 6.12(a) shows the situation when process
                  Pj is engaged in performing operation aj and process Pi wishes to perform
                  operation ai, so it invokes operation check_aj. Operation check_aj finds that
                  operation_aj_performed is false, so it sets pi_blocked to true, blocks process
                  Pi and exits. When Pj finishes performing operation aj, it invokes operation
                  post_aj (see Figure 6.12(b)). This operation finds that pi_blocked is true, so it
                  sets pi_blocked to false, activates process Pi, and exits. Process Pi now performs
                  operation ai (see Figure 6.12(c)).
                  ·
                                       ai                        ai                        ai         Pi
                                 X                       X                        X
                                       aj        Pj              aj                        aj
                                 Y                       Y                        Y
                                       check_aj  Pi              check_aj  Pi             check_aj
                     pi_blocked     F                         T                        F
                     operation_     F                         F            ?           F
                     aj_performed      post_aj                   post_aj   Pj             post_aj     Pj
                     (a)                                 (b)                      (c)
                  Figure 6.12 Snapshots of the   system  of Example 6.3.
