Device Drivers
             In the physical IOCS design described in previous sections, the physical IOCS
             handles I/O initiation, I/O completion and error recovery for all classes of I/O
             devices within the system. Consequently, addition of a new class of I/O devices
             requires changes to the physical IOCS, which can be both complex and expensive
             because the physical IOCS may be a part of the kernel. Modern operating sys-
             tems overcome this problem through a different arrangement. The physical IOCS
             provides only generic support for I/O operations, and invokes a specialized device
             driver (DD) module for handling device-level details for a specific class of devices.
             Thus device drivers are not part of the physical IOCS. This arrangement enables
             new classes of I/O devices to be added to the system without having to modify the
             physical IOCS. Device drivers are loaded by the system boot procedure depend-
             ing on the classes of I/O devices connected to the computer. Alternatively, device
             drivers can be loaded whenever needed during operation of the OS. This feature
             is particularly useful for providing a plug-and-play capability.
             Figure 14.15 illustrates how device drivers are used by the physical IOCS.
             The entry of a device in the physical device table (PDT) shows the name of its



                                                              Chapter    14  Implementation  of  File  Operations  575
               Device   DD             IOQ
               address  name           pointer
                        Tape_DD                                          Tape_DD
                        Disk_DD
                  Physical device table         Table of
                        (PDT)                   entry points
               IOQ                                            IO_init:   Disk_DD
                                                              Int_proc:
Figure  14.15  Use of device drivers.
device driver in the DD name field. The Disk_DD, the device driver for the sys-
tem disk, has been loaded at system boot time. The Tape_DD would be loaded
on demand, so it is shown as a dashed box. A device driver contains function-
alities of the four physical IOCS modules shown in Figure 14.13, namely, I/O
scheduler, I/O initiator, I/O completion handler, and error recovery. A table of
entry points located at the start of its code contains start addresses of these
functionalities.
When the physical IOCS is invoked for initiating an I/O operation, it locates
the PDT entry of the device and performs the generic function of entering details
of the I/O operation into the IOQ of the device. It now consults the DD name
field of the PDT entry, obtains the identity of the device driver and loads the
device driver in memory if it is not already in memory. It now obtains the address
of the entry point for I/O initiator in the device driver by following the standard
conventions and passes control to it. The device driver performs I/O initiation
processing and returns control to the physical IOCS, which passes control to
the process scheduler. When the physical IOCS is invoked implicitly at an I/O
interrupt, it performs similar actions to identify the device driver entry point for
handling interrupts and passes control to it. After servicing the interrupt, the
device driver returns control to the physical IOCS, which passes it to the process
scheduler.
Device-Level Optimization        One important optimization is disk scheduling to
ensure good throughput, which is discussed in the next section. Another opti-
mization is reducing the number of seek operations in a disk. This optimization
can be performed in various ways. One simple way is to read several adjoining
disk blocks when a read operation is to be performed. It amounts to buffer-
ing of data, which is useful in sequential files. Device drivers for RAID units
reduce the number of seek operations by combining several I/O operations into a
single one.
A device driver can also support a novel or nonstandard I/O device. A good
example of the former is a RAM disk, which is simply a virtual disk maintained in
the RAM of a computer system: An area in RAM is reserved for use as a disk. All
read and write operations directed at the disk are actually performed on relevant
parts of the RAM. Operation of the RAM disk is extremely fast. However, data
