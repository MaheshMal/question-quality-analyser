Characterization of Resource Deadlocks by Graph Models
A deadlock characterization is a statement of the essential features of a deadlock.
In Section 8.4, we presented a deadlock detection algorithm using the matrix
model of the allocation state of a system. Following that algorithm, we can char-
acterize a deadlock as a situation in which we cannot construct a sequence of
process completion, resource release, and resource allocation events whereby all
processes in the system can complete.
     In this section, we discuss characterization of deadlocks using graph mod-
els of allocation state and elements of graph theory. As we saw in Section 8.2.1,
a circular wait-for relationship among processes is a necessary condition for a
deadlock. It is manifest in a cycle in an RRAG or WFG. A cycle is a sufficient
condition for a deadlock in some systems (see Example 8.3), but not in others
(see Example 8.4). This difference is caused by the nature of resource classes
and resource requests in the system, hence we first classify systems according
to the resource classes and resource requests used in them and develop sepa-
rate deadlock characterizations for different classes of systems. Later we point at
a deadlock characterization that is applicable to all systems. We use an RRAG
to depict the allocation state of a system all through this discussion.
Resource Class and Resource Request Models   A resource class Ri may contain
a single instance of its resource, or it may contain many instances. We refer to the
two kinds of classes as single instance (SI) resource classes and multiple instance
(MI) resource classes, respectively. We define two kinds of resource requests. In a
single request (SR), a process is permitted to request one unit of only one resource
class. In a multiple request (MR), a process is permitted to request one unit each
of several resource classes. The kernel never partially allocates a multiple request;
i.e., it either allocates all resources requested in a multiple request or does not
allocate any of them. In the latter case, the process making the request is blocked
until all resources can be allocated to it.
     Using the resource class and resource request models, we can define four
kinds of systems as shown in Figure 8.9. We name these systems by combining
the name of the resource class model and the resource request model used by
them. Accordingly, the SISR system is one that contains SI resource classes and
SR requests.
8.7.1 Single-Instance, Single-Request (SISR) Systems
In an SISR system, each resource class contains a single instance of the resource
and each request is a single request. As discussed in Section 8.2.2, existence of a
cycle in an RRAG implies a mutual wait-for relationship for a set of processes.
Since each resource class contains a single resource unit, each blocked process
Pi in the cycle waits for exactly one other process, say Pk, to release the required
resource. Hence a cycle that involves process Pi also involves process Pk. This fact



302  Part 2  Process Management
                                                    Resource request models
                                                    Single request (SR)  Multiple request (MR)
                                                    model                           model
                                     Multiple       Multiple-instance,   Multiple-instance,
                                   instance (MI)    single-request       multiple-request
                         Resource    model          (MISR)               (MIMR)
                         instance
                         models      Single         Single-instance,     Single-instance,
                                   instance (SI)    single-request       multiple-request
                                     model          (SISR)               (SIMR)
             Figure 8.9  Classification of systems  according to resource class and resource request
             models.
             satisfies condition (8.2) for all processes in the cycle. A cycle is thus a necessary
             as well as a sufficient condition to conclude that a deadlock exists in the system.
             8.7.2 Multiple-Instance, Single-Request (MISR) Systems
             A cycle is not a sufficient condition for a deadlock in MISR systems because
             resource classes may contain several resource units. The system of Example 8.4
             in Section 8.2.2.1 illustrated this property, so we analyze it to understand what
             conditions should hold for a deadlock to exist in an MISR system. The RRAG
             of the system contained a cycle involving processes Pi and Pj, with Pj requiring
             a tape drive and Pi holding a tape drive (see Figure 8.3). However, process Pk,
             which did not belong to the cycle, also held a unit of tape drive, so the mutual
             wait-for relation between Pi and Pj ceased to exist when Pk released a tape drive.
             Process Pi would have been in deadlock only if processes Pj and Pk had both
             faced indefinite waits. Thus, for a process to be in deadlock, it is essential that
             all processes that hold units of a resource required by it are also in deadlock. We
             use concepts from graph theory to incorporate this aspect in a characterization
             of deadlocks in MISR systems.
                A graph G is an ordered pair G  (N, E) where N is a set of nodes and E
             is a set of edges. A graph G          (N , E ) is a subgraph of a graph G        (N, E) if
             N   N and E            E, i.e., if all nodes and edges contained in G  are also contained
             in G. G     is a nontrivial subgraph of G if E  = , i.e., if it contains at least one
             edge. We now define a knot to characterize a deadlock in MISR systems.
             Definition 8.3 Knot     A nontrivial subgraph G              (N , E ) of an RRAG in
             which every node ni  N          satisfies the following conditions:
                1.  For every edge of the form (ni, nj ) in E: (ni, nj ) is included in E       and nj  is
                    included in N .
                2. If a path ni - . . . - nj exists in G , a path nj - . . . - ni also exists in G .
                Part 1 of Definition 8.3 ensures that if a node is included in a knot, all
             its out-edges, i.e., all edges emanating from it, are also included in the knot.



                                                                         Chapter 8          Deadlocks        303
Part 2 of Definition 8.3 ensures that each out-edge of each node is included in a
cycle. This fact ensures that each process in the knot is necessarily in the blocked
state. Parts 1 and 2 together imply that all processes that can release a resource
needed by some process in the knot are themselves included in the knot, which
satisfies condition (8.2). Thus one can conclude that the presence of a knot in an
RRAG is a necessary and sufficient condition for the existence of a deadlock in
an MISR system.
                                                                                                             ·
Deadlock in an MISR System                                                                  Example    8.12
The RRAG of Figure 8.3 depicts the allocation state in Example 8.4 after
requests 1­5 are made. It does not contain a knot since the path Pi, . . . , Pk
exists in it but a path Pk, . . . , Pi does not exist in it. Now consider the situation
after the following request is made:
6. Pk requests a printer.
        Process Pk now blocks on the sixth request. The resulting RRAG is shown
in Figure 8.10. The complete RRAG is a knot because Part 1 of Definition 8.3
is trivially satisfied, and every out-edge of every node is involved in a cycle,
which satisfies Part 2 of Definition 8.3. It is easy to verify that processes
{Pi, Pj , Pk} are in a deadlock since Blocked_P = {Pi, Pj , Pk}, WF i = {Pj },
WF j = {Pi, Pk}, and WF k = {Pj } satisfies conditions (8.1) and (8.2).
                                                                                         ·
8.7.3 Single-Instance, Multiple-Request (SIMR) Systems
Each resource class in the SIMR system contains only one resource unit, and so
it has exactly one out-edge in an RRAG. A process may make a multiple request,
in which case it has more than one out-edge. Such a process remains blocked if
even one of the resources requested by it is unavailable. This condition is satisfied
when the process is involved in a cycle, so a cycle is a necessary and sufficient
condition for a deadlock in an SIMR system. This property is illustrated by the
system of Figure 8.11. The process node Pi has an out-edge (Pi, R1) that is a
part of a cycle, and an out-edge (Pi, R3) that is not a part of any cycle. Process
                           Pi
                 printer              tape
                 ·                    ··
                           Pj               Pk
Figure  8.10  A knot in the RRAG of an MISR system implies a deadlock.



304  Part 2  Process Management
                                                            Pi
                                                 R1  ·           R2  ·             ·          R3
                                                            Pj                 Pk
                   Figure 8.11   A cycle  is  a  necessary  and  a sufficient  condition for  a deadlock  in  an  SIMR
                   system.
                   Pi remains blocked until a resource unit of R1 can be allocated to it. Since the
                   out-edge (Pi, R1) is involved in a cycle, Pi faces an indefinite wait. Pj also faces
                   an indefinite wait. Hence {Pi, Pj} are involved in a deadlock.
                   8.7.4 Multiple-Instance, Multiple-Request (MIMR) Systems
                   In the MIMR model, resource classes contain several resource units and pro-
                   cesses may make multiple requests, hence both process and resource nodes of an
                   RRAG can have multiple out-edges. If none of the resource nodes involved in a
                   cycle in the RRAG has multiple out-edges, the cycle is similar to a cycle in the
                   RRAG of an SIMR system, and so it is a sufficient condition for the existence
                   of a deadlock. However, if a resource node in a cycle has multiple out-edges,
                   a cycle is a necessary condition but not a sufficient condition for a deadlock.
                   In such cases every out-edge of the resource node must be involved in a cycle;
                   this requirement is similar to that in the MISR systems. Example 8.13 illustrates
                   this aspect.
·
     Example 8.13  Deadlock in an MIMR System
                   The RRAG of Figure 8.12 contains the cycle R1 - Pi - R2 - Pj - R1. Resource
                   node R1 contains an out-edge (R1, Pk) that is not included in a cycle, hence pro-
                   cess Pk may obtain resource R3 and eventually release an instance of resource
                   class R1, which could be allocated to process Pj. It will break the cycle in the
                   RRAG, hence there is no deadlock in the system. If the allocation edge of R3
                   were to be (R3, Pi), both out-edges of R1 would be involved in cycles. Process
                   Pj's request for R1 would now face an indefinite wait, and so we would have
                   a deadlock situation. Note that out-edge (Pi, R4) of Pi is not involved in a
                   cycle; however, a deadlock exists because Pi has made a multiple request and
                   its request for resource class R2 causes an indefinite wait for it.
                   ·
                      From the above discussion and Example 8.13 it is clear that we must differen-
                   tiate between process and resource nodes in the RRAG of an MIMR system--all
                   out-edges of a resource node must be involved in cycles for a deadlock to arise,
                   whereas a process node needs to have only one out-edge involved in a cycle.



                                                                                Chapter 8  Deadlocks        305
                                       Pi
                        R3             R1      R2                  R4
                            Pk             Pj              Pl
Figure 8.12  RRAG for an MIMR system.
We define a resource knot to incorporate this requirement, where a resource knot
differs from a knot only in that Part 1 of Definition 8.4 applies only to resource
nodes.
Definition 8.4 Resource Knot           A nontrivial subgraph G      (N , E ) of an
RRAG in which every node ni  N             satisfies the following conditions:
1. If ni is a resource node, for every edge of the form (ni, nj ) in E: (ni, nj ) is
included in E  and nj is included in N .
2. If a path ni - . . . - nj exists in G , a path nj - . . . - ni also exists in G .
                                                                                                            ·
Resource Knot                                                                              Example    8.14
Nodes Pi, Pj , Pk, R1, R2, and R3 of Figure 8.12 would be involved in a resource
knot if the allocation edge of resource class R3 is (R3, Pi). Note that out-edge
(Pi, R4) of process Pi is not included in the resource knot.
                                                                                      ·
Clearly, a resource knot is a necessary and sufficient condition for the exis-
tence of a deadlock in an MIMR system. In fact, we state here without proof that
a resource knot is a necessary and sufficient condition for deadlock in all classes
of systems discussed in this section (see Exercise 8.17).
8.7.5 Processes in Deadlock
D, the set of processes in deadlock, contains processes represented by process
nodes in resource knots. It also contains some other processes that face indefinite
waits. We use the following notation to identify all processes in D.
RRi          The set of resource classes requested by process Pi.
HSk          The holder set of resource class Rk, i.e., set of processes to which
             units of resource class Rk are allocated.
KS           The set of process nodes in resource knot(s) (we call it the knot-set
             of RRAG).
AS           An auxiliary set of process nodes in RRAG that face indefinite
             waits. These nodes are not included in a resource knot.
