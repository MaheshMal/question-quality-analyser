Correctness of Distributed Control Algorithms
Processes of a distributed control algorithm exchange control data and coordi-
nate their actions through control messages. However, message communication
incurs delays, so the data used by the algorithm may become stale and inconsis-
tent, and the algorithm may either miss performing correct actions or perform
wrong actions. Accordingly, correctness of a distributed control algorithm has
two facets:
·  Liveness: An algorithm will eventually perform correct actions, i.e., perform
   them without indefinite delays.
·  Safety: An algorithm does not perform wrong actions.
   Lack of liveness implies that an algorithm would fail to perform correct
actions. For example, a distributed mutual exclusion algorithm might fail to
satisfy the progress and bounded wait properties of Section 6.3.1, or a dead-
lock detection algorithm might not be able to detect a deadlock that exists in
the system. Note that the amount of time needed to perform a correct action
is immaterial for the liveness property; the action must be performed eventu-
ally. Lack of safety implies that an algorithm may perform wrong actions like
permitting more than one process to be in CS at the same time. Table 18.2
summarizes   the  liveness  and  safety     properties  of  some     distributed    control
algorithms.
   Assuming a distributed control algorithm to consist of a set of distinct
actions and a set of distinct conditions, we can represent the algorithm as a
set of rules of the form <condition> : <action>, where a rule specifies that the
algorithm should perform <action> if and only if <condition> is true. Using
Table 18.2   Liveness and Safety of Distributed Control Algorithms
Algorithm         Liveness                                  Safety
Mutual exclusion  (1) If a CS is free and some              At most one process will be
                  processes have requested                  in a CS at any time.
                  entry to it, one of them will
                  enter it in finite time.
                  (2) A process requesting
                  entry to a CS will enter it in
                  finite time.
Deadlock          If a deadlock arises, it will             Deadlock will not be
handling          be detected in finite time.               declared unless one actually
                                                            exists.
Termination       Termination of a distributed              Termination will not be
detection         computation will be                       declared unless it has
                  detected within a finite time.            occurred.
Election          A new coordinator will be                 Exactly one process will be
                  elected in a finite time.                 elected coordinator.
