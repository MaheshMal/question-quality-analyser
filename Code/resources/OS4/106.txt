Layered Design of Operating Systems
The monolithic OS structure suffered from the problem that all OS components
had to be able to work with the bare machine. This feature increased the cost
and effort in developing an OS because of the large semantic gap between the
operating system and the bare machine.
Definition 4.1 Semantic Gap                The mismatch between the nature of opera-
tions needed in the application and the nature of operations provided in the
machine.
     The semantic gap can be illustrated as follows: A machine instruction imple-
ments a machine-level primitive operation like arithmetic or logical manipulation
of operands. An OS module may contain an algorithm, say, that uses OS-level
primitive operations like saving the context of a process and initiating an I/O
operation. These operations are more complex than the machine-level primi-
tive operations. This difference leads to a large semantic gap, which has to be
bridged through programming. Each operation desired by the OS now becomes
a sequence of instructions, possibly a routine (see Figure 4.3). It leads to high
programming costs.
     The semantic gap between an OS and the machine on which it operates can
be reduced by either using a more capable machine--a machine that provides
instructions to perform some (or all) operations that operating systems have to
perform--or by simulating a more capable machine in the software. The former
approach is expensive. In the latter approach, however, the simulator, which is a
        Operating                          Program                I/O
             system          management                           management
             Semantic
             gap
             Bare            Arithmetic             Logical       I/O
             machine         instructions           instructions  instructions
Figure  4.3  Semantic  gap.



86  Part 1  Overview
            program, executes on the bare machine and mimics a more powerful machine that
            has many features desired by the OS. This new "machine" is called an extended
            machine, and its simulator is called the extended machine software. Now the
            OS interfaces with the extended machine rather than with the bare machine;
            the extended machine software forms a layer between the OS and the bare
            machine.
                      The basic discipline in designing a layered OS is that the routines of one
            layer must use only the facilities of the layer directly below it--that is, no layer
            in the structure can be bypassed. Further, access to routines of a lower layer
            must take place strictly through the interface between layers. Thus, a routine
            situated in one layer does not "know" addresses of data structures or instruc-
            tions in the lower layer--it only knows how to invoke a routine of the lower
            layer. This property, which we will call information hiding, prevents misuse or
            corruption of one layer's data by routines situated in other layers of the OS.
            During debugging, localization of errors becomes easy since the cause of an
            error in a layer, e.g., an incorrect value in its data element, must lie within that
            layer itself. Information hiding also implies that an OS layer may be modified
            without affecting other layers. These features simplify testing and debugging
            of an OS.
                      Figure 4.4 illustrates a two-layered OS. The extended machine provides
            operations like context save, dispatching, swapping, and I/O initiation. The
            operating system layer is located on top of the extended machine layer. This
            arrangement considerably simplifies the coding and testing of OS modules by
            separating the algorithm of a function from the implementation of its prim-
            itive operations. It is now easier to test, debug, and modify an OS module
            than in a monolithic OS. We say that the lower layer provides an abstraction
            that is the extended machine. We call the operating system layer the top layer
            of the OS.
                      The layered structures of operating systems have been evolved in various
            ways--using different abstractions and a different number of layers. Example 4.2
            describes the THE multiprogramming OS, which uses a multilayered structure
            and provides a process as an abstraction in the lowest layer.
                      Operating                   Process                  I/O
                           system                 management             management
                           Semantic
                           gap
                      Extended           Context              Dispatch     Perform
                           machine       save                 a process    I/O
                                                           Bare machine
            Figure    4.4  Layered   OS  design.



                                                        Chapter 4    Structure of Operating Systems        87
                                                                                                           ·
Structure of the THE Multiprogramming System                                                 Example  4.2
The THE multiprogramming system was developed at Technische Hogeschool
Eindhoven in the Netherlands by Dijkstra and others using a layered design.
Table 4.2 shows the hierarchy of layers in the THE system.
Layer 0 of the system handles processor allocation to implement multi-
programming. This function involves keeping track of process states and
switching between processes, using priority-based scheduling. Layers above
layer 0 need not concern themselves with these issues. In fact, they can be
oblivious to the presence of multiple processes in the system.
Layer 1 performs memory management. It implements a memory hierar-
chy consisting of the memory and a drum, which is a secondary storage device
(see Section 2.2.3). Details of transfer between the memory and the drum need
not concern the rest of the OS.
Layer 2 implements communication between a process and the opera-
tor's console by allocating a virtual console to each process. Layer 3 performs
I/O management. Intricacies of I/O programming (see Section 14.4) are thus
hidden from layer 4, which is occupied by user processes.
                                                                                        ·
The  layered  approach  to       OS  design    suffers  from  three  problems.          The
operation of a system may be slowed down by the layered structure. Recall that
each layer can interact only with adjoining layers. It implies that a request for OS
service made by a user process must move down from the highest numbered layer
to the lowest numbered layer before the required action is performed by the bare
machine. This feature leads to high overhead.
The second problem concerns difficulties in developing a layered design.
Since a layer can access only the immediately lower layer, all features and facilities
needed by it must be available in lower layers. This requirement poses a problem
in the ordering of layers that require each other's services. This problem is often
solved by splitting a layer into two and putting other layers between the two halves.
For example, a designer may wish to put process handling functions in one layer
and memory management in the next higher layer. However, memory allocation
is required as a part of process creation. To overcome this difficulty, process han-
dling can be split into two layers. One layer would perform process management
functions like context save, switching, scheduling, and process synchronization.
Table 4.2     Layers in the THE Multiprogramming System
     Layer    Description
Layer 0       Processor allocation and multiprogramming
Layer 1       Memory and drum management
Layer 2       Operator­process communication
Layer 3       I/O management
Layer 4       User processes
