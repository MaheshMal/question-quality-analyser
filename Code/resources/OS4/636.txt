Formal Aspects of Security
To formally prove that a system can withstand all forms of security attacks,
we need a security model comprising security policies and mechanisms, a list of
threats, a list of fundamental attacks, and a proof methodology. The list of attacks
must be provably complete in the sense that it should be possible to produce any
threat in the list of threats through a combination of the fundamental attacks.
The proof methodology should be capable of ascertaining whether the security
model can withstand certain forms of attack.
Early work in security was performed along these lines. In the take-grant
model of computer security (Landwehr [1981]), processes were given privileges
for objects and for other processes. A privilege for an object entitled the holder
of the privilege to access the object in a specific manner. A privilege for another
process entitled the holder of the privilege to take an access privilege possessed
by the other process (a take operation), or to transfer one of its own access
privileges to the other process (a grant operation). The proof took the form of
ascertaining whether a specific process could obtain a specific access privilege
for a specific object through a series of take and grant operations. In the follow-
ing example we discuss how a security flaw can be detected through the formal
approach.



616  Part 4  File Systems and I/O Management
·
     Example 15.1  Detection of a Security Flaw
                   In an organization employing military-like security, all documents are classi-
                   fied into three security levels--unclassified, confidential, and secret. Persons
                   working in the organization are given security clearances called U (unclassi-
                   fied), C (confidential), and S (secret) with the proviso that a person can access
                   all documents at his level of security classification and at lower levels of clas-
                   sification. Thus, a person with C classification can access confidential and
                   unclassified documents, but is forbidden from accessing secret documents.
                      The organization uses a Unix system and persons in the organization use
                   Unix features to access files containing documents. This way, it is expected that
                   a program executed by a user can access a document at a specific security level
                   only if the user possesses the appropriate security clearances. To check whether
                   document security is foolproof, all operations in the system are modeled and a
                   check is made to see whether a person can access a document that is at a higher
                   level of classification than his security clearance. It is found that a combination
                   of indiscriminate assignment of the "execute" privilege for programs to users
                   and use of the setuid feature of Unix can enable a user to access a forbidden
                   document. It can happen because the setuid feature permits a user to execute
                   a program with the privileges of the program's owner (see Section 15.9.2),
                   so if a user can execute a program owned by an individual with a higher
                   security clearance, he can "take" the security clearance of the program's
                   owner.
                      This security flaw can be eliminated by either forbidding use of the setuid
                   feature or confining the "execute" privilege for a program only to users whose
                   security clearance is not lower than that of the program's owner.
                   ·
                      The security flaw in Example 15.1 could also have been discovered through
                   manual procedures; however, manual procedures become less reliable as systems
                   grow more complex. Formal methods construct feasible sequences of operations
                   and deduce or verify their properties. This way they can discover sequences of
                   operations that have disastrous consequences, or assert that such sequences of
                   operations do not exist.
                      The formal approach also has some drawbacks. As the size of the sys-
                   tem to be analyzed grows, the computing and storage requirements of formal
                   methods exceed the capabilities of contemporary computer systems. The formal
                   approach is also hard to apply because it requires a complete specification of
                   a system and a comprehensive list of fundamental attacks; it is not possible to
                   develop such a list for modern operating systems. It also requires a clear state-
                   ment of security policies. This requirement is hard to meet because most security
                   policies consist of rules that are informally stated so that everyone in an orga-
                   nization can understand them. However, this is where the formal approach con-
                   tributes substantially to the field of security--it emphasizes the need for precise
                   specifications.
