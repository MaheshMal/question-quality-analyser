Memory-Mapped Files
             Memory mapping of a file by a process binds that file to a part of the logical
             address space of the process. This binding is performed when the process makes
             a memory map system call; it is analogous to dynamic binding of programs and
             data discussed earlier in Section 12.6. After memory mapping a file, the process
             refers to data in the file as if it were data located in pages of its own address
             space, and the virtual memory manager coordinates with the file system to load
             page-size parts of the file into memory on demand. When the process updates
             the data contained in such pages, the modified bits of the pages are set on but the
             data is not immediately written out into the file; dirty pages of data are written
             out to the file when the page frames containing them are to be freed. When the
             process makes a memory unmap call, the virtual memory manager writes out any
             dirty pages that still contain the file's data and deletes the file from the logical
             address space of the process.
             Figure 12.25 shows the arrangement used for memory mapping of file info
             by process A. Note that the page-in and page-out operations on those pages of
             process A that do not belong to file info involve the swap space of the process
             and are performed by the virtual memory manager. Reading and writing of data
             from file info are performed by the file system in conjunction with the virtual
             memory manager. If several processes memory map the same file, we have an
             arrangement analogous to that shown in Figure 12.23; these processes would
             effectively share the memory-mapped file.
                           Page                  Page table
                            #         Process A        of A        Memory
             Memory-            i+i1             i+i1
                   mapped                                                              Swap space
                   file                                                                of process A
                   info
                                                                                       File
                                                                                       info
                                                                               File
                                                                               system
             Figure 12.25 Memory mapping         of file info  by  process A.



                                                     Chapter 12                           Virtual Memory  455
Table 12.5        Advantages of Memory-Mapped Files
Advantage               Description
File data as pages      Access to file data is looked upon as access to pages,
                        which is inherently more efficient because of virtual
                        memory hardware.
Avoids                  File data is a part of the process space. Hence the
memory-to-memory        process does not have to copy it into a variable for
copying                 processing.
Fewer read/write        File data is read in or written out one page at a time,
operations              rather than at every file operation, and so a single
                        read/write operation may suffice for several file
                        operations.
Prefetching of data     For sequential reads, data will already be in memory if
                        the page that contains the data was read in during a
                        previous file operation.
Efficient data access   File data can be accessed efficiently irrespective of file
                        organization.
Table 12.5 summarizes the advantages of memory mapping of files. Memory-
mapping makes file records accessible through the virtual memory hardware. This
is inherently more efficient. Memory-to-memory copy operations are avoided as
follows: When a process accesses some data in a non-memory-mapped input file,
the file system first copies the record into a memory area used as a file buffer or disk
cache (see Chapter 14). The process now copies the data from the buffer or the disk
cache into its own address space (i.e., into some variables) for accessing it. Thus
one disk-to-memory copy operation and one memory-to-memory copy operation
are performed. When a file is memory-mapped, the memory-to-memory copy
operation from the buffer to the process address space is not necessary since the
data is already a part of the process address space. Similarly, fewer copy operations
are performed when file data is modified. Data located in a page that was read in
or written into during a previous file operation can be accessed without disk I/O,
so memory mapping reduces the number of I/O operations performed during file
processing.
The last advantage, efficient access to data in a file irrespective of its organi-
zation, arises from the fact that data in a memory-mapped file is accessed through
the virtual memory hardware. Hence any part of the data can be accessed equally
efficiently, whereas, as discussed in Chapter 13, efficiency of access to the same
data through file operations would depend on the manner in which the data is
organized in the file.
Memory mapping of files poses some performance problems. The open and
close operations on a memory-mapped file incur more overhead than the open and
close operations on normal files. It is caused by updating of page table and TLB
entries while setting up and dismantling that part of the process address space
where the file is mapped. The virtual memory manager also has to differentiate
between memory-mapped pages and other pages in an address space--dirty data
