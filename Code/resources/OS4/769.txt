Recovery
             A recovery scheme consists of two components. The checkpointing algorithm
             decides when a process should take a checkpoint. We will use the notation Cij to
             denote the jth checkpoint taken by process Pi. The recovery algorithm rolls back
             some processes to their states recorded in checkpoints such that the new process
             states are mutually consistent. Example 19.2 illustrates the fundamental issue in
             the design of checkpointing and recovery algorithms.



                                                                   Chapter  19  Recovery and Fault Tolerance        749
                          C11    C12            C13
             P1
                                 C21m1     C22            C23
             P2
                               C31 C32     m2             m3
             P3
                                                                   tf
Figure 19.3  Checkpoints  of processes in  a distributed  system.
                                                                                                                    ·
Checkpointing and Recovery                                                                        Example     19.2
Figure 19.3 shows the timing diagram of a distributed computation whose
processes P1 - P3 operate in nodes N1 - N3, respectively. C11, C12 and C13
are the checkpoints taken by process P1. Similarly C21, C22, C23, and C31, C32
are the checkpoints taken by processes P2 and P3, respectively. We denote the
state recorded in <checkpoint> as state(<checkpoint>). Let processes P1, P2
and P3 be in the states s1, s2 and s3, respectively, at time instant tf . Hence the
distributed computation is in the state S  {s1, s2, s3}. Let a failure occur in
node N3 at time instant tf . A naive recovery algorithm simply rolls back process
P3 to its latest checkpoint, i.e., C32. However, the new state of the computation,
{s1, s2, state(C32)}, is not a consistent state because P2 has received message
m3 in state s2 but P3 has not sent m3 in state(C32), which is its new state (see
Definition 17.1).
                                                                                               ·
From Example 19.2 it is clear that the state of a process cannot be recovered
in isolation. A recovery algorithm should restore the state of the computation to a
state S in which states of all pairs of processes are mutually consistent according
to Definition 17.1. Hence the goal of a recovery algorithm is to make the following
decisions for each process Pi in a distributed computation:
1. Decide whether process Pi should be rolled back.
2. If so, identify a checkpoint Cij to which Pi should be rolled back.
In Example 19.2, the distributed computation could be recovered to the state
{s1, state(C22), state(C32)}. We discuss a basis for such recovery in the following.
Definition 19.1 Orphan Message             A message mk sent by process Pi to process
Pj is an orphan message in the state S  {s1, . . . , si, . . . , sj , . . . , sn} of a system
if sj , the state of process Pj , records mk as received but si, the state of process
Pi, does not record it as sent.
An orphan message is a message that has been received by its destination
process, but it is disowned by its sender because of recovery. Hence the states of its
sender and destination processes are inconsistent. This inconsistency is removed
