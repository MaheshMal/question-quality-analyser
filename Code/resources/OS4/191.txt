Critical Sections
             Mutual exclusion between actions of concurrent processes is implemented by
             using critical sections of code. A critical section is popularly known by its
             acronym CS.
             Definition 6.3 Critical Section      A critical section for a data item ds is a section
             of code that is designed so that it cannot be executed concurrently either with
             itself or with other critical section(s) for ds.
                  If some process Pi is executing a critical section for ds, another process wish-
             ing to execute a critical section for ds will have to wait until Pi finishes executing
             its critical section. Thus, a critical section for a data item ds is a mutual exclusion
             region with respect to accesses to ds.
                  We mark a critical section in a segment of code by a dashed rectangular box.
             Note that processes may share a single copy of the segment of code that contains
             one critical section, in which case only a single critical section for ds exists in
             the application. In all other cases, many critical sections for ds may exist in the
             application. Definition 6.3 covers both situations. A process that is executing a
             critical section is said to be "in a critical section." We also use the terms "enter a
             critical section" and "exit a critical section" for situations where a process starts
             and completes an execution of a critical section.
                  Figure 6.3(a) shows the code of a process that contains several critical
             sections. The process has a cyclic behavior due to the statement repeat forever.
             In each iteration, it enters a critical section when it needs to access a shared data
             item. At other times, it executes other parts of code in its logic, which together
             constitute "remainder of the cycle." For simplicity, whenever possible, we use the
             simple process form shown in Figure 6.3(b) to depict a process. The following
             example illustrates the use of a critical section to avoid race conditions.



                                                                                      Chapter 6  Process  Synchronization       171
repeat           forever                                                  repeat forever
                          ...
                 Critical section
                          ...
                 Critical section                Remainder of                  Critical section
                          ...                    the cycle
                 Critical section
                          ...                                                  {Remainder of the cycle}
end                                                                       end
(a)                                                                       (b)
Figure 6.3  (a)  A process with    many    critical sections;     (b)  a  simpler way of depicting this
process.
                 if nextseatno  capacity                    if nextseatno  capacity
                 then                                       then
                       allotedno:=nextseatno;                     allotedno:=nextseatno;
                       nextseatno:=nextseatno+1;                  nextseatno:=nextseatno+1;
                 else                                       else
                       display "sorry, no seats                   display "sorry, no seats
                                   available";                                 available";
                               Process Pi                                 Process Pj
Figure 6.4  Use of critical sections in an airline  reservation system.
                                                                                                                                ·
Preventing a Race Condition through a Critical Section                                                       Example       6.2
Figure 6.4 shows use of critical sections in the airline reservation system of
Figure 6.2. Each process contains a critical section in which it accesses and
updates the shared variable nextseatno. Let fi(nextseatno) and fj(nextseatno)
represent the operations performed in critical sections of Pi and Pj, respec-
tively. If Pi and Pj attempt to execute their critical sections concurrently, one
of them will be delayed. Hence, the resulting value of nextseatno will be either
fi( fj (nextseatno)) or fj ( fi(nextseatno)). From Definition 6.2, a race condition
does not arise.
                                                                                                          ·
Use of critical sections causes delays in operation of processes. Both processes
and the kernel must cooperate to reduce such delays. A process must not execute
for too long inside a critical section and must not make system calls that might put
it in the blocked state. The kernel must not preempt a process that is engaged in
executing a critical section. This condition requires the kernel to know whether
a process is inside a critical section at any moment, and it cannot be met if
processes implement critical sections on their own, i.e., without involving the
kernel. Nevertheless, in this chapter we shall assume that a process spends only a
short time inside a critical section.
