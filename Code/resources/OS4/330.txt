Summary
A deadlock is a situation in which a set of pro-       process currently blocked on a resource request
cesses wait indefinitely for events because each of    can be allocated the required resource through a
the events can be caused only by other processes       sequence of process completion, resource release,
in the set. A deadlock adversely affects user ser-     and resource allocation events. Deadlock detec-
vice, throughput and resource efficiency. In this      tion incurs a high overhead as a result of this
chapter, we discussed OS techniques for handling       check, so approaches that ensure the absence of
deadlocks.                                             deadlocks have been studied. In the deadlock pre-
     A resource deadlock arises when four con-         vention approach, the resource allocation policy
ditions hold simultaneously: Resources are non-        imposes some constraints on resource requests so
shareable   and  nonpreemptible,  a  process  holds    that the four conditions for deadlock would not
some resources while it waits for resources that       be satisfied simultaneously. In the deadlock avoid-
are in use by other processes, which is called the     ance approach, the resource allocator knows a
hold-and-wait condition; and circular waits exist      process's maximum need for resources. At every
among processes. An OS can discover a dead-            resource request, it checks whether a sequence of
lock by analyzing the allocation state of a system,    process completion, resource release, and resource
which consists of information concerning allocated     allocation events can be found through which all
resources and resource requests on which processes     processes could satisfy their maximum need and
are blocked. A graph model of allocation state can     complete their operation. It grants the resource
be used in systems where a process cannot request      request only if this check is satisfied.
more than one resource unit of a resource class.       When a graph model of allocation state is used,
A resource request and allocation graph (RRAG)         deadlocks can be characterized in terms of paths in
depicts resource allocation and pending resource       the graph. However, the characterization becomes
requests in the OS, whereas a wait-for graph (WFG)     complex when a resource class can contain many
depicts wait-for relationships between processes. In   resource units.
both models, a circular wait condition is reflected    For reasons of convenience and efficiency, an
in a circular path in the graph. A matrix model        OS may use different deadlock handling policies
represents the allocation state in a set of matrices.  for different kinds of resources. Typically, an OS
     When a process completes its operation, it        uses deadlock prevention approaches for kernel
releases its resources and the kernel can allocate     resources, and creates virtual resources to avoid
them to other processes that had requested them.       deadlocks over I/O devices; however, it does not
When a matrix model of allocation state is used, a     handle deadlocks involving user resources like files
deadlock can be detected by finding whether every      and interprocess messages.



310   Part 2        Process Management
TEST  YOUR CONCEPTS                                                                                                    ·
8.1   Classify each of the following statements as true             5 resources, the system contains at least 15
      or false:                                                     resource units.
      a. A cycle in the resource request and allocation          i. An  OS     employing        a         multiple-resource
      graph (RRAG) is a necessary and sufficient                    banker's algorithm has been in operation for
      condition for a deadlock if each resource class               some time with four processes. A new pro-
      contains only one resource unit.                              cess arrives in the system. It is initially not
      b. Deadlock resolution guarantees that dead-                  allocated any resources. Is the new allocation
      locks will not occur in future.                               state of the system safe?
      c. The "all resources together" policy of dead-            j. If every resource class in a system has a single
      lock       prevention  ensures   that  the   circu-           resource unit, every cycle in the RRAG of the
      lar     wait  condition  will  never   hold  in  the          system is also a resource knot.
      system.                                               8.2  An OS contains n resource units of a resource
      d. The     resource  ranking   policy  of  deadlock        class. Three processes use this resource class, and
      prevention    ensures    that   the    hold-and-wait       each of them has a maximum need of 3 resource
      condition will never hold in the system.                   units. The manner and the order in which the
      e. If a set of processes D is deadlocked, the set          processes request units of the resource class are
      Blocked of Algorithm 8.1 will contain some                 not known. What is the smallest value of n for
      of these processes when execution of the algo-             operation of the system to be free of deadlocks?
      rithm completes; however, Blocked may not                         a. 3, b. 7, c. 6, d. 9
      contain all of them.                                  8.3  An OS employs the banker's algorithm to con-
      f. If a process Pi requests r units of a resource          trol allocation of 7 tape drives. Maximum need
      class Rj and  r units of Rj are free, then                 of three processes P1, P2, and P3 are 7, 3, and
      the banker's algorithm will definitely allocate            5 drives, respectively. How many drives can the
      r units to Pi.                                             OS allocate safely to process P1, if the current
      g. The banker's algorithm does not guarantee               allocation state is as follows:
      that deadlocks will not occur in future.                   a. 2, 1, and 1 tape drives are allocated to pro-
      h. An OS has a single resource class that is con-             cesses P1, P2, and P3, respectively.
      trolled by the banker's algorithm. 12 units of                          i. 0, ii. 1, iii. 2, iv. 3
      the resource have been currently allocated to              b. 1, 2, and 1 tape drives are allocated to pro-
      processes, of which process Pi has been allo-                 cesses P1, P2, and P3, respectively.
      cated 2 resources. If Pi has a max need of                              i. 0, ii. 1, iii. 2, iv. 3
EXERCISES                                                                                                              ·
8.1   Clearly justify why deadlocks cannot arise in a            a  resource   requested  by    some      process  Pi  is
      bounded buffer producers­consumers system.                 unavailable,
8.2   When resource ranking is used as a deadlock pre-           a. The resource is preempted from one of its
      vention policy, a process is permitted to request a           holder processes Pj if Pj is younger than Pi.
      unit of resource class Rk only if rankk > ranki for           The resource is now allocated to Pi. It is
      every resource class Ri whose resources are allo-             allocated back to Pj when Pi completes. (A
      cated to it. Explain whether deadlocks can arise              process is considered to be younger if it was
      if the condition is changed to rankk  ranki.                  initiated later.)
8.3   A system containing preemptible resources uses             b. If condition (a) is not satisfied, Pi is blocked
      the following resource allocation policy: When                for the resource.



                                                                                                       Chapter 8     Deadlocks            311
     A released resource is always allocated to its old-                              b. Would the following requests be granted in
     est requester. Show that deadlocks cannot arise                                      the current state by the banker's algorithm?
     in this system. Also show that starvation does                                         i. Process P1 requests (1, 1, 0)
     not occur.                                                                           ii. Process P3 requests (0, 1, 0)
8.4  Develop a matrix model for the allocation state                                      iii. Process P2 requests (0, 1, 0)
     of  the  system        of     Figure      8.13.  Apply         Algo-       8.10  Three processes P1, P2, and P3 use a resource
     rithm    8.1   to  find       the  processes     involved         in             controlled through the banker's algorithm. Two
     deadlock.                                                                        unallocated resource units exist in the current
8.5  The system of Figure 8.13 is changed such that                                   allocation state. When P1 and P2 request for
     process  P6       has   made       a  multiple   request          for            one resource unit each, they become blocked on
     resources R7 and R1. What are the processes                                      their requests; however, when P3 requests for
     involved in a deadlock? Process P1 is aborted                                    two resource units, its request is granted right
     and process P3 makes a request for resource R5.                                  away. Explain why it may be so.
     Is the system in a deadlock now?                                           8.11  A   system    using    the    banker's   algorithm       for
8.6  A   system        uses     a  deadlock           detection-and-                  resource allocation contains n1 and n2 resource
     resolution policy. The cost of aborting one pro-                                 units of resource classes R1 and R2 and three
     cess is considered to be one unit. Discuss how                                   processes     P1, P2,    and     P3.  The     unallocated
     to identify victim process(es) so as to minimize                                 resources with the system are (1,1). The fol-
     the cost of deadlock resolution in each of the fol-                              lowing    observations      are   made   regarding       the
     lowing systems: (a) SISR systems, (b) SIMR sys-                                  operation of the system:
     tems, (c) MISR systems, and (d) MIMR systems.                                    a. If process P1 makes a (1,0) request followed
8.7  Is  the  allocation        state   in     which  6,     1,  and   2                  by a (0,1) request, the (1,0) request will be
     resource units are allocated to processes P1, P2,                                    granted   but   the    (0,1)     request  will  not  be
     and P3 in the system of Example 8.10 safe?                                           granted.
     Would the allocation state in which 3, 2, and 3                                  b. If, instead of making the resource requests in
     resource units are allocated be safe?                                                part (a), process P1 makes a (0,1) request, it
8.8  Would the following requests be granted in the                                       will be granted.
     current state by the banker's algorithm?                                         Find a possible set of values for the current
              R1R2                 R1R2                      R1R2                     allocations   and      maximum        resource      require-
         P1   2     5        P1    1    3             Total      3  4                 ments of the processes such that decisions using
         P2   3     2        P2    2    1             alloc                           the banker's algorithm will match the above
                                                      Total      4  5                 observations.
              Max               Allocated             exist                     8.12  Show    that     when    the   banker's       algorithm  is
              need              resources                                             applied to a finite set of processes, each having a
     a. Process P2 requests (1, 0)                                                    finite execution time, each resource request will
     b. Process P2 requests (0, 1)                                                    be granted eventually.
     c. Process P2 requests (1, 1)                                              8.13  Processes    in  a  particular       OS  make       multiple
     d. Process P1 requests (1, 0)                                                    requests.   This    OS   uses     a  banker's     algorithm
     e. Process P1 requests (0, 1)                                                    designed for a single resource class to implement
8.9  In the following system:                                                         deadlock avoidance as follows: When a process
                                                                                      requests   resource     units     of  some     n    resource
         R1R2R3                    R1R2R3                           R1R2R3            classes, the request is viewed as a set of n single
     P1  3    6     8        P1    2    2   3         Total         5  4    10        requests; e.g., a multiple request (2, 1, 3) would
     P2  4    3     3        P2    2    0   3         alloc                           be  viewed    as    three   single    requests      (2, 0, 0),
     P3  3    4     4        P3    1    2   4         Total         7  7    10        (0, 1, 0), and (0, 0, 3). The multiple request is
                                                      exist                           granted only if each single request would have
              Max                  Allocated                                          been granted in the current allocation state of
              need                 resources
                                                                                      the system. Is this a sound approach to deadlock
     a. Is the current allocation state safe?                                         avoidance? Justify your answer, either by giving



312           Part 2    Process Management
      an argument about its correctness, or by giving                               b. Can the system make a transition to a safe
      an example where it will fail.                                                    allocation state? If so, give an example show-
8.14  A   single-resource          system     contains       Total_                     ing such a transition.
      resourcess units of resource class Rs. If the sys-                8.17        Show    that     a  resource       knot  in   an    RRAG       is
      tem contains n processes, show that a deadlock                                a necessary and sufficient condition for dead-
      cannot arise if any one of the following con-                                 locks   in  SISR,         MISR,        SIMR,  and         MIMR
      ditions    is     satisfied  (see  the  notation    used    in                systems.
      Algorithm 8.2):                                                   8.18        A   WFG     is   used     to   represent      the   allocation
      a. For all i : Max_needi,s  Total_resourcess/n                                state   of  a   system    in    which    resource         classes
      b.      i Max_needi,s  Total_resourcess                                       may contain multiple units and processes can
      c.      i  Max_need i,s          Total_resourcess      +n   -                 make multiple resource requests (an MIMR sys-
          1 and for all i, 1                  M ax_needi,s                          tem). Develop a deadlock characterization using
          T otal_resourcess                                                         the WFG. (Hint: A node in the WFG would
8.15  In a single-resource system containing Total_                                 have more than one out-edge under two con-
      resourcess units of resource class Rs, set PA is                              ditions:    When       a  process      requests    a   resource
      defined as follows:                                                           unit of a multiple-instance resource class, and
                                                                                    when a process makes a multiple request. These
      PA         = {Pi | Pi has been allocated some                                 are called OR out-edges and AND out-edges,
                        resources but all its resource                              respectively. To differentiate between the two
                        requirements have not been met }                            kinds of out-edges, the AND out-edges of a pro-
                                                                                    cess are joined by a straight line as shown in
      Which of the following statements are true (see                               Figure 8.14(b). Figure 8.14(a) shows the out-
      the notation used in Algorithm 8.2)? Justify your                             edges for the RRAG of Figure 8.10, whereas
      answer.                                                                       Figure      8.14(b)    shows    the      out-edges        for  the
      a. "Processes     in         PA  will   definitely     become                 RRAG of Figure 8.11. These out-edges have
          deadlocked      if       i   Max_need i,s       >  Total-                 different implications for deadlock detection!)
          _resourcess ."                                                8.19        An OS uses a simple policy to deal with dead-
      b. "Processes in PA may be deadlocked only                                    lock   situations.        When     it  finds  that     a  set  of
          if     there  exists     some  integer  k  such         that              processes is deadlocked, it aborts all of them
          num_ proc(k)      >      Total_resourcess /k ,     where                  and restarts them immediately. What are the
          num_ proc(k) is the number of processes in PA                             conditions under which the deadlock will not
          whose maximum requirement for the units of                                recur?
          resource class Rs exceeds k."                                 8.20        An     OS   has     a  single   disk,    which     it  uses    (a)
8.16  The new allocation state of a system after grant-                             to create user files and (b) to create a virtual
      ing of a resource request is not a safe allocation                            printer for every process. Space is allocated for
      state according to the banker's algorithm.                                    both uses on a demand basis, and a process
      a. Does it imply that a deadlock will definitely                              is blocked if its disk space requirement cannot
          arise in future?                                                          be granted. Print requests directed at a virtual
                                                                        Pi                                         Pi
                                                             Pj                             Pj
                                                                        Pk                                         Pk
                                                             (a)                           (b)
                            Figure 8.14       WFGs with multiple        out-edges:  (a)  OR edges;      (b)   AND  edges.



                                                                                      Chapter 8     Deadlocks          313
        printer are sent to a real printer when a process          8.23  It is proposed to use a deadlock prevention
        finishes. Is there a possibility of deadlocks in this            approach for the dining philosophers problem
        system? If so, under what conditions? Suggest a                  (see Section 6.7.3) as follows: Seats at the dinner
        solution to the deadlock problem.                                table are numbered from 1 to n, and forks are also
8.21    A phantom deadlock is a situation wherein a                      numbered from 1 to n, such that the left fork for
        deadlock handling algorithm declares a dead-                     seat i has the fork number i. Philosophers are
        lock     but  a  deadlock  does     not  actually  exist.        required to obey the following rule: A philoso-
        If  processes    are  permitted     to   withdraw  their         pher must first pick up the lower-numbered fork,
        resource requests, show that Algorithm 8.1 may                   then pick up the higher-numbered fork. Show
        detect   phantom      deadlocks.    Can   detection    of        that deadlocks cannot arise in this system.
        phantom deadlocks be prevented?                            8.24  A set of processes D is in deadlock. It is observed
8.22    A road crosses a set of railway tracks at two                    that
        points. Gates are constructed on the road at each                a.  If a process Pj        D is aborted, a   set     of
        crossing to stop road traffic when a train is about                  processes D   D is still in deadlock.
        to pass. Train traffic is stopped if a car blocks a              b. If a process Pi  D is aborted, no deadlock
        track. Two way traffic of cars is permitted on                       exists in the system.
        the road and two-way train traffic is permitted                  State some possible reasons for this difference
        on the railway tracks.                                           and explain with the help of an example. [Hint:
          a. Discuss whether deadlocks can arise in the                  Refer to Eqs. (8.4) and (8.5).]
            road-and-train    traffic.  Would     there    be  no  8.25  After Algorithm 8.1 has determined that a set of
            deadlocks if both road and train traffic are                 processes D is in deadlock, one of the processes
            only one-way?                                                in D is aborted. What is the most efficient way to
          b. Design a set of simple rules to avoid dead-                 determine whether a deadlock exists in the new
            locks in the road-and-train traffic.                         state?
BIBLIOGRAPHY                                                                                                                  ·
Dijkstra    (1965),   Havender     (1968),   and  Habermann        2.  Coffman, E. G., M. S. Elphick, and A. Shoshani
(1969) are early works on deadlock handling. Dijkstra                  (1971): "System deadlocks," Computing Surveys,
(1965) and Habermann (1969) discuss the banker's algo-                 3 (2), 67­78.
rithm. Coffman et al. (1971) discusses the deadlock                3.  Dijkstra, E. W. (1965) : "Cooperating sequential
detection algorithm for a system containing multiple-                  processes," Technical report EWD­123,
instance resources. Holt (1972) provided a graph theo-                 Technlogical University, Eindhoven.
retic characterization for deadlocks. Isloor and Mars-             4.  Habermann, A. N. (1969): "Prevention of System
land (1980) is a good survey paper on this topic. Zobel                deadlocks," Communications of the ACM, 12 (7),
(1983)  is  an   extensive    bibliography.     Howard     (1973)      373­377.
discusses   the  practical    deadlock    handling  approach       5.  Habermann, A. N. (1973): "A new approach to
described in Section 8.8. Tay and Loke (1995) and Levine               avoidance of system deadlocks," in Lecture notes
(2003) discuss characterization of deadlocks.                          in Computer Science, Vol. 16, Springer-Verlag.
    Bach (1986) describes deadlock handling in Unix.               6.  Havender, J. W. (1968): "Avoiding deadlock in
                                                                       multitasking systems," IBM Systems Journal,
                                                                       7 (2), 74­84.
1.  Bach, M. J. (1986): The Design of the Unix                     7.  Holt, R. C. (1972): "Some deadlock properties of
    Operating System, Prentice Hall, Englewood                         computer systems," Computing Surveys, 4 (3),
    Cliffs, N. J.                                                      179­196.



314  Part 2           Process Management
8.   Howard, J. H. (1973): "Mixed solutions to the          resources," IEEE Transactions on Software
     deadlock problem," Communications of the ACM,          Engineering, 5 (5), 465­471.
     6 (3), 427­430.                                   12.  Tay, Y. C., and W. T. Loke (1995): "On Deadlocks
9.   Isloor, S. S., and T. A. Marsland (1980): "The         of exclusive AND-requests for resources,"
     deadlock problem--an overview," Computer,              Distributed Computing, Springer Verlag, 9, 2,
     13 (9), 58­70.                                         77­94.
10.  Levine, G. (2003): "Defining deadlock,"           13.  Zobel, D. (1983): "The deadlock problem--a
     Operating Systems Review, 37, 1.                       classifying bibliography," Operating Systems
11.  Rypka, D. J., and A. P. Lucido (1979): "Deadlock       Review, 17 (4), 6­15.
     detection and avoidance for shared logical
