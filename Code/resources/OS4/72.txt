Computing Environments and Nature of Computations
A computing environment consists of a computer system, its interfaces with other
systems, and the services provided by its operating system to its users and their
programs. Computing environments evolve continuously to provide better quality
of service to users; however, the operating system has to perform more com-
plex tasks as computer systems become more powerful, their interfaces with I/O
devices and with other computer systems become more complex, and its users
demand new services.
                                                                                                51



52  Part 1  Overview
                      The nature of computations in a computing environment, and the manner in
            which users realize them, depends on features of the computing environment.
            In a typical modern computing environment, a user initiates diverse activi-
            ties simultaneously; e.g., he may run a mail handler, edit a few files, initiate
            computations, listen to music or watch a video, and browse the Internet at
            the same time. The operating system has to provide the resources required by
            each of these activities, such as the CPU and memory, and I/O devices located
            either within the same computer system or in another computer system that
            can be accessed over the Internet, so that the activities progress to the user's
            satisfaction.
                      We will begin the discussion of operating systems by taking a quick look at
            how computing environments evolved to their present form.
            Noninteractive Computing Environments      These are the earliest forms of com-
            puting environments. In these environments, a user submits both a computation
            in the form of a program and its data together to the operating system. The com-
            putation is performed by the operating system and its results are presented back
            to the user. The user has no contact with the computation during its execution.
            Hence these computations can be viewed as passive entities, to be interpreted
            and realized by the operating system. Examples of noninteractive computations
            are scientific computations involving number crunching and database updates
            performed overnight. In these computing environments, the operating system
            focuses on efficient use of resources.
                      Computations used in a noninteractive environment are in the form of a
            program or a job. A program is a set of functions or modules that can be exe-
            cuted by itself. A job is a sequence of programs that together achieve a desired
            goal; a program in a job is executed only if previous programs in the job have
            executed successfully. For example, consider compilation, linking, and execution
            of a C++ program. A job to achieve these actions would consist of execution
            of a C++ compiler, followed by execution of a linker to link the program with
            functions from libraries, followed by execution of the linked program. Here, link-
            ing is meaningful only if the program is compiled successfully, and execution is
            meaningful only if linking is successful.
            Interactive Computing Environments         In these computing environments, a user
            may interact with a computation while it is in progress. The nature of an inter-
            action between a user and his computation depends on how the computation is
            coded; e.g., a user may input the name of a data file to a computation during its
            execution, or may directly input some data to it, and the computation may display
            a result after processing the data. The operating system focuses on reducing the
            average amount of time required to implement an interaction between a user and
            his computation.
                      A user also interacts with the OS to initiate a computation, typically each user
            command to the OS calls for separate execution of a program. Here the notion
            of a job is not important because a user would himself consider the dependence
            of programs while issuing the next command. For example, if a C++ program
            is to be compiled, linked, and executed, a user would attempt linking only if



                                                      Chapter 3      Overview of Operating  Systems  53
Table 3.1    Computations in an OS
Computation  Description
Program      A program is a set of functions or modules, including some
             functions or modules obtained from libraries.
Job          A job is a sequence of programs that together achieve a
             common goal. It is not meaningful to execute a program in a
             job unless previous programs in the job have been executed
             successfully.
Process      A process is an execution of a program.
Subrequest   A subrequest is the presentation of a computational
             requirement by a user to a process. Each subrequest produces a
             single response, which consists of a set of results or actions.
the program had compiled successfully. Hence operating systems for interactive
environments deal exclusively with execution of programs, not jobs. OS literature
uses the term process for an execution of a program in an interactive environment.
In principle, the term process is applicable in both noninteractive and interactive
environments. However, we will follow the convention and use it only in the
context of interactive computing environments.
A user's interaction with a process consists of presentation of a computational
requirement--a subrequest--by the user to the process, and a response by the
process. Depending on the nature of a subrequest, the response may be in the form
of a set of results, or a set of actions such as file operations or database updates.
Table 3.1 describes the program, job, process, and subrequest computations.
Real-Time, Distributed, and Embedded Environments     Some computations have
special requirements, hence special computing environments are developed to
service them. A real-time computation is one that works under specific time con-
straints, so its actions are effective only if they are completed within a specified
interval of time. For example, a computation that periodically samples the data
from an instrument and stores the samples in a file must finish storing a sam-
ple before it is due to take the next sample. The operating system in a real-time
environment uses special techniques to ensure that computations are completed
within their time constraints. The distributed computing environment enables a
computation to use resources located in several computer systems through a net-
work. In the embedded computing environment, the computer system is a part of
a specific hardware system, such as a household appliance, a subsystem of an
automobile, or a handheld device such as a personal digital assistant (PDA), and
runs computations that effectively control the system. The computer is typically
an inexpensive one with a minimal configuration; its OS has to meet the time
constraints arising from the nature of the system being controlled.
Modern Computing Environments  To support diverse applications, the comput-
ing environment of a modern computer has features of several of the computing
environments described earlier. Consequently, its operating system has to employ
