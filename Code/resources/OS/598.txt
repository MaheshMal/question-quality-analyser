Characteristics of Embedded Operating Systems

      A simple embedded system, with simple functionality, may be controlled by a
      special-purpose program or set of programs with no other software. Typically,
      more complex embedded systems include an OS. Although it is possible in
      principle to use a general-purpose OS, such as Linux, for an embedded system,
      constraints of memory space, power consumption, and real-time requirements
      typically dictate the use of a special-purpose OS designed for the embedded
      system environment.

   The following are some of the unique characteristics and design requirements
for embedded operating systems:
·  Real-time operation: In many embedded systems, the correctness of a compu-
   tation depends, in part, on the time at which it is delivered. Often, real-time
   constraints are dictated by external I/O and control stability requirements.
·  Reactive operation: Embedded software may execute in response to external
   events. If these events do not occur periodically or at predictable intervals, the
   embedded software may need to take into account worst-case conditions and
   set priorities for execution of routines.
·  Configurability: Because of the large variety of embedded systems, there is
   a large variation in the requirements, both qualitative and quantitative, for
   embedded OS functionality. Thus, an embedded OS intended for use on a
   variety of embedded systems must lend itself to flexible configuration so that
   only the functionality needed for a specific application and hardware suite is
   provided. [MARW06] gives the following examples. The linking and load-
   ing functions can be used to select only the necessary OS modules to load.
   Conditional compilation can be used. If an object-oriented structure is used,
   proper subclasses can be defined. However, verification is a potential prob-
   lem for designs with a large number of derived tailored operating systems.
   Takada cites this as a potential problem for eCos [TAKA01].
·  I/O device flexibility: There is virtually no device that needs to be supported
   by all versions of the OS, and the range of I/O devices is large. [MARW06]
   suggests that it makes sense to handle relatively slow devices such as disks and
   network interfaces by using special tasks instead of integrating their drives into
   the OS kernel.
·  Streamlined protection mechanisms: Embedded systems are typically designed
   for a limited, well-defined functionality. Untested programs are rarely added
   to the software. After the software has been configured and tested, it can be
   assumed to be reliable. Thus, apart from security measures, embedded sys-
   tems have limited protection mechanisms. For example, I/O instructions need
   not be privileged instructions that trap to the OS; tasks can directly perform
   their own I/O. Similarly, memory protection mechanisms can be minimized.
   [MARW06] provides the following example. Let switch correspond to the
   memory-mapped I/O address of a value that needs to be checked as part of an
   I/O operation. We can allow the I/O program to use an instruction such as load
   register, switch to determine the current value. This approach is prefer-
   able to the use of an OS service call, which would generate overhead for saving
   and restoring the task context.
·  Direct use of interrupts: General-purpose operating systems typically do not
   permit any user process to use interrupts directly. [MARW06] lists three
   reasons why it is possible to let interrupts directly start or stop tasks (e.g., by
   storing the task's start address in the interrupt vector address table) rather than
   going through OS interrupt service routines: (1) Embedded systems can be
   considered to be thoroughly tested, with infrequent modifications to the OS or

        application code; (2) protection is not necessary, as discussed in the preceding
        bullet item; and (3) efficient control over a variety of devices is required.
        There are two general approaches to developing an embedded OS. The
     first approach is to take an existing OS and adapt it for the embedded applica-
     tion. The other approach is to design and implement an OS intended solely for
     embedded use.2
     Adapting an Existing Commercial Operating System
     An existing commercial OS can be used for an embedded system by adding real-
     time capability, streamlining operation, and adding necessary functionality. This
     approach typically makes use of Linux, but FreeBSD, Windows, and other general-
     purpose operating systems have also been used. Such operating systems are typically
     slower and less predictable than a special-purpose embedded OS. An advantage of
     this approach is that the embedded OS derived from a commercial general-purpose
     OS is based on a set of familiar interfaces, which facilitates portability.
        The disadvantage of using a general-purpose OS is that it is not optimized
     for real-time and embedded applications. Thus, considerable modification may be
     required to achieve adequate performance. In particular, a typical OS optimizes for
     the average case rather than the worst case for scheduling, usually assigns resources
     on demand, and ignores most if not all semantic information about an application.
     Purpose-Built Embedded Operating System
     A significant number of operating systems have been designed from the ground up
     for embedded applications. Two prominent examples of this latter approach are
     eCos and TinyOS, both of which are discussed in this chapter.
        Typical characteristics of a specialized embedded OS include the following:
     ·  Has a fast and lightweight process or thread switch
     ·  Scheduling policy is real time and dispatcher module is part of scheduler
        instead of separate component.
     ·  Has a small size
     ·  Responds to external interrupts quickly; typical requirement is response time
        of less than 10 s
     ·  Minimizes intervals during which interrupts are disabled
     ·  Provides fixed or variable-sized partitions for memory management as well as
        the ability to lock code and data in memory
     ·  Provides special sequential files that can accumulate data at a fast rate
        To deal with timing constraints, the kernel
     · Provides bounded execution time for most primitives
     · Maintains a real-time clock
     2Much of the discussion in the remainder of Section 13.2 is based on course notes on embedded systems
     from Prof. Rajesh Gupta, University of California at San Diego.

      ·  Provides for special alarms and time-outs
      ·  Supports real-time queuing disciplines such as earliest deadline first and
         primitives for jamming a message into the front of a queue
      ·  Provides primitives to delay processing by a fixed amount of time and to
         suspend/resume execution
         The characteristics just listed are common in embedded operating systems with
      real-time requirements. However, for complex embedded systems, the requirement
      may emphasize predictable operation over fast operation, necessitating different
      design decisions, particularly in the area of task scheduling.
