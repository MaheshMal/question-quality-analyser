Windows Memory Management

     The Windows virtual memory manager controls how memory is allocated and how
     paging is performed. The memory manager is designed to operate over a vari-
     ety of platforms and to use page sizes ranging from 4 Kbytes to 64 Kbytes. Intel
     7The page cache has properties similar to a disk buffer, described in this chapter, as well as a disk cache,
     described in Chapter 11. We defer a discussion of the Linux page cache to Chapter 11.

and AMD64 platforms have 4 Kbytes per page and Intel Itanium platforms have
8 Kbytes per page.
Windows Virtual Address Map
On 32-bit platforms, each Windows user process sees a separate 32-bit address space,
allowing 4 Gbytes of virtual memory per process. By default, half of this memory is
reserved for the OS, so each user actually has 2 Gbytes of available virtual address
space and all processes share most of the upper 2 Gbytes of system space when
running in kernel-mode. Large memory intensive applications, on both clients and
servers, can run more effectively using 64-bit Windows. Other than netbooks, most
modern PCs use the AMD64 processor architecture which is capable of running as
either a 32-bit or 64-bit system.
   Figure 8.26 shows the default virtual address space seen by a normal 32-bit
user process. It consists of four regions:
·  0x00000000 to 0x0000FFFF: Set aside to help programmers catch NULL-
   pointer assignments.
·  0x00010000 to 0x7FFEFFFF: Available user address space. This space is
   divided into pages that may be loaded into main memory.
   64-Kbyte region for             0
   NULL-pointer assignments
   (inaccessible)
                                            2-Gbyte user
                                            address space
                                            (unreserved, usable)
   64-Kbyte region for
   bad-pointer assignments
   (inaccessible)
                                            2-Gbyte region for
                                            the operating system
                                            (inaccessible)
                         0xFFFFFFFF
   Figure 8.26           Windows Default 32-Bit Virtual Address Space

     ·  0x7FFF0000   to       0x7FFFFFFF:      A  guard  page  inaccessible  to    the  user.
        This page makes it easier for the OS to check on out-of-bounds pointer
        references.
     ·  0x80000000 to 0xFFFFFFFF: System address space. This 2-Gbyte process is
        used for the Windows Executive, Kernel, HAL, and device drivers.
     ·  On 64-bit platforms, 8 Tbytes of user address space is available in Windows 7.
     Windows Paging
     When a process is created, it can in principle make use of the entire user space of
     almost 2 Gbytes (or 8 Tbytes on 64-bit Windows). This space is divided into fixed-
     size pages, any of which can be brought into main memory, but the OS manages the
     addresses in contiguous regions allocated on 64-Kbyte boundaries. A region can be
     in one of three states:
     ·  Available: addresses not currently used by this process.
     ·  Reserved: addresses that the virtual memory manager has set aside for a proc-
        ess so they cannot be allocated to another use (e.g., saving contiguous space
        for a stack to grow).
     ·  Committed: addresses that the virtual memory manager has initialized for use
        by the process to access virtual memory pages. These pages can reside either
        on disk or in physical memory. When on disk they can be either kept in files
        (mapped pages) or occupy space in the paging file (i.e., the disk file to which it
        writes pages when removing them from main memory).
        The distinction between reserved and committed memory is useful because
     it (1) reduces the amount of total virtual memory space needed by the system,
     allowing the page file to be smaller; and (2) allows programs to reserve addresses
     without making them accessible to the program or having them charged against
     their resource quotas.
        The resident set management scheme used by Windows is variable allocation,
     local scope (see Table 8.5). When a process is first activated, it is assigned data struc-
     tures to manage its working set. As the pages needed by the process are brought
     into physical memory the memory manager uses the data structures to keep track
     of the pages assigned to the process. Working sets of active processes are adjusted
     using the following general conventions:
     ·  When main memory is plentiful, the virtual memory manager allows the resi-
        dent sets of active processes to grow. To do this, when a page fault occurs, a
        new physical page is added to the process but no older page is swapped out,
        resulting in an increase of the resident set of that process by one page.
     ·  When memory becomes scarce, the virtual memory manager recovers mem-
        ory for the system by removing less recently used pages out of the working sets
        of active processes, reducing the size of those resident sets.
     ·  Even when memory is plentiful, Windows watches for large processes that
        are rapidly increasing their memory usage. The system begins to remove

        pages that have not been recently used from the process. This policy makes
        the system more responsive because a new program will not suddenly cause a
        scarcity of memory and make the user wait while the system tries to reduce the
        resident sets of the processes that are already running.
