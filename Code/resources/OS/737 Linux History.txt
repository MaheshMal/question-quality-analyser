 linux looks and feels much like any other unix system indeed unix compatibility has been a major design goal of the linux project. however linux is much younger than most unix systems. its development began in when a finnish student linus torvalds wrote and christened linux a small but self contained kernel for the processor the first true bit processor in intel's range of pc compatible cpus. early in its development the linux source code was made available free on the internet. as a result linux's history has been one of collaboration by many users from all around the world corresponding almost exclusively over the internet. from an initial kernel that partially implemented a small subset of chapter the linux system the unix system services the linux system has grown to include much iffnix functionality. in its early days linux development revolved largely around the central operating system kernel the core privileged executive that manages all system resources and that interacts directly with the computer hardware. we need much more than this kernel to produce a full operating system of course. it is useful to make the distinction between the linux kernel and a linux system. the linux kernel is an entirely original piece of software developed from scratch by the linux community. the linux system as we know it today includes a multitude of components some written from scratch others borrowed from other development projects and still others created in collaboration with other teams. the basic linux system is a standard environment for applications and user programming but it does not enforce any standard means of managing the available functionality as a whole. as linux has matured a need has arisen for another layer of functionality on top of the linux system. this need has been met by various linux distributions. a linux distribution includes all the standard components of the linux system plus a set of administrative tools to simplify the initial installation and subsequent upgrading of linux and to manage installation and removal of other packages on the system. a modern distribution also typically includes tools for management of file systems creation and management of user accounts administration of networks web browsers word processors and so on. . . the linux kernel the first linux kernel released to the public was version . dated may . it had no networking ran only on compatible intel processors and pc hardware and had extremely limited device driver support. the virtual memory subsystem was also fairly basic and included no support for memorymapped files however even this early incarnation supported shared pages with copy on write. the only file system supported was the minix file system the first linux kernels were cross developed on a minix platform. however the kernel did implement proper unix processes with protected address spaces. the next milestone version linux . was released on march . this release culminated three years of rapid development of the linux kernel. perhaps the single biggest new feature was networking . included support for unix's standard tcp ip networking protocols as well as a bsd compatible socket interface for networking programming. device driver support was added for running ip over an ethernet or using ppp or slip protocols over serial lines or modems. the . kernel also included a new much enhanced file system without the limitations of the original minix file system and supported a range of scsi controllers for high performance disk access. the developers extended the virtual memory subsystem to support paging to swap files and memory mapping of arbitrary files but only read only memory mapping was implemented in . . a range of extra hardware support was also included in this release. although still restricted to the intel pc platform hardware support had grown to include floppy disk and cd rom devices as well as sound cards a range of mice and international keyboards. floating point emulation was provided . linux history in the kernel for users who had no math coprocessor system v unix style interprocess communication ipc including shared memory semaphores and message queues was implemented. simple support for dynamically loadable and unloadable kernel modules was supplied as well. at this point development started on the . kernel stream but numerous bug fix patches were released subsequently against . . a pattern was adopted as the standard numbering convention for linux kernels. kernels with an odd minor version number such as . . and . are development kernels evennumbered minor version numbers are stable production kernels. updates against the stable kernels are intended only as remedial versions whereas the development kernels may include newer and relatively untested functionality. in march the . kernel was released. this release did not offer nearly the same improvement in functionality as the . release but it did support a much wider variety of hardware including the new pci hardware bus architecture. developers added another pc specific feature support for the cpu's virtual mode to allow emulation of the dos operating system for pc computers. they also updated the networking stack to provide support for the ipx protocol and made the ip implementation more complete by including accounting and firewalling functionality. the . kernel was the final pc only linux kernel. the source distribution for linux . included partially implemented support for sparc alpha and mips cpus but full integration of these other architectures did not begin until after the . stable kernel was released. the linux . release concentrated on wider hardware support and more complete implementations of existing functionality. much new functionality was under development at the time but integration of the new code into the main kernel source code had been deferred until after the stable . kernel had been released. as a result the . development stream saw a great deal of new functionality added to the kernel. this work was finally released as linux . in june . this release was given a major version number increment on account of two major new capabilities support for multiple architectures including a fully bit native alpha port and support for multiprocessor architectures. linux distributions based on . are also available for the motorola series processors and for sun's sparc systems. a derived version of linux running on top of the mach microkernel also runs on pc and powermac systems. the changes in . did not stop there. the memory management code was substantially improved to provide a unified cache for file system data independent of the caching of block devices. as a result of this change the kernel offered greatly increased file system and virtual memory performance. for the first time file system caching was extended to networked file systems and writable memory mapped regions also were supported. the . kernel also included much improved tcp ip performance and a number of new networking protocols were added including appletalk ax. amateur radio networking and isdn support. the ability to mount remote netware and smb microsoft lanmanager network volumes was added. other major improvements in . were support for internal kernel threads for handling dependencies between loadable modules and for automatic loading of modules on demand. dynamic configuration of the kernel at run time was much improved through a new standardized configuration interface. chapter the linux system additional new features included file system quotas and posix compatible real time process scheduling classes. improvements continued with the release of linux . in january . a port for ultrasparc systems was added. networking was enhanced with more flexible firewalling better routing and traffic management and support for tcp large window and selective acks. acorn apple and nt disks could now be read and nfs was enhanced and a kernel mode nfs daemon added. signal handling interrupts and some i o were locked at a finer level than before to improve symmetric multiprocessor smp performance. advances in the . and . releases of the kernel include increased support for smp systems journaling file systems and enhancements to the memorymanagement system. the process scheduler has been modified in version . providing an efficient scheduling algorithm. in addition the linux . kernel is now preemptive allowing a process to be preempted while running in kernel mode. . . the linux system in many ways the linux kernel forms the core of the linux project but other components make up the complete linux operating system. whereas the linux kernel is composed entirely of code written from scratch specifically for the linux project much of the supporting software that makes up the linux system is not exclusive to linux but is common to a number of unix like operating systems. in particular linux uses many tools developed as part of berkeley's bsd operating system mit's x window system and the free software foundation's gnu project. this sharing of tools has worked in both directions. the main system libraries of linux were originated by the gnu project but the linux community greatly improved the libraries by addressing omissions inefficiencies and bugs. other components such as the gnu c compiler gcc were already of sufficiently high quality to be used directly in linux. the networkingadministration tools under linux were derived from code first developed for . bsd but more recent bsd derivatives such as freebsd have borrowed code from linux in return. examples include the intel floating point emulation math library and the pc sound hardware device drivers. the linux system as a whole is maintained by a loose network of developers collaborating over the internet with small groups or individuals having responsibility for maintaining the integrity of specific components. a small number of public internet file transfer protocol ftp archive sites act as de facto standard repositories for these components. the file system hierarchy standard document is also maintained by the linux community as a means of keeping compatibility across the various system components. this standard specifies the overall layout of a standard linux file system it determines under which directory names configuration files libraries system binaries and run time data files should be stored. . . linux distributions in theory anybody can install a linux system by fetching the latest revisions of the necessary system components from the ftp sites and compiling them. in linux's early days this operation was often precisely what a linux user . linux history had to carry out. as linux has matured however various individuals and groups have attempted to make this job less painful by providing a standard precompiled set of packages for easy installation. these collections or distributions include much more than just the basic linux system. they typically include extra system installation and management utilities as well as precompiled and ready to install packages of many of the common unix tools such as news servers web browsers text processing and editing tools and even games. the first distributions managed these packages by simply providing a means of unpacking all the files into the appropriate places. one of the important contributions of modern distributions however is advanced package management. today's linux distributions include a package tracking database that allows packages to be installed upgraded or removed painlessly. the sls distribution dating back to the early days of linux was the first collection of linux packages that was recognizable as a complete distribution. although it could be installed as a single entity sls lacked the packagemanagement tools now expected of linux distributions. the slackware distribution represented a great improvement in overall quality even though it also had poor package management it is still one of the most widely installed distributions in the linux community. since slackware's release many commercial and noncommercial linux distributions have become available. red hat and debian are particularly popular distributions the first comes from a commercial linux support company and the second from the free software linux community. other commercially supported versions of linux include distributions from caldera craftworks and workgroup solutions. a large linux following in germany has resulted in several dedicated german language distributions including versions from suse and unifix. there are too many linux distributions in circulation for us to list all of them here. the variety of distributions does not prohibit compatibility across linux distributions however. the rpm package file format is used or at least understood by the majority of distributions and commercial applications distributed in this format can be installed and run on any distribution that can accept rpm files. . . linux licensing the linux kernel is distributed under the gnu general public license gpl the terms of which are set out by the free software foundation. linux is not public domain software. public domain implies that the authors have waived copyright rights in the software but copyright rights in linux code are still held by the code's various authors. linux is free software however in the sense that people can copy it modify it use it in any manner they want and give away their own copies without any restrictions. the main implications of linux's licensing terms are that nobody using linux or creating her own derivative of linux a legitimate exercise can make the derived product proprietary software released under the gpl cannot be redistributed as a binary only product. if you release software that includes any components covered by the gpl then under the gpl you must make source code available alongside any binary distributions. this restriction does chapter the linux system not prohibit making or even selling binary only software distributions as long as anybody who receives binaries is also given the opportunity to get source code for a reasonable distribution charge. 