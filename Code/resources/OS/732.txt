Key Terms, Review Questions, and Problems

Key Terms
applications programming          Client                          distributed message passing
     interface                    client/server                   failback
Beowulf                           cluster                         failover

fat client                            message                          server
file cache consistency                middleware                       thin client
graphical user interface              remote procedure call (RPC)
Review Questions
            16.1  What is client/server computing?
            16.2  What distinguishes client/server computing from any other form of distributed data
                  processing?
            16.3  What is the role of a communications architecture such as TCP/IP in a client/server
                  environment?
            16.4  Discuss the rationale for locating applications on the client, the server, or split between
                  client and server.
            16.5  What are fat clients and thin clients, and what are the differences in philosophy of the
                  two approaches?
            16.6  Suggest pros and cons for fat client and thin client strategies.
            16.7  Explain the rationale behind the three-tier client/server architecture.
            16.8  What is middleware?
            16.9  Because we have standards such as TCP/IP, why is middleware needed?
16.10             List some benefits and disadvantages of blocking and nonblocking primitives for
                  message passing.
16.11             List some benefits and disadvantages of nonpersistent and persistent binding for RPCs.
16.12             List some benefits and disadvantages of synchronous and asynchronous RPCs.
16.13             List and briefly define four different clustering methods.
Problems
16.1  Let   be the percentage of program code that can be executed simultaneously by n
      computers in a cluster, each computer using a different set of parameters or initial
      conditions. Assume that the remaining code must be executed sequentially by a single
      processor. Each processor has an execution rate of x MIPS.
      a.   Derive an expression for the effective MIPS rate when using the system for
           exclusive execution of this program, in terms of n,  , and x.
      b.   If n  16 and x  4 MIPS, determine the value of                 that will yield a system
           performance of 40 MIPS.
16.2  An application program is executed on a nine-computer cluster. A benchmark program takes time T on this cluster. Further, 25% of T is time in which the application
      is running simultaneously on all nine computers. The remaining time, the application
      has to run on a single computer.
      a.   Calculate the effective speedup under the aforementioned condition as compared
           to executing the program on a single computer. Also calculate, the percentage of
           code that has been parallelized (programmed or compiled so as to use the cluster
           mode) in the preceding program.
      b.   Suppose that we are able to effectively use 18 computers rather than 9 computers on the parallelized portion of the code. Calculate the effective speedup that is
           achieved.
16.3  The following FORTRAN program is to be executed on a computer, and a parallel
      version is to be executed on a 32-computer cluster.

         L1:          DO 10 I = 1, 1024
         L2:          SUM(I) = 0
         L3:          DO 20 J = 1, I
         L4: 20 SUM(I) = SUM(I) + I
         L5: 10 CONTINUE
     Suppose lines 2 and 4 each take two machine cycle times, including all processor and
     memory-access activities. Ignore the overhead caused by the software loop control
     statements (lines 1, 3, 5) and all other system overhead and resource conflicts.
     a.  What is the total execution time (in machine cycle times) of the program on a
         single computer?
     b.  Divide the I-loop iterations among the 32 computers as follows: Computer 1
         executes the first 32 iterations (I  1 to 32), processor 2 executes the next 32
         iterations, and so on. What are the execution time and speedup factor compared
         with part (a)? (Note that the computational workload, dictated by the J-loop, is
         unbalanced among the computers.)
     c.  Explain how to modify the parallelizing to facilitate a balanced parallel execution of all the computational workload over 32 computers. A balanced load
         means an equal number of additions assigned to each computer with respect to
         both loops.
     d.  What is the minimum execution time resulting from the parallel execution on 32
         computers? What is the resulting speedup over a single computer?
