 if a computer system has multiple users and allows the concurrent execution of multiple processes then access to data must be regulated. for that purpose mechanisms ensure that files memory segments cpu and other resources can be operated on by only those processes that have gained proper authorization from the operating system. for example memory addressing hardware ensures that a process can execute only within its own address space. the timer ensures that no process can gain control of the cpu without eventually relinquishing control. device control registers are not accessible to users so the integrity of the various peripheral devices is protected. protection then is any mechanism for controlling the access of processes or users to the resources defined by a computer system. this mechanism must . protection and security provide means for specification of the controls to be imposed and means for enforcement. protection can improve reliability by detecting latent errors at the interfaces between component subsystems. early detection of interface errors can often prevent contamination of a healthy subsystem by another subsystem that is malfunctioning. an unprotected resource cannot defend against use or misuse by an unauthorized or incompetent user. a protection oriented system provides a means to distinguish between authorized and unauthorized usage as we discuss in chapter . a system can have adequate protection but still be prone to failure and allow inappropriate access. consider a user whose authentication information her means of identifying herself to the system is stolen. her data could be copied or deleted even though file and memory protection are working. it is the job of security to defend a system from external and internal attacks. such attacks spread across a huge range and include viruses and worms denial ofservice attacks which use all of a system's resources and so keep legitimate users out of the system identity theft and theft of service unauthorized use of a system . prevention of some of these attacks is consider an operatingsystem function on some systems while others leave the prevention to policy or additional software. due to the alarming rise in security incidents operatingsystem security features represent a fast growing area of research and of implementation. security is discussed in chapter . protection and security require the system to be able to distinguish among all its users. most operating systems maintain a list of user names and associated user identifiers user ids . in windows nt parlance this is a security id sid . these numerical ids are unique one per user. when a user logs in to the system the authentication stage determines the appropriate user id for the user. that user id is associated with all of the user's processes and threads. when an id needs to be user readable it is translated back to the user name via the user name list. in some circumstances we wish to distinguish among sets of users rather than individual users. for example the owner of a file on a unix system may be allowed to issue all operations on that file whereas a selected set of users may only be allowed to read the file. to accomplish this we need to define a group name and the set of users belonging to that group. group functionality can be implemented as a system wide list of group names and group identifiers. a user can be in one or more groups depending on operating system design decisions. the user's group ids are also included in every associated process and thread. in the course of normal use of a system the user id and group id for a user are sufficient. however a user sometimes needs to escalate privileges to gain extra permissions for an activity. the user may need access to a device that is restricted for example. operating systems provide various methods to allow privilege escalation. on unix for example the setuid attribute on a program causes that program to run with the user id of the owner of the file rather than the current user's id. the process runs with this effective uid until it turns off the extra privileges or terminates. consider an example of how this is done in solaris . user pbg has user id and group id which are assigned via etc passwd pbg x export home pbg usr bin bash chapter introduction