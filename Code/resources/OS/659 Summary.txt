 venus manages two separate caches one for status and the other for .data. it uses a simple least recently used lru algorithm to keep each of them bounded in size. when a file is flushed from the cache venus notifies the appropriate server to remove the callback for this file. the status cache is kept in virtual memory to allow rapid servicing of stat file status returning system calls. the data cache is resident on the local disk but the unix i o buffering mechanism does some caching of disk blocks in memory that is transparent to venus. a single client level process on each file server services all file requests from clients. this process uses a lightweight process package with non preemptible scheduling to service many client requests concurrently. the rfc package is integrated with the lightweight process package thereby allowing the file server to concurrently make or service one rpc per lightweight process. the rpc package is built on top of a low level datagram abstraction. whole file transfer is implemented as a side effect of the rpc calls. one rpc connection exists per client but there is no a priori binding of lightweight processes to these connections. instead a pool of lightweight processes services client requests on all connections. the use of a single multithreaded server process allows the caching of data structures needed to service requests. on the negative side a crash of a single server process has the disastrous effect of paralyzing this particular server. . summary a dfs is a file service system whose clients servers and storage devices are dispersed among the sites of a distributed system. accordingly service activity has to be carried out across the network instead of a single centralized data repository there are multiple independent storage devices. ideally a dfs should look to its clients like a conventional centralized file system. the multiplicity and dispersion of its servers and storage devices should be made transparent. that is the client interface of a dfs should not distinguish between local and remote files. it is up to the dfs to locate the files and to arrange for the transport of the data. a transparent dfs facilitates client mobility by bringing the client's environment to the site where the client logs in. there are several approaches to naming schemes in a dfs. in the simplest approach files are named by some combination of their host name and local name which guarantees a unique system wide name. another approach popularized by nfs provides a means to attach remote directories to local directories thus giving the appearance of a coherent directory tree. requests to access a remote file are usually handled by two complementary methods. with remote service requests for accesses are delivered to the server. the server machine performs the accesses and their results are forwarded back to the client. with caching if the data needed to satisfy the access request are not already cached then a copy of the data is brought from the server to the client. accesses are performed on the cached copy. the idea is to retain recently accessed disk blocks in the cache so that repeated accesses to the same information can be handled locally without additional network traffic. a replacement policy is used to keep the cache size bounded. the chapter distributed file systems problem of keeping the cached copies consistent with the master file fe the cache consistency problem. there are two approaches to server side information. either the server tracks each file the client accesses or it simply provides blocks as the client requests them without knowledge of their use. these approaches are the stateful versus stateless sendee paradigms. replication of files on different machines is a useful redundancy for improving availability. multimachine replication can benefit performance too since selecting a nearby replica to serve an access request results in shorter service time. afs is a feature rich dfs characterized by location independence and location transparency. it also imposes significant consistency semantics. caching and replication are used to improve performance. exercises . what are the benefits of a dfs compared with a file system in a centralized system? . which of the example dfss discussed in this chapter would handle a large multiclient database application most efficiently? explain your answer. . discuss whether afs and nfs provide the following a location transparency and b location independence. . under what circumstances would a client prefer a locationtransparent dfs? under what circumstances would she prefer a location independent dfs? discuss the reasons for these preferences. . what aspects of a distributed system would you select for a system running on a totally reliable network? . consider afs which is a stateful distributed file system. what actions need to be performed to recover from a server crash in order to preserve the consistency guaranteed by the system? . compare and contrast the techniques of caching disk blocks locally on a client system and remotely on a server. . afs is designed to support a large number of clients. discuss three techniques used to make afs a scalable system. . discuss the advantages and disadvantages of performing path name translation by having the client ship the entire path to the server requesting a translation for the entire path name of the file. . what are the benefits of mapping objects into virtual memory as apollo domain does? what are the drawbacks? . describe some of the fundamental differences between afs and nfs see chapter . bibliographical notes . discuss whether clients in the following systems can obtain inconsistent or stale data from the file server and if so under what scenarios this could occur. a. afs b. sprite c.nfs bibliographical notes discussions concerning consistency and recovery control for replicated files were offered by davcev and burkhard . management of replicated files in a unix environment was covered by brereton and purdin et al. . wah discussed the issue of file placement on distributed computer systems. a detailed survey of mainly centralized file servers was given in svobodova . sun's network file system nfs was presented by callaghan and sandberg et al. . the afs system was discussed by morris et al. howard et al. and satyanarayanan . information about openafs is available from http www.openafs.org many different and interesting dfss were not covered in detail in this text including unix united sprite and locus. unix united was described by brownbridge et al. . the locus system was discussed by popek and walker . the sprite system was described by ousterhout et al. and nelson et al. . distributed file systems for mobile storage devices were discussed in kistler and satyanarayanan and sobti et al. . considerable research has also been performed on cluster based distributed file systems anderson et al. lee and thekkath thekkath et al. and anderson et al. . distributed storage systems for large scale wide area settings were presented in dabek et al. and kubiatowicz et al. 