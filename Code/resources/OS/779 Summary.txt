 fsuid and fsgid process properties are used when access rights are granted to files. the appropriate property is set every time the effective uid or gid is set. however the fsuid and fsgid can be set independently of the effective ids allowing a process to access files on behalf of another user without taking on the identity of that other user in any other way. specifically server processes can use this mechanism to serve files to a certain user without the process becoming vulnerable to being killed or suspended by that user. finally linux provides a mechanism for flexible passing of rights from one program to another a mechanism that has become common in modern versions of unix. when a local network socket has been set up between any two processes on the system either of those processes may send to the other process a file descriptor for one of its open files the other process receives a duplicate file descriptor for the same file. this mechanism allows a client to pass access to a single file selectively to some server process without granting that process any other privileges. for example it is no longer necessary for a print server to be able to read all the files of a user who submits a new print job the print client could simply pass the server file descriptors for any files to be printed denying the server access to any of the user's other files. . summary linux is a modern free operating system based on unix standards. it has been designed to run efficiently and reliably on common pc hardware it also runs on a variety of other platforms. it provides a programming interface and user interface compatible with standard unix systems and can run a large number of unix applications including an increasing number of commercially supported applications. linux has not evolved in a vacuum. a complete linux system includes many components that were developed independently of linux. the core linux operating system kernel is entirely original but it allows much existing free unix software to run resulting in an entire unix compatible operating system free from proprietary code. the linux kernel is implemented as a traditional monolithic kernel for performance reasons but it is modular enough in design to allow most drivers to be dynamically loaded and unloaded at run time. linux is a multiuser system providing protection between processes and running multiple processes according to a time sharing scheduler. newly created processes can share selective parts of their execution environment with their parent processes allowing multithreaded programming. interprocess communication is supported by both system v mechanisms message queues semaphores and shared memory and bsd's socket interface. multiple networking protocols can be accessed simultaneously through the socket interface. to the user the file system appears as a hierarchical directory tree that obeys unix semantics. internally linux uses an abstraction layer to manage multiple different file systems. device oriented networked and virtual file systems are supported. device oriented file systems access disk storage through a page cache that is unified with the virtual memory system. chapter the linux system the memory management system uses page sharing and copy on write to minimize the duplication of data shared by different processes. pages are loaded on demand when they are first referenced and are paged back out to backing store according to an lfu algorithm if physical memory needs to be reclaimed. exercises . what are the advantages and disadvantages of writing an operating system in a high level language such as c? . in what circumstances is the system call sequence f ork exec most appropriate? when is vforko preferable? . what socket type should be used to implement an intercomputer file transfer program? what type should be used for a program that periodically tests to see whether another computer is up on the netwrork? explain your answer. . linux runs on a variety of hardware platforms. what steps must the linux developers take to ensure that the system is portable to different processors and memory management architectures and to minimize the amount of architecture specific kernel code? . what are the advantages and disadvantages of making only some of the symbols defined inside a kernel accessible to a loadable kernel module? . what are the primary goals of the conflict resolution mechanism used by the linux kernel for loading kernel modules? . discuss how the clone operation supported by linux is used to support both processes and threads. . would one classify linux threads as user level threads or as kernel level threads? support your answer with the appropriate arguments. . what extra costs are incurred by the creation and scheduling of a process compared with the cost of a cloned thread? . the linux scheduler implements soft real time scheduling. what features necessary for certain real time programming tasks are missing? how might they be added to the kernel? . under what circumstances would an user process request an operation that results in the allocation of a demand zero memory region? . what scenarios would cause a page of memory to be mapped into an user program's address space with the copy on write attribute enabled? . in linux shared libraries perform many operations central to the operating system. what is the advantage of keeping this functionality out of the kernel? are there any drawbacks? explain your answer. . the directory structure of a linux operating system could comprise of files corresponding to different file systems including the linux proc bibliographical notes file system. what are the implications of having to support different file system types on the structure of the limix kernel? . in what ways does the linux setuid feature differ from the setuid feature in standard unix? . the linux source code is freely and widely available over the internet or from cd rom vendors. what are three implications of this availability for the security of the linux system? bibliographical notes the linux system is a product of the internet as a result much of the available documentation on linux is available in some form on the internet. the following key sites reference most of the useful information available the linux cross reference pages at http lxr.linux.no maintain current listings of the linux kernel browsable via the web and fully crossreferenced. linux hq at http www.linuxhq.com hosts a large amount of information relating to the linux .x kernels. this site also includes links to the home pages of most linux distributions as well as archives of the major mailing lists. the linux documentation project at http sunsite.unc.edu linux lists manybooks on linux that are available in source format as part of the linux documentation project. the project also hosts the linux how to guides which contain a series of hints and tips relating to aspects of linux. the kernel hackers' guide is an internet based guide to kernel internals in general. this constantly expanding site is located at http www.redhat.com hypernews get khg.html. the kernel newbies website http www.kernelnewbies.org provides a resource for introducing the linux kernel to newcomers. many mailing lists devoted to linux are also available. the most important are maintained by a mailing list manager that can be reached at the e mail address maj ordomoovger. rutgers . edu. send e mail to this address with the single line help in the mail's body for information on how to access the list server and to subscribe to any lists. finally the linux system itself can be obtained over the internet. complete linux distributions can be obtained from the home sites of the companies concerned and the linux community also maintains archives of current system components at several places on the internet. the most important are these ftp tsx ll.mit.edu pub linux ftp sunsite.unc.edu pub linux ftp linux .kernel. org pub linux in addition to investigating internet resources you can read about the internals of the linux kernel in bovet and cesati and love . mnc owsxp the microsoft