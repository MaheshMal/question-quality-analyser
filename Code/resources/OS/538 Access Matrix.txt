 our model of protection can be viewed abstractly as a matrix called an access matrix. the rows of the access matrix represent domains and the columns represent objects. each entry in the matrix consists of a set of access rights. because the column defines objects explicitly we can omit the object name from the access right. the entry access defines the set of operations that a process executing in domain dj can invoke on object or to illustrate these concepts we consider the access matrix shown in figure . . there are four domains and four objects three files f f f and one laser printer. a process executing in domain d can read files fj and f . a process executing in domain d has the same privileges as one executing in domain d but in addition it can also write onto files f and f?. note that the laser printer can be accessed only by a process executing in domain dofigure . access matrix. . access matrix the access matrix scheme provides us with the mechanism for specifying a variety of policies. the mechanism consists of implementing the access matrix and ensuring that the semantic properties we have outlined indeed hold. more specifically we must ensure that a process executing in domain d can access only those objects specified in row and then only as allowed by the access matrix entries. the access matrix can implement policy decisions concerning protection. the policy decisions involve which rights should be included in the z' ' th entry. we must also decide the domain in which each process executes. this last policy is usually decided by the operating system. the users normally decide the contents of the access matrix entries. when a user creates a new object o the column is added to the access matrix with the appropriate initialization entries as dictated by the creator. the user may decide to enter some rights in some entries in column and other rights in other entries as needed. the access matrix provides an appropriate mechanism for defining and implementing strict control for both the static and dynamic association between processes and domains. wthen we switch a process from one domain to another we are executing an operation switch on an object the domain . we can control domain switching by including domains among the objects of the access matrix. similarly when we change the content of the access matrix we are performing an operation on an object the access matrix. again we can control these changes by including the access matrix itself as an object. actually since each entry in the access matrix may be modified individually we must consider each entry in the access matrix as an object to be protected. now we need to consider only the operations possible on these new objects domains and the access matrix and decide how we want processes to be able to execute these operations. processes should be able to switch from one domain to another. domain switching from domain d to domain d is allowed if and only if the access right switch e access ' . thus in figure . a process executing in domain d can switch to domain d or to domain d . a process in domain d can switch to d and one in domain d can switch to domain d . object f i laser domain ' printer read rti swifcfi l pf n ! swiich react swiiah vyfilf yfjte figure . access matrix of figure . with domains as objects. chapter protection iobject a n l . . . c pjegt ! . . . . ... . i . . . . . k. . x ctaftiai n i i i i i xl a i... illwrites jilii ' ' ' f' si ' ' ' ' ' ' ' ' ' ' .jlrbab . j f '' ''' ''' ''' '' ... rseuil.i. b figure . access matrix with copy rights. allowing controlled change in the contents of the access matrix entries requires three additional operations copy owner and control. we examine these operations next. the ability to copy an access right from one domain or row of the access matrix to another is denoted by an asterisk appended to the access right. the copy right allows the copying of the access right only within the column that is for the object for which the right is defined. for example in figure . a a process executing in domain d can copy the read operation into any entry associated with file f . hence the access matrix of figure . a can be modified to the access matrix shown in figure . b . this scheme has two variants . a right is copied from access to access c it is then removed from access . this action is a transfer of a right rather than a copy. . propagation of the copy right may be limited. that is when the right r is copied from access y to access t only the right r not r is created. a process executing in domain dk cannot further copy the right r. a system may select only one of these three copy rights or it may provide all three by identifying them as separate rights copy transfer and limited copy. we also need a mechanism to allow addition of new rights and removal of some rights. the owner right controls these operations. if access includes the oivncr right then a process executing in domain d can add and remove any right in any entry in column '. for example in figure . a domain d is the owner of f and thus can add and delete any valid right in column f . . access matrix s . . . ! . . . p . . . . j . . ' . . . . .... . . . i ..m. z . ...lit? .. i..hi . .. rs.. . . .... domain n lfllllijif!fill!' r ii i i i i. i ! i i ! i i i i i i !mi i tieacl n ii write i imi ii. jii wrjte l l b figure . access matrix with owner rights. similarly domain d is the owner of f and f and thus can add and remove any valid right within these two columns. thus the access matrix of figure . a can be modified to the access matrix shown in figure . b . the copy and owner rights allow a process to change the entries in a column. a mechanism is also needed to change the entries in a row. the control right is applicable only to domain objects. if access includes the control right then a process executing in domain d. can remove any access right from row '. for example suppose that in figure . we include the control right in access d d . then a process executing in domain dt could modify domain d as shown in figure . . the copy and owner rights provide us with a mechanism to limit the propagation of access rights. however they do not give us the appropriate tools for preventing the propagation or disclosure of information. the problem of guaranteeing that no information initially held in an object can migrate outside of its execution environment is called the confinement problem. this problem is in general unsolvable see bibliographical notes for references . these operations on the domains and the access matrix are not in themselves important but they illustrate the ability of the access matrix model to allow the implementation and control of dynamic protection requirements. new objects and new domains can be created dynamically and included in the access matrix model. however we have shown only that the basic mechanism chapter protection figure . modified access matrix of figure . . is here system designers and users must make the policy decisions concerning which domains are to have access to which objects in which ways