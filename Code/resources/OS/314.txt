Solaris Thread Synchronization Primitives

     In addition to the concurrency mechanisms of UNIX SVR4, Solaris supports four
     thread synchronization primitives:
     路  Mutual exclusion (mutex) locks
     路  Semaphores
     路  Multiple readers, single writer (readers/writer) locks
     路  Condition variables
        Solaris implements these primitives within the kernel for kernel threads; they
     are also provided in the threads library for user-level threads. Figure 6.15 shows
     the data structures for these primitives. The initialization functions for the primi-
     tives fill in some of the data members. Once a synchronization object is created,
     there are essentially only two operations that can be performed: enter (acquire
     lock) and release (unlock). There are no mechanisms in the kernel or the threads
     library to enforce mutual exclusion or to prevent deadlock. If a thread attempts to
     access a piece of data or code that is supposed to be protected but does not use the
     appropriate synchronization primitive, then such access occurs. If a thread locks
     an object and then fails to unlock it, no kernel action is taken.
        All of the synchronization primitives require the existence of a hardware
     instruction that allows an object to be tested and set in one atomic operation.
     Mutual Exclusion Lock
     A mutex is used to ensure that only one thread at a time can access the resource
     protected by the mutex. The thread that locks the mutex must be the one that
     unlocks it. A thread attempts to acquire a mutex lock by executing the mutex_
     enter primitive. If mutex_enter cannot set the lock (because it is already set
     by another thread), the blocking action depends on type-specific information
     stored in the mutex object. The default blocking policy is a spinlock: A blocked
     thread polls the status of the lock while executing in a busy waiting loop.
     An interrupt-based blocking mechanism is optional. In this latter case, the
     mutex includes a turnstile          id that identifies a queue of threads sleeping on
     this lock.

                                                        Type (1 octet)
Owner (3 octets)                                        wlock (1 octet)
Lock (1 octet)                                          Waiters (2 octets)
Waiters (2 octets)                                      Union (4 octets)
                                                        (statistic pointer or
Type-specific info (4 octets)                           number of write requests)
(possibly a turnstile id,
             lock type filler,
or statistics pointer)
                                                        Thread owner (4 octets)
(a) MUTEX lock
                                                        (c) Reader/writer lock
Type (1 octet)
wlock (1 octet)
Waiters (2 octets)                                      Waiters (2 octets)
                                                        (d) Condition variable
Count (4 octets)
(b) Semaphore
Figure 6.15  Solaris Synchronization Data Structures
             The operations on a mutex lock are:
             mutex_enter()              Acquires the lock, potentially blocking if it is already
                                               held
             mutex_exit()               Releases the lock, potentially unblocking a waiter
             mutex_tryenter()           Acquires the lock if it is not already held
The mutex_tryenter() primitive provides a nonblocking way of performing
the mutual exclusion function. This enables the programmer to use a busy-wait
approach for user-level threads, which avoids blocking the entire process because
one thread is blocked.
Semaphores
Solaris provides classic counting semaphores, with the following primitives:
             sema_p()           Decrements the semaphore, potentially blocking the thread
             sema_v()           Increments the semaphore, potentially unblocking a waiting
                                thread
             sema_tryp()        Decrements the semaphore if blocking is not required
Again, the sema_tryp() primitive permits busy waiting.

     Readers/Writer Lock
     The readers/writer lock allows multiple threads to have simultaneous read-only
     access to an object protected by the lock. It also allows a single thread to access the
     object for writing at one time, while excluding all readers. When the lock is acquired
     for writing it takes on the status of write  lock: All threads attempting access
     for reading or writing must wait. If one or more readers have acquired the lock, its
     status is read  lock. The primitives are as follows:
     rw_enter()            Attempts to acquire a lock as reader or writer.
     rw_exit()             Releases a lock as reader or writer.
     rw_tryenter()         Acquires the lock if blocking is not required.
     rw_downgrade()        A thread that has acquired a write lock converts it to a
                           read lock. Any waiting writer remains waiting until this
                           thread releases the lock. If there are no waiting writers,
                           the primitive wakes up any pending readers.
     rw_tryupgrade()       Attempts to convert a reader lock into a writer lock.
     Condition Variables
     A condition variable is used to wait until a particular condition is true. Condition
     variables must be used in conjunction with a mutex lock. This implements a monitor
     of the type illustrated in Figure 6.14. The primitives are as follows:
     cv_wait()             Blocks until the condition is signaled
     cv_signal()           Wakes up one of the threads blocked in cv_wait()
     cv_broadcast()        Wakes up all of the threads blocked in cv_wait()
     cv_wait() releases the associated mutex before blocking and reacquires
     it before returning. Because reacquisition of the mutex may be blocked by other
     threads waiting for the mutex, the condition that caused the wait must be retested.
     Thus, typical usage is as follows:
     mutex_enter(&m)
     *       *
     while           (some_condition)    {
             cv_wait(&cv,  &m);
     }
     *       *
     mutex_exit(&m);
     This allows the condition to be a complex expression, because it is protected by the
     mutex.
