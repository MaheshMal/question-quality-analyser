 . operating system examples in this section we describe how windows xp and solaris implement virtual memory. . . windows xp windows xp implements virtual memory using demand paging with clustering. clustering handles page faults by bringing in not only the faulting page but also several pages following the faulting page. when a process is first created it is assigned a working set minimum and maximum. the working set minimum is the minimum number of pages the process is guaranteed to have in memory. if sufficient memory is available a process may be assigned as many pages as its working set maximum. for most applications the value of working set minimum and working set maximum is and pages respectively. in some circumstances a process may be allowed to exceed its working set maximum. the virtual memory manager maintains a list of free page frames. associated with this list is a threshold value that is used to indicate whether sufficient free memory is available. if a page fault occurs for a process that is below its working set maximum the virtual memory manager allocates a page from this list of free pages. if a process is at its working set maximum and it incurs a page fault it must select a page for replacement using a local page replacement policy. when the amount of free memory falls below the threshold the virtual memory manager uses a tactic known as automatic working set trimming to restore the value above the threshold. automatic working set trimming works by evaluating the number of pages allocated to processes. if a process has been allocated more pages than its working set minimum the virtual memory manager removes pages until the process reaches its working set minimum. a process that is at its working set minimum may be allocated pages from the free page frame list once sufficient free memory is available. the algorithm used to determine which page to remove from a working set depends on the type of processor. on single processor x systems windows xp uses a variation of the clock algorithm discussed in section . . . . on alpha and multiprocessor x systems clearing the reference bit may require invalidating the entry in the translation look aside buffer on other processors. rather than incurring this overhead windows xp uses a variation on the fifo algorithm discussed in section . . . . . solaris in solaris when a thread incurs a page fault the kernel assigns a page to the faulting thread from the list of free pages it maintains. therefore it is imperative that the kernel keep a sufficient amount of free memory available. associated with this list of free pages is a parameter lotsfree that represents a threshold to begin paging. the lotsfree parameter is typically set to the size of the physical memory. four times per second the kernel checks whether the amount of free memory is less than lotsfree. if the number of free pages falls below lotsfree a process known as the pageout starts up. the pageout process is similar to the second chance algorithm described in section . . . except that it uses two hands while scanning pages rather than one as described in section chapter virtual memory fastscan siowscan minfree desfree lotsfree amount of free memory figure . solaris page scanner. . . . . the pageout process works as follows the front hand of the clock scans all pages in memory setting the reference bit to . later the back hand of the clock examines the reference bit for the pages in memory appending those pages whose bit is still set to to the free list and writing to disk their contents if modified. solaris maintains a cache list of pages that have been freed but have not yet been overwritten. the free list contains frames that have invalid contents. pages can be reclaimed from the cache list if they are accessed before being moved to the free list. the pageout algorithm uses several parameters to control the rate at which pages are scanned known as the scanrate . the scanrate is expressed in pages per second and ranges from siowscan to fastscan. when free memory falls below lotsfree scanning occurs at siowscan pages per second and progresses to fastscan depending on the amount of free memory available. the default value of siowscan is pages per second fastscan is typically set to the value total physical pages pages per second with a maximum of pages per second. this is shown in figure . with fastscan set to the maximum . the distance in pages between the hands of the clock is determined by a system parameter lumdspread. the amount of time between the front hand's clearing a bit and the back hand's investigating its value depends on the scanrate and the handspread. if scanrate is pages per second and lmndspread is pages seconds can pass between the time a bit is set by the front hand and the time it is checked by the back hand. however because of the demands placed on the memory system a scanrate of several thousand is not uncommon. this means that the amount of time between clearing and investigating a bit is often a few seconds. as mentioned above the pageout process checks memory four times per second. however if free memory falls below desfree figure . pageout will run times per second with the intention of keeping at least desfree free memory available. if the pageout process is unable to keep the amount