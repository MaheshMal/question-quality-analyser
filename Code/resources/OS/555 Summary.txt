 drotection . . i ! ! domain apie! t iii ii i ' ' ' ' ' ' ' ' ' socket rs s .? ! h i i permission f ? ? .l' t .i t . . . class i rfy.w v'a ' ' ' ' ' ' ' i 'm r ' ' r r . r. r r ' ' ' ' .' '.' . .' . . ' ' .' .i l fff . ! ' ' ' i ' . ' ' . . ' v r i !i h ! ! ! ! h n hi ! i .. ! ! . figure . stack inspection. of course for stack inspection to work a program must be unable to modify the annotations on its own stack frame or to do other manipulations of stack inspection. this is one of the most important differences between java and many other languages including c . a java program cannot directly access memory. rather it can manipulate only an object for which it has a reference. references cannot be forged and the manipulations are made only through well defined interfaces. compliance is enforced through a sophisticated collection of load time and run time checks. as a result an object cannot manipulate its run time stack because it cannot get a reference to the stack or other components of the protection system. more generally java's load time and run time checks enforce type safety of java classes. type safety ensures that classes cannot treat integers as pointers write past the end of an array or otherwise access memory in arbitrary ways. rather a program can access an object only via the methods defined on that object by its class. this is the foundation of java protection since it enables a class to effectively encapsulate and protect its data and methods from other classes loaded in the same jvm. for example a variable can be defined as p r i v a t e so that only the class that contains it can access it or p r o t e c t e d so that it can be accessed only by the class that contains it subclasses of that class or classes in the same package. type safety' ensures that these restrictions can be enforced. summary computer systems contain many objects and they need to be protected from misuse. objects may be hardware such as memory cpu time and i o devices or software such as files programs and semaphores . an access right is permission to perform an operation on an object. a domain is a set of access rights. processes execute in domains and may use any of the access rights in the domain to access and manipulate objects. during its lifetime a process may be either bound to a protection domain or allowed to switch from one domain to another. chapter protection the access matrix is a general model of protection that provides a mechanism for protection without imposing a particular protection policy on the system or its users. the separation of policy and mechanism is an important design property. the access matrix is sparse. it is normally implemented either as access lists associated with each object or as capability lists associated with each domain. we can include dynamic protection in the access matrix model by considering domains and the access matrix itself as objects. revocation of access rights in a dynamic protection model is typically easier to implement with an access list scheme than with a capability list. real systems are much more limited than the general model and tend to provide protection only for files. unix is representative providing read write and execution protection separately for the owner group and general public for each file. multjcs uses a ring structure in addition to file access. hydra the cambridge cap system and mach are capability systems that extend protection to user defined software objects. solaris implements the principle of least privilege via role based access control a form of the access matrix. language based protection provides finer grained arbitration of requests and privileges than the operating system is able to provide. for example a single java jvm can run several threads each in a different protection class. it enforces the resource requests tlirough sophisticated stack inspection and via the type safety of the language. exercises . consider the ring protection scheme in multics. if we were to implement the system calls of a typical operating system and store them in a segment associated with ring what should be the values stored in the ring field of the segment descriptor? what happens during a system call when a process executing in a higher numbered ring invokes a procedure in ring ? . the access control matrix could be used to determine whether a process can switch from say domain a to domain b and enjoy the access privileges of domain b. is this approach equivalent to including the access privileges of domain b in those of domain a? . consider a computer system in which ''computer games can be played by students only between p.m. and a.m. by faculty members between p.m. and a.m. and by the computer center staff at all times. suggest a scheme for implementing this policy efficiently. . what hardware features are needed in a computer system for efficient capability manipulation? can these be used for memory protection? . discuss the strengths and weaknesses of implementing an access matrix using access lists that are associated with objects. . discuss the strengths and weaknesses of implementing an access matrix using capabilities that are associated with domains. bibliographical notes . explain why a capability based system such as hydra provides greater flexibility than the ring protection scheme in enforcing protection policies. . discuss the need for rights amplification in hydra. how does this practice compare with the cross ring calls in a ring protection scheme? . what is the need to know principle? why is it important for a protection system to adhere to this principle? . discuss which of the following systems allow module designers to enforce the need to know principle. a. the multics ring protection scheme b. hydra's capabilities c. jvm's stack inspection scheme . describe how the java protection model would be sacrificed if a java program were allowed to directly alter the annotations of its stack frame. . how are the access matrix facility and the role based access control facility similar? how do they differ? . how does the principle of least privilege aid in the creation of protection systems? . how can systems that implement the principle of least privilege still have protection failures that lead to security violations? bibliographical notes the access matrix model of protection between domains and objects was developed by lampson and lampson . popek and saltzer and schroeder provided excellent surveys on the subject of protection. harrison et al. used a formal version of this model to enable them to prove properties of a protection system mathematically. the concept of a capability evolved from iliffe's and jodeit's codewords which were implemented in the rice university computer iliffe and jodeit . the term capability was introduced by dennis and horn . the hydra system was described by wulf et al. . the cap system was described by needham and walker . organick discussed the multics ring protection system. revocation was discussed by redell and fabry cohen and jefferson and ekanadham and bernstein . the principle of separation of policy and mechanism was advocated by the designer of hydra levin et al. . the confinement problem was first discussed by lampson and was further examined by lipner . the use of higher level languages for specifying access control was suggested first by morris who proposed the use of the s e a l and unseal operations discussed in section . . kieburtz and silberschatz kieburtz and silberschatz and mcgraw and andrews proposed various chapter protection language constructs for dealing with general dynamic resource nianagi ment schemes. jones and liskov considered how a static access control scheme can be incorporated in a programming language that supports abstract data types. the use of minimal operating system support to enforce protection was advocated by the exokernel project ganger et al. kaashoek et al. . extensibility of system code through language based protection mechanisms was discussed in bershad et al. b . other techniques for enforcing protection include sandboxing goldberg et al. and software fault isolation wahbe et al. b . the issues of lowering the overhead associated with protection costs and enabling user level access to networking devices were discussed in mccanne and jacobson and basu et al. . more detailed analyses of stack inspection including comparisons with other approaches to java security can be found in wallach et al. and gong etal. 