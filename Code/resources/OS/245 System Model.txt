 a system consists of a finite number of resources to be distributed among a number of competing processes. the resources are partitioned into several types each consisting of some number of identical instances. memory space cpu cycles files and i o devices such as printers and dvd drives are examples chapter deadlocks of resource types. if a system has two cpus then the resource type cpu has two instances. similarly the resource type printer may have five instances. if a process requests an instance of a resource type the allocation of any instance of the type will satisfy the request. if it will not then the instances are not identical and the resource type classes have not been defined properly. for example a system may have two printers. these two printers may be defined to be in the same resource class if no one cares which printer prints which output. however if one printer is on the ninth floor and the other is in the basement then people on the ninth floor may not see both printers as equivalent and separate resource classes may need to be defined for each printer. a process must request a resource before using it and must release the resource after using it. a process may request as many resources as it requires to carry out its designated task. obviously the number of resources requested may not exceed the total number of resources available in the system. in other words a process cannot request three printers if the system has only two. under the normal mode of operation a process may utilize a resource in only the following sequence . request. if the request cannot be granted immediately for example if the resource is being used by another process then the requesting process must wait until it can acquire the resource. . use the process can operate on the resource for example if the resource is a printer the process can print on the printer . . release. the process releases the resource. the request and release of resources are system calls as explained in chapter . examples are the request and release device open and close file and a l l o c a t e and free memory system calls. request and release of resources that are not managed by the operating system can be accomplished through the waito and signal operations on semaphores or through acquisition and release of a mutex lock. for each use of a kernelmanaged resource by a process or thread the operating system checks to make sure that the process has requested and has been allocated the resource. a system table records whether each resource is free or allocated for each resource that is allocated the table also records the process to which it is allocated. if a process requests a resource that is currently allocated to another process it can be added to a queue of processes waiting for this resource. a set of processes is in a deadlock state when every process in the set is waiting for an event that can be caused only by another process in the set. the events with which we are mainly concerned here are resource acquisition and release. the resources maybe either physical resources for example printers tape drives memory space and cpu cycles or logical resources for example files semaphores and monitors . however other types of events may result in deadlocks for example the pc facilities discussed in chapter . to illustrate a deadlock state consider a system with three cd rvv drives. suppose each of three processes holds one of these cd rw drives. if each process now requests another drive the three processes will be in a deadlock state. each is waiting for the event cd rvv is released which can be caused