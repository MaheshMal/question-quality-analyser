UNIX File Management

      In the UNIX file system, six types of files are distinguished:
      ·  Regular, or ordinary: Contains arbitrary data in zero or more data blocks.
         Regular files contain information entered in them by a user, an application
         program, or a system utility program. The file system does not impose any
         internal structure to a regular file but treats it as a stream of bytes.
      ·  Directory: Contains a list of file names plus pointers to associated inodes (index
         nodes), described later. Directories are hierarchically organized (Figure 12.6).

        Directory files are actually ordinary files with special write protection privileges
        so that only the file system can write into them, while read access is available to
        user programs.
     ·  Special: Contains no data but provides a mechanism to map physical devices
        to file names. The file names are used to access peripheral devices, such as
        terminals and printers. Each I/O device is associated with a special file, as
        discussed in Section 11.8.
     ·  Named pipes: As discussed in Section 6.7, a pipe is an interprocess communi-
        cations facility. A pipe file buffers data received in its input so that a process
        that reads from the pipe's output receives the data on a first-in-first-out basis.
     ·  Links: In essence, a link is an alternative file name for an existing file.
     ·  Symbolic links: This is a data file that contains the name of the file it is linked to.
        In this section, we are concerned with the handling of ordinary files, which
     correspond to what most systems treat as files.
     Inodes
     Modern UNIX operating systems support multiple file systems but map all of these
     into a uniform underlying system for supporting file systems and allocating disk
     space to files. All types of UNIX files are administered by the OS by means of
     inodes. An inode (index node) is a control structure that contains the key informa-
     tion needed by the operating system for a particular file. Several file names may be
     associated with a single inode, but an active inode is associated with exactly one file,
     and each file is controlled by exactly one inode.
        The attributes of the file as well as its permissions and other control infor-
     mation are stored in the inode. The exact inode structure varies from one UNIX
     implementation to another. The FreeBSD inode structure, shown in Figure 12.16,
     includes the following data elements:
     ·  The type and access mode of the file
     ·  The file's owner and group-access identifiers
     ·  The time that the file was created, when it was most recently read and written,
        and when its inode was most recently updated by the system
     ·  The size of the file in bytes
     ·  A sequence of block pointers, explained in the next subsection
     ·  The number of physical blocks used by the file, including blocks used to hold
        indirect pointers and attributes
     ·  The number of directory entries that reference the file
     ·  The kernel and user-settable flags that describe the characteristics of the file
     ·  The generation number of the file (a randomly selected number assigned to
        the inode each time that the latter is allocated to a new file; the generation
        number is used to detect references to deleted files)
     ·  The blocksize of the data blocks referenced by the inode (typically the same
        as, but sometimes larger than, the file system blocksize)

Mode                Data      Data                    Data
Owners (2)
                    Data
Timestamps (4)
                              Data                    Data                         Data
Size
Direct (0)          Data
Direct (1)                                            Data                         Data
                    Pointers
                              Pointers                Data                         Data
Direct (12)
Single indirect     Pointers
                              Pointers                                             Data
Double indirect
Triple indirect                                       Pointers
Block count                                                                        Data
Reference count
                              Pointers                Pointers
Flags (2)                                                                          Data
Generation number   Pointers
Blocksize                     Pointers                Pointers
                                                                                   Data
Extended attr size
Extended                                              Pointers
attribute                                                                          Data
blocks
Inode
Figure 12.16     Structure of FreeBSD Inode and File
· The size of the extended attribute information
· Zero or more extended attribute entries
              The blocksize value is typically the same as, but sometimes larger than, the file
system blocksize. On traditional UNIX systems, a fixed blocksize of 512 bytes was
used. FreeBSD has a minimum blocksize of 4,096 bytes (4 Kbytes); the blocksize
can be any power of 2 greater than or equal to 4,096. For typical file systems, the
blocksize is 8 Kbytes or 16 Kbytes. The default FreeBSD blocksize is 16 Kbytes.
              Extended attribute entries are variable-length entries used to store auxiliary
data that are separate from the contents of the file. The first two extended attributes
defined for FreeBSD deal with security. The first of these support access control

        lists; this is described in Chapter 15. The second defined extended attribute sup-
        ports the use of security labels, which are part of what is known as a mandatory
        access control scheme, also defined in Chapter 15.
                 On the disk, there is an inode table, or inode list, that contains the inodes of
        all the files in the file system. When a file is opened, its inode is brought into main
        memory and stored in a memory-resident inode table.
        File Allocation
        File allocation is done on a block basis. Allocation is dynamic, as needed, rather
        than using preallocation. Hence, the blocks of a file on disk are not necessarily con-
        tiguous. An indexed method is used to keep track of each file, with part of the index
        stored in the inode for the file. In all UNIX implementations, the inode includes a
        number of direct pointers and three indirect pointers (single, double, triple).
                 The FreeBSD inode includes 120 bytes of address information that is organ-
        ized as fifteen 64-bit addresses, or pointers. The first 12 addresses point to the first
        12 data blocks of the file. If the file requires more than 12 data blocks, one or more
        levels of indirection is used as follows:
            ·    The thirteenth address in the inode points to a block on disk that contains the
                 next portion of the index. This is referred to as the single indirect block. This
                 block contains the pointers to succeeding blocks in the file.
            ·    If the file contains more blocks, the fourteenth address in the inode points to
                 a double indirect block. This block contains a list of addresses of additional
                 single indirect blocks. Each of single indirect blocks, in turn, contains pointers
                 to file blocks.
            ·    If the file contains still more blocks, the fifteenth address in the inode points
                 to a triple indirect block that is a third level of indexing. This block points to
                 additional double indirect blocks.
                 All of this is illustrated in Figure 12.16. The total number of data blocks
        in a file depends on the capacity of the fixed-size blocks in the system. In
        FreeBSD, the minimum block size is 4 Kbytes, and each block can hold a total of
        512 block addresses. Thus, the maximum size of a file with this block size is over
        500 GB (Table 12.4).
                 This scheme has several advantages:
            1.   The inode is of fixed size and relatively small and hence may be kept in main
                 memory for long periods.
Table 12.4  Capacity of a FreeBSD File with 4-Kbyte Block Size
Level                             Number of Blocks              Number of Bytes
Direct                                                12                        48K
Single Indirect                                       512                       2M
Double Indirect                            512 × 512  256K                      1G
Triple Indirect                   512 × 256K  128M                              512G

2.  Smaller files may be accessed with little or no indirection, reducing processing
    and disk access time.
3.  The theoretical maximum size of a file is large enough to satisfy virtually all
    applications.
Directories
Directories are structured in a hierarchical tree. Each directory can contain files
and/or other directories. A directory that is inside another directory is referred to
as a subdirectory. As was mentioned, a directory is simply a file that contains a
list of file names plus pointers to associated inodes. Figure 12.17 shows the overall
structure. Each directory entry (dentry) contains a name for the associated file or
subdirectory plus an integer called the i-number (index number). When the file or
directory is accessed, its i-number is used as an index into the inode table.
Volume Structure
A UNIX file system resides on a single logical disk or disk partition and is laid out
with the following elements:
·   Boot block: Contains code required to boot the operating system
·   Superblock: Contains attributes and information about the file system, such as
    partition size, and inode table size
·   Inode table: The collection of inodes for each file
·   Data blocks: Storage space available for data files and subdirectories
             Inode table                                     Directory
                                                         i1  Name1
                                                         i2  Name2
                                                         i3  Name3
                                                         i4  Name4
    Figure 12.17           UNIX Directories and Inodes

     Traditional UNIX File Access Control
     Most UNIX systems depend on, or at least are based on, the file access control
     scheme introduced with the early versions of UNIX. Each UNIX user is assigned a
     unique user identification number (user ID). A user is also a member of a primary
     group, and possibly a number of other groups, each identified by a group ID. When
     a file is created, it is designated as owned by a particular user and marked with that
     user's ID. It also belongs to a specific group, which initially is either its creator's
     primary group, or the group of its parent directory if that directory has SetGID
     permission set. Associated with each file is a set of 12 protection bits. The owner ID,
     group ID, and protection bits are part of the file's inode.
     Nine of the protection bits specify read, write, and execute permission for the
     owner of the file, other members of the group to which this file belongs, and all
     other users. These form a hierarchy of owner, group, and all others, with the highest
     relevant set of permissions being used. Figure 12.18a shows an example in which the
     file owner has read and write access; all other members of the file's group have read
     access, and users outside the group have no access rights to the file. When applied to
     a directory, the read and write bits grant the right to list and to create/rename/delete
     files in the directory.5 The execute bit grants the right to search the directory for a
     component of a filename.
                                                        OGOtrwhoneureprcclclalasasssss
                                                        rw-  r--  ---
                               user:              :rw-
                               group: :r--
                               other: :---
     (a) Traditional UNIX approach (minimal access control list)
                                                        OGOtrwhoneureprcclclalasasssss
                                                        rw-  rw-  ---
                               user: :rw-
     Masked                    user:joe:rw-
     entries                   group: :r--
                               mask: :rw-
                               other: :---
                               (b) Extended access control list
     Figure 12.18                     UNIX File Access Control
     5Note that the permissions that apply to a directory are distinct from those that apply to any file or direc-
     tory it contains. The fact that a user has the right to write to the directory does not give the user the right
     to write to a file in that directory. That is governed by the permissions of the specific file. The user would,
     however, have the right to rename the file.

The remaining three bits define special additional behavior for files or direc-
tories. Two of these are the "set user ID" (SetUID) and "set group ID" (SetGID)
permissions. If these are set on an executable file, the operating system functions as
follows. When a user (with execute privileges for this file) executes the file, the sys-
tem temporarily allocates the rights of the user's ID of the file creator, or the file's
group, respectively, to those of the user executing the file. These are known as the
"effective user ID" and "effective group ID" and are used in addition to the "real
user ID" and "real group ID" of the executing user when making access control
decisions for this program. This change is only effective while the program is being
executed. This feature enables the creation and use of privileged programs that may
use files normally inaccessible to other users. It enables users to access certain files
in a controlled fashion. Alternatively, when applied to a directory, the SetGID per-
mission indicates that newly created files will inherit the group of this directory. The
SetUID permission is ignored.
The final permission bit is the "Sticky" bit. When set on a file, this originally
indicated that the system should retain the file contents in memory following execu-
tion. This is no longer used. When applied to a directory, though, it specifies that
only the owner of any file in the directory can rename, move, or delete that file. This
is useful for managing files in shared temporary directories.
One particular user ID is designated as "superuser." The superuser is exempt
from the usual file access control constraints and has systemwide access. Any
program that is owned by, and SetUID to, the "superuser" potentially grants unre-
stricted access to the system to any user executing that program. Hence, great care
is needed when writing such programs.
This access scheme is adequate when file access requirements align with users
and a modest number of groups of users. For example, suppose a user wants to give
read access for file X to users A and B and read access for file Y to users B and C.
We would need at least two user groups, and user B would need to belong to both
groups in order to access the two files. However, if there are a large number of
different groupings of users requiring a range of access rights to different files, then
a very large number of groups may be needed to provide this. This rapidly becomes
unwieldy and difficult to manage, even if possible at all.6 One way to overcome this
problem is to use access control lists, which are provided in most modern UNIX
systems.
A final point to note is that the traditional UNIX file access control scheme
implements a simple protection domain structure. A domain is associated with the
user, and switching the domain corresponds to changing the user ID temporarily.
Access Control Lists in UNIX
Many modern UNIX and UNIX-based operating systems support access control
lists, including FreeBSD, OpenBSD, Linux, and Solaris. In this section, we describe
the FreeBSD approach, but other implementations have essentially the same fea-
tures and interface. The feature is referred to as extended access control list, while
the traditional UNIX approach is referred to as minimal access control list.
6Most UNIX systems impose a limit on the maximum number of groups any user may belong to, as well
as to the total number of groups possible on the system.

           FreeBSD allows the administrator to assign a list of UNIX user IDs and
     groups to a file by using the setfacl command. Any number of users and groups
     can be associated with a file, each with three protection bits (read, write, execute),
     offering a flexible mechanism for assigning access rights. A file need not have an
     ACL but may be protected solely by the traditional UNIX file access mechanism.
     FreeBSD files include an additional protection bit that indicates whether the file
     has an extended ACL.
           FreeBSD and most UNIX implementations that support extended ACLs use
     the following strategy (e.g., Figure 12.18b):
       1.  The owner class and other class entries in the nine-bit permission field have
           the same meaning as in the minimal ACL case.
       2.  The group class entry specifies the permissions for the owner group for this
           file. These permissions represent the maximum permissions that can be
           assigned to named users or named groups, other than the owning user. In this
           latter role, the group class entry functions as a mask.
       3.  Additional named users and named groups may be associated with the file,
           each with a three-bit permission field. The permissions listed for a named
           user or named group are compared to the mask field. Any permission
           for the named user or named group that is not present in the mask field is
           disallowed.
           When a process requests access to a file system object, two steps are performed.
     Step 1 selects the ACL entry that most closely matches the requesting process. The
     ACL entries are looked at in the following order: owner, named users, (owning or
     named) groups, and others. Only a single entry determines access. Step 2 checks
     if the matching entry contains sufficient permissions. A process can be a member
     in more than one group; so more than one group entry can match. If any of these
     matching group entries contain the requested permissions, one that contains the
     requested permissions is picked (the result is the same no matter which entry is
     picked). If none of the matching group entries contains the requested permissions,
     access will be denied no matter which entry is picked.
