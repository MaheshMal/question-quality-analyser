Summary

     To use the processor and the I/O facilities efficiently, it is desirable to maintain as
     many processes in main memory as possible. In addition, it is desirable to free pro-
     grammers from size restrictions in program development.
        The way to address both of these concerns is virtual memory. With virtual
     memory, all address references are logical references that are translated at run time
     to real addresses. This allows a process to be located anywhere in main memory
     and for that location to change over time. Virtual memory also allows a process to
     be broken up into pieces. These pieces need not be contiguously located in main
     memory during execution and, indeed, it is not even necessary for all of the pieces
     of the process to be in main memory during execution.
        Two basic approaches to providing virtual memory are paging and segmen-
     tation. With paging, each process is divided into relatively small, fixed-size pages.
     Segmentation provides for the use of pieces of varying size. It is also possible to
     combine segmentation and paging in a single memory management scheme.
        A virtual memory management scheme requires both hardware and software
     support. The hardware support is provided by the processor. The support includes
     dynamic translation of virtual addresses to physical addresses and the generation
     of an interrupt when a referenced page or segment is not in main memory. Such an
     interrupt triggers the memory management software in the OS.
        A number of design issues relate to OS support for memory management:
     ·  Fetch policy: Process pages can be brought in on demand, or a prepaging pol-
        icy can be used, which clusters the input activity by bringing in a number of
        pages at once.
     ·  Placement policy: With a pure segmentation system, an incoming segment
        must be fit into an available space in memory.
     ·  Replacement policy: When memory is full, a decision must be made as to
        which page or pages are to be replaced.
     ·  Resident set management: The OS must decide how much main memory to
        allocate to a particular process when that process is swapped in. This can be a
        static allocation made at process creation time, or it can change dynamically.
     ·  Cleaning policy: Modified process pages can be written out at the time of
        replacement, or a precleaning policy can be used, which clusters the output
        activity by writing out a number of pages at once.
     ·  Load control: Load control is concerned with determining the number of
        processes that will be resident in main memory at any given time.

