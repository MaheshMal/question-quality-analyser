Summary

The computer system's interface to the outside world is its I/O architecture. This
architecture is designed to provide a systematic means of controlling interaction
with the outside world and to provide the operating system with the information it
needs to manage I/O activity effectively.
       The I/O function is generally broken up into a number of layers, with lower
layers dealing with details that are closer to the physical functions to be performed
and higher layers dealing with I/O in a logical and generic fashion. The result is that
changes in hardware parameters need not affect most of the I/O software.
       A key aspect of I/O is the use of buffers that are controlled by I/O utili-
ties rather than by application processes. Buffering smoothes out the differences
between the internal speeds of the computer system and the speeds of I/O devices.
The use of buffers also decouples the actual I/O transfer from the address space
of the application process. This allows the operating system more flexibility in
performing its memory-management function.
       The aspect of I/O that has the greatest impact on overall system performance
is disk I/O. Accordingly, there has been greater research and design effort in this
area than in any other kind of I/O. Two of the most widely used approaches to
improve disk I/O performance are disk scheduling and the disk cache.
       At any time, there may be a queue of requests for I/O on the same disk. It is
the object of disk scheduling to satisfy these requests in a way that minimizes the

     mechanical seek time of the disk and hence improves performance. The physical
     layout of pending requests plus considerations of locality come into play.
       A disk cache is a buffer, usually kept in main memory, that functions as a
     cache of disk blocks between disk memory and the rest of main memory. Because
     of the principle of locality, the use of a disk cache should substantially reduce the
     number of block I/O transfers between main memory and disk.
