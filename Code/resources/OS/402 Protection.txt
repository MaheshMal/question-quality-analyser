 when information is stored in a computer system we want to keep it safe from physical damage reliability and improper access protection . reliability is generally provided by duplicate copies of files. many computers have systems programs that automatically or through computer operator intervention copy disk files to tape at regular intervals once per day or week or month to maintain a copy should a file system be accidentally destroyed. file systems can be damaged by hardware problems such as errors in reading or writing power surges or failures head crashes dirt temperature extremes and vandalism. files may be deleted accidentally. bugs in the file system software can also cause file contents to be lost. reliability is covered in more detail in chapter . protection can be provided in many ways. for a small single user system we might provide protection by physically removing the floppy disks and locking them in a desk drawer or file cabinet. in a multiuser system however other mechanisms are needed. . . types of access the need to protect files is a direct result of the ability to access files. systems that do not permit access to the files of other users do not need protection. thus we could provide complete protection by prohibiting access. alternatively we could provide free access with no protection. both approaches are too extreme for general use. what is needed is controlled access. . protection protection mechanisms provide controlled access by limiting the types of file access that can be made. access is permitted or denied depending on several factors one of which is the type of access requested. several different types of operations may be controlled read. read from the file. write. write or rewrite the file. execute. load the file into memory and execute it. append. write new information at the end of the file. delete. delete the file and tree its space for possible reuse. list. list the name and attributes of the file. other operations such as renaming copying and editing the file may also be controlled. for many systems however these higher level functions may be implemented by a system program that makes lower level system calls. protection is provided at only the lower level. for instance copying a file may be implemented simply by a sequence of read requests. in this case a user with read access can also cause the file to be copied printed and so on. many protection mechanisms have been proposed. each has advantages and disadvantages and must be appropriate for its intended application. a small computer system that is used by only a few members of a research group for example may not need the same types of protection as a large corporate computer that is used for research finance and personnel operations. we discuss some approaches to protection in the following sections and present a more complete treatment in chapter . . . access control the most common approach to the protection problem is to make access dependent on the identity of the user. different users may need different types of access to a. file or directory. the most general scheme to implement identitydependent access is to associate with each file and directory an access control list acl specifying user names and the types of access allowed for each user. when a user requests access to a particular file the operating system checks the access list associated with that file. if that user is listed for the requested access the access is allowed. otherwise a protection violation occurs and the user job is denied access to the file. this approach has the advantage of enabling complex access methodologies. the main problem with access lists is their length. if we want to allow everyone to read a file we must list all users with read access. this technique has two undesirable consequences constructing such a list may be a tedious and unrewarding task especially if we do not know in advance the list of users in the system. the directory entry previously of fixed size now needs to be of variable size resulting in more complicated space management. chapter file system interface these problems can be resolved by use of a condensed version of the afccess list. to condense the length of the access control list many systems recognize three classifications of users in connection with each file owner. the user who created the file is the owner. group. a set of users who are sharing the file and need similar access is a group or work group. universe. all other users in the system constitute the universe. the most common recent approach is to combine access control lists with the more general and easier to implement owner group and universe accesscontrol scheme just described. for example solaris . and beyond use the three categories of access by default but allow access control lists to be added to specific files and directories when more fine grained access control is desired. to illustrate consider a person sara who is writing a new book. she has hired three graduate students jim dawn and jill to help with the project. the text of the book is kept in a file named book. the protection associated with this file is as follows sara should be able to invoke all operations on the file. jim dawn and jill should be able only to read and write the file they should not be allowed to delete the file. all other users should be able to read but not write the file. sara is interested in letting as many people as possible read the text so that she can obtain appropriate feedback. to achieve such protection we must create a new group say text with members jim dawn and jill. the name of the group text must then be associated with the file book and the access rights must be set in accordance with the policy we have outlined. now consider a visitor to whom sara would like to grant temporary access to chapter . the visitor cannot be added to the text group because that would give him access to all chapters. because a file can only be in one group another group cannot be added to chapter . with the addition of access control list functionality the visitor can be added to the access control list of chapter . for this scheme to work properly permissions and access lists must be controlled tightly. this control can be accomplished in several ways. for example in the unix system groups can be created and modified only by the manager of the facility or by any superuser . thus this control is achieved through human interaction. in the vms system the owner of the file can create and modify this list. access lists are discussed further in section . . . with the more limited protection classification only three fields are needed to define protection. often each field is a collection of bits and each bit either allows or prevents the access associated with it. for example the unfx system defines three fields of bits each rwx where r controls read access w controls write access and x controls execution. a separate field is kept for the file owner for the file's group and for all other users. in this scheme nine bits per file are . protection needed to record protection information. thus tor our example the protection fields for the file book are as follows for the owner sara all bits are set for the group text the r and w bits are set and for the universe only the r bit is set. one difficulty in combining approaches comes in the user interface. users must be able to tell when the optional acl perinissions are set on a file. in the solaris example a appends the regular permissions as in rw r r jim staff may filel a separate set of commands setf acl and g e t f a c l are used to manage the acls. windows xp users typically manage access control lists via the gui. figure . shows a file permission window on windows xp's ntfs file system. in this example user guest is specifically denied access to the file .lex. general security