 in chapter we introduced threads to the process model distinguishing between user level and kernel level threads. on operating systems that support them it is kernel level threads not processes that are being scheduled by the operating system. user level threads are managed by a thread library and the kernel is unaware of them. to run on a cpu user level threads must ultimately be mapped to an associated kernel level thread although this mapping may be indirect and may use a lightweight process lwp . in this section we explore scheduling issues involving user level and kernel level threads and offer specific examples of scheduling for pthreads. . . contention scope one distinction between user level and kernel level threads lies in how they are scheduled. on systems implementing the many to one section . . and many to many section . . models the thread library schedules user level threads to run on an available lwp a scheme known as process contention scope pcs since competition for the cpu takes place among threads belonging to the same process. when we say the thread library schedules user threads onto available lwps we do not mean that the thread is actually running on a cpu this would require the operating system to schedule the kernel thread onto a physical cpu. to decide which kernel thread to schedule onto a cpu the kernel uses system contention scope scs . competition for the cpu with scs scheduling takes place among all threads in the system. systems using the one to one model such as windows xp solaris and linux schedule threads using only scs. typically pcs is done according to priority the scheduler selects the runnable thread with the highest priority to run. user level thread priorities are set by the programmer and are not adjusted by the thread library although some thread libraries may allow the programmer to change the priority of a thread. it is important to note that pcs will typically preempt the thread currently running in favor of a higher priority thread however there is no guarantee of time slicing section . . among threads of equal priority. . . pthread scheduling we provided a sample posix pthread program in section . . along with an introduction to thread creation with pthreads. now we highlight the posix pthread api that allows specifying either pcs or scs during thread creation. pthreads identifies the following contention scope values pthread scopejprocess schedules threads using pcs scheduling. pthread scope system schedules threads using scs scheduling