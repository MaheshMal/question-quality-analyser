 when a detection algorithm determines that a deadlock exists several alternatives are available. one possibility is to inform the operator that a deadlock has occurred and to let the operator deal with the deadlock manually. another possibility is to let the system recover from the deadlock automatically. there are two options for breaking a deadlock. one is simply to abort one or more processes to break the circular wait. the other is to preempt some resources from one or more of the deadlocked processes. . . process termination to eliminate deadlocks by aborting a process we use one of two methods. in both methods the system reclaims all resources allocated to the terminated processes. abort all deadlocked processes. this method clearly will break the deadlock cycle but at great expense the deadlocked processes may have computed for a long time and the results of these partial computations must be discarded and probably will have to be recomputed later. abort one process at a time until the deadlock cycle is eliminated. this method incurs considerable overhead since after each process is aborted a deadlock detection algorithm must be invoked to determine whether any processes are still deadlocked. aborting a process may not be easy. if the process was in the midst of updating a file terminating it will leave that file in an incorrect state. similarly if the process was in the midst of printing data on a printer the system must reset the printer to a correct state before printing the next job. if the partial termination method is used then we must determine which deadlocked process or processes should be terminated. this determination is a policy decision similar to cpu scheduling decisions. the question is basically an economic one we should abort those processes whose termination will incur the minimum cost. unfortunately the term minimum cost is not a precise one. many factors may affect which process is chosen including . what the priority of the process is . how long the process has computed and how much longer the process will compute before completing its designated task . how many and what type of resources the process has used for example whether the resources are simple to preempt . how many more resources the process needs in order to complete . how many processes will need to be terminated . whether the process is interactive or batch