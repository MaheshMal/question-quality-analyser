Summary

     The OS must make three types of scheduling decisions with respect to the execu-
     tion of processes. Long-term scheduling determines when new processes are admit-
     ted to the system. Medium-term scheduling is part of the swapping function and
     determines when a program is brought partially or fully into main memory so that
     it may be executed. Short-term scheduling determines which ready process will
     be executed next by the processor. This chapter focuses on the issues relating to
     short-term scheduling.

        A variety of criteria are used in designing the short-term scheduler. Some of
     these criteria relate to the behavior of the system as perceived by the individual user
     (user oriented), while others view the total effectiveness of the system in meeting
     the needs of all users (system oriented). Some of the criteria relate specifically to
     quantitative measures of performance, while others are more qualitative in nature.
     From a user's point of view, response time is generally the most important char-
     acteristic of a system, while from a system point of view, throughput or processor
     utilization is important.
        A variety of algorithms have been developed for making the short-term sched-
     uling decision among all ready processes:
     ·  First-come-first-served: Select the process that has been waiting the longest
        for service.
     ·  Round robin: Use time slicing to limit any running process to a short burst of
        processor time, and rotate among all ready processes.
     ·  Shortest process next: Select the process with the shortest expected processing
        time, and do not preempt the process.
     ·  Shortest remaining time: Select the process with the shortest expected remain-
        ing process time. A process may be preempted when another process becomes
        ready.
     ·  Highest response ratio next: Base the scheduling decision on an estimate of
        normalized turnaround time.
     ·  Feedback: Establish a set of scheduling queues and allocate processes to
        queues based on execution history and other criteria.
        The choice of scheduling algorithm will depend on expected performance and
     on implementation complexity.
