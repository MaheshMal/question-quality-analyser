 individual user on a pc is a process. a system task such as sending utput to a printer can also be a process or at least part of one . for now you can consider a process to be a job or a time shared program but later you will learn that the concept is more general. as we shall see in chapter it is possible to provide system calls that allow processes to create subprocesses to execute concurrently. a process needs certain resources including cpu time memory files and i o devices to accomplish its task. these resources are either given to the process when it is created or allocated to it while it is running. in addition to the various physical and logical resources that a process obtains when it is created various initialization data input may be passed along. for example consider a process whose function is to display the status of a file on the screen of a terminal. the process will be given as an input the name of the file and will execute the appropriate instructions and system calls to obtain and display on the terminal the desired information. when the process terminates the operating system will reclaim any reusable resources. we emphasize that a program by itself is not a process a program is a passive entity such as the contents of a file stored on disk whereas a process is an active entity. a single threaded process has one program counter specifying the next instruction to execute. threads will be covered in chapter . the execution of such a process must be sequential. the cpu executes one instruction of the process after another until the process completes. further at any time one instruction at most is executed on behalf of the process. thus although two processes may be associated with the same program they are nevertheless considered two separate execution sequences. a multithreaded process has multiple program counters each pointing to the next instruction to execute for a given thread. a process is the unit of work in a system. such a system consists of a collection of processes some of which are operating system processes those that execute system code and the rest of which are user processes those that execute user code . all these processes can potentially execute concurrently by multiplexing the cpu among them on a single cpu for example. the operating system is responsible for the following activities in connection with process management creating and deleting both user and system processes suspending and resuming processes providing mechanisms for process synchronization providing mechanisms for process communication providing mechanisms for deadlock handling we discuss process management techniques in chapters through . . memory management as we discussed in section . . the main memory is central to the operation of a modern computer system. main memory is a large array of words or bytes chapter introduction ranging in size from hundreds of thousands to billions. each word or byte has its own address. main memory is a repository of quickly accessible data shared by the cpu and i o devices. the central processor reads instructions from main memory during the instruction fetch cycle and both reads and writes data from main memory during the data fetch cycle on a von neumann architecture . the main memory is generally the only large storage device that the cpu is able to address and access directly. for example for the cpu to process data from disk those data must first be transferred to main memory by cpu generated i o calls. in the same way instructions must be in memory for the cpu to execute them. for a program to be executed it must be mapped to absolute addresses and loaded into memory. as the program executes it accesses program instructions and data from memory by generating these absolute addresses. eventually the program terminates its memory space is declared available and the next program can be loaded and executed. to improve both the utilization of the cpu and the speed of the computer's response to its users general purpose computers must keep several programs in memory creating a need for memory management. many different memorymanagement schemes are used. these schemes reflect various approaches and the effectiveness of any given algorithm depends on the situation. in selecting a memory management scheme for a specific system we must take into account many factors especially on the hardware design of the system. each algorithm requires its own hardware support. the operating system is responsible for the following activities in connection with memory management keeping track of which parts of memory are currently being used and by whom deciding which processes or parts thereof and data to move into and out of memory allocating and deallocating memory space as needed memory management techniques will be discussed in chapters and