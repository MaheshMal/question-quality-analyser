 tunneling. this virus attempts to bypass detection by an antivirus scanner by installing itself in the interrupt handler chain. similar viruses install themselves in device drivers. multipartite. a virus of this type is able to infect multiple parts of a system including boot sectors memory and files. this makes it difficult to detect and contain. armored. an armored virus is coded to make itself hard for antivirus researchers to unravel and understand. it can also be compressed to avoid detection and disinfection. in addition virus droppers and other full files that are part of a virus infestation are frequently hidden via file attributes or unviewable file names. this vast variety of viruses is likely to continue to grow. in fact in a new and widespread virus was detected. it exploited three separate bugs for its operation. this virus started by infecting hundreds of windows servers including many trusted sites running microsoft internet information server iis . any vulnerable microsoft explorer web browser visiting those sites received a browser virus with any download. the browser virus installed several back door programs including a keystroke logger which records all things entered on the keyboard including passwords and credit card numbers . it also installed a daemon to allow unlimited remote access by an intruder and another that allowed an intruder to route spam through the infected desktop computer. generally viruses are the most disruptive security attack and because they are effective they will continue to be written and to spread. among the active debates within the computing community is whether a monoculture in which many systems run the same hardware operating system and or application software is increasing the threat of and damage caused by security intrusions. within the debate is the issue of whether or not there even exists a monoculture today consisting of microsoft products . . system and network threats program threats typically use a breakdown in the protection mechanisms of a system to attack programs. in contrast system and network threats involve the abuse of services and network connections. sometimes a system and network attack is used to launch a program attack and vice versa. system and network threats create a situation in which operating system resources and user files are misused. here we discuss some examples of these threats including worms port scanning and denial of service attacks. it is important to note that masquerading and replay attacks are also common over networks between systems. in fact these attacks are more effective and harder to counter when multiple systems are involved. for example within a computer the operating system usually can determine the sender and receiver of a message. even if the sender changes to the id of someone else there might be a record of that id change. when multiple systems are involved especially systems controlled by attackers then such tracing is much harder. chapter security the generalization is that sharing secrets to prove identity and as keys to encryption is required for authentication and encryption and that is easier in environments such as a single operating system in which secure sharing methods exist. these methods include shared memory and interprocess communications. creating secure communication and authentication is discussed in sections . and . . . . worms a worm is a process that uses the spawn mechanism to ravage system performance. the worm spawns copies of itself using up system resources and perhaps locking out all other processes. on computer networks worms are particularly potent since they may reproduce themselves among systems and thus shut down an entire network. such an event occurred in to unix systems on the internet causing millions of dollars of lost system and system administrator time. at the close of the workday on november robert tappan morris jr. a first year cornell graduate student unleashed a worm program on one or more hosts connected to the internet. targeting sun microsystems' sun workstations and vax computers running variants of version bsd unix the worm quickly spread over great distances within a few hours of its release it had consumed system resources to the point of bringing down the infected machines. although robert morris designed the self replicating program for rapid reproduction and distribution some of the features of the unix networking environment provided the means to propagate the worm throughout the system. it is likely that morris chose for initial infection an internet host left open for and accessible to outside users. from there the worm program exploited flaws in the unix operating system's security routines and took advantage of unix utilities that simplify resource sharing in local area networks to gain unauthorized access to thousands of other connected sites. morris's methods of attack are outlined next. rsh attack finger attack grappling y sendmail attack hook . r e q u e s t for worm wqrrti worm sent worm target system infected system figure . the morris internet worm. . system and network threats the worm was made up of two programs a grappling hook also called a bootstrap or vector program and the main program. named .c the grappling hook consisted of lines of c code compiled and run on each machine it accessed. once established on the computer system under attack the grappling hook connected to the machine where it originated and uploaded a copy of the main worm onto the hooked system figure . . the main program proceeded to search for other machines to which the newly infected system could connect easily. in these actions morris exploited the unix networking utility rsh for easy remote task execution. by setting up special files that list host login name pairs users can omit entering a password each time they access a remote account on the paired list. the worm searched these special files for site names that would allow remote execution without a password. where remote shells were established the worm program was uploaded and began executing anew. the attack via remote access was one of three infection methods built into the worm. the other two methods involved operating system bugs in the unix finger and sendmail programs. the finger utility functions as an electronic telephone directory the command finger user name hostname returns a person's real and login names along with other information that the user may have provided such as office and home address and telephone number research plan or clever quotation. finger runs as a background process or daemon at each bsd site and responds to queries throughout the internet. the worm executed a buffer overflow attack on f inger. the program queried finger with a byte string crafted to exceed the buffer allocated for input and to overwrite the stack frame. instead of returning to the main routine it was in before morris's call the finger daemon was routed to a procedure within the invading byte string now residing on the stack. the new procedure executed bin sh which if successful gave the worm a remote shell on the machine under attack. the bug exploited in sendmail also involved using a daemon process for malicious entry sendmail sends receives and routes electronic mail. debugging code in the utility permits testers to verify and display the state of the mail system. the debugging option was useful to system administrators and was often left on. morris included in his attack arsenal a call to debug that instead of specifying a user address as would be normal in testing issued a set of commands that mailed and executed a copy of the grappling hook program. once in place the main worm undertook systematic attempts to discover user passwords. it began by trying simple cases of no password or of passwords constructed of account user name combinations then used comparisons with an internal dictionary of favorite password choices and then went to the final stage of trying each word in the standard unix on line dictionary as a possible password. this elaborate and efficient three stage password cracking algorithm enabled the worm to gain access to other user accounts on the infected system. the worm then searched for rsh data files in these newly broken accounts and used them as described previously to gain access to user accounts on remote systems. chapter security with each new access the worm program searched for already active copies of itself. if it found one the new copy exited except in every seventh instance. had the worm exited on all duplicate sightings it might have remained undetected. allowing every seventh duplicate to proceed possibly to confound efforts to stop its spread by baiting with fake worms created a wholesale infestation of sun and vax systems on the internet. the very features of the unix network environment that assisted the worm's propagation also helped to stop its advance. ease of electronic communication mechanisms to copy source and binary files to remote machines and access to both source code and human expertise allowed cooperative efforts to develop solutions quickly. by the evening of the next day november methods of halting the invading program were circulated to system administrators via the internet. within days specific software patches for the exploited security flaws were available. why did morris unleash the worm? the action has been characterized as both a harmless prank gone awry and a serious criminal offense. based on the complexity of starting the attack it is unlikely that the worm's release or the scope of its spread was unintentional. the worm program took elaborate steps to cover its tracks and to repel efforts to stop its spread. yet the program contained no code aimed at damaging or destroying the systems on which it ran. the author clearly had the expertise to include such commands in fact data structures were present in the bootstrap code that could have been used to transfer trojan horse or virus programs. the behavior of the program may lead to interesting observations but it does not provide a sound basis for inferring motive. what is not open to speculation however is the legal outcome a federal court convicted morris and handed down a sentence of three years' probation hours of community service and a fine. morris's legal costs probably exceeded . security experts continue to evaluate methods to decrease or eliminate worms. a more recent event though shows that worms are still a fact of life on the internet. it also shows that as the internet grows the damage that even harmless worms can do also grows and can be significant. this example occurred during august . the fifth version of the sobig worm more properly known as 'iw .sobig.f mm was released by persons at this time unknown. it was the fastest spreading worm released to date at its peak infecting hundreds of thousands of computers and one in seventeen e mail messages on the internet. it clogged e mail inboxes slowed networks and took a huge number of hours to clean up. sobig.f was launched by being uploaded to a pornography newsgroup via an account created with a stolen credit card. it was disguised as a photo. the virus targeted microsoft windows systems and used its own smtp engine to e mail itself to all the addresses found on an infected system. it used a variety of subject lines to help avoid detection including thank you! ''your details and re approved. it also used a random address on the host as the from address making it difficult to determine from the message which machine was the infected source. sobig.f included an attachment for the target e mail reader to click on again with a variety of names. if this payload was executed it stored a program called w nppr .exe in the default windows directory along with a text file. it also modified the windows registry. . system and network threats the code included in the attachment was also programmed to periodically attempt to connect to one of twenty servers and download and execute a program from them. fortunately the servers were disabled before the code could be downloaded. the content of the program from these servers has not yet been determined. if the code was malevolent untold damage to a vast number of machines could have resulted. . . port scanning port scanning is not an attack but rather is a means for a cracker to detect a system's vulnerabilities to attack. port scanning typically is automated involving a tool that attempts to create a tcp ip connection to a specific port or a range of ports. for example suppose there is a known vulnerability or bug in sendmail. a cracker could launch a port seamier to try to connect to say port of a particular system or a range of systems. if the connection was successful the cracker or tool could attempt to communicate with the answering service to determine if it was indeed sendmail and if so if it was the version with the bug. now imagine a tool in which each bug of every service of every operating system was encoded. the tool could attempt to connect to every port of one or more systems. for every service that answered it could try to use each known bug. frequently the bugs are buffer overflows allowing the creation of a privileged command shell on the system. from there of course the cracker could install trojan horses back door programs and so on. there is no such tool but there are tools that perform subsets of that functionality. for example nmap from http www.insecure.org nmap is a very versatile open source utility for network exploration and security auditing. when pointed at a target it will determine what services are running including application names and versions. it can determine the host operating system. it can also provide information about defenses such as what firewalls are defending the target. it does not exploit any known bugs. nessus from http www.nessus.org performs a similar function but it has a database of bugs and their exploits. it can scan a range of systems determine the services running on those systems and attempt to attack all appropriate bugs. it generates reports about the results. it does not perform the final step of exploiting the found bugs but a knowledgeable cracker or a script kiddie could. because port scans are detectable see . . they frequently are launched from zombie systems. such systems are previously compromised independent systems that are serving their owners while being used for nefarious purposes including denial of service attacks and spam relay. zombies make crackers particularly difficult to prosecute because determining the source of the attack and the person that launched it is challenging. this is one of many reasons that inconsequential systems should also be secured not just systems containing valuable information or services. . . denial of service as mentioned earlier dos attacks are aimed not at gaining information or stealing resources but rather at disrupting legitimate use of a system or facility. most denial of service attacks involve systems that the attacker has chapter security not penetrated. indeed launching an attack that prevents legitimate use is frequently easier than breaking into a machine or facility. denial of service attacks are generally network based. they fall into two categories. the first case is an attack that uses so many facility resources that in essence no useful work can be done. for example a web site click could download a java applet that proceeds to vise all available cpu time or to infinitely pop up windows. the second case involves disrupting the network of the facility. there have been several successful denial of service attacks of this kind against major web sites. they result from abuse of some of the fundamental functionality of tcp ip. for instance if the attacker sends the part of the protocol that says i want to start a tcp connection ' but never follows with the standard the connection is now complete the result can be partially started tcp sessions. enough of these sessions can eat up all the network resources of the system disabling any further legitimate tcp connections. such attacks which can last hours or days have caused partial or full failure of attempts to use the target facility these attacks are usually stopped at the network level until the operating systems can be updated to reduce their vulnerability. generally it is impossible to prevent denial of service attacks. the attacks use the same mechanisms as normal operation. even more difficult to prevent and resolve are distributed denial of service attacks ddos . these attacks are launched from multiple sites at once toward a common target typically by zombies. sometimes a site does not even know it is under attack. it can be difficult to determine whether a system slowdown is just a surge in system use or an attack. consider that a successful advertising campaign that greatly increases traffic to a site could be considered a ddos. there are other interesting aspects of dos attacks. for example programmers and systems managers need to fully understand the algorithms and technologies they are deploying. if an authentication algorithm locks an account for a period of time after several incorrect attempts then an attacker could cause all authentication to be blocked by purposefully causing incorrect attempts to all accounts. similarly a firewall that automatically blocks certain kinds of traffic could be induced to block that traffic when it should not. finally computer science classes are notorious sources of accidental system dos attacks. consider the first programming exercises in which students learn to create subprocesses or threads. a common bug involves spawning subprocesses infinitely. the system's free memory and cpu resources don't stand a chance