Deadlock Prevention

     The strategy of deadlock prevention is, simply put, to design a system in such a
     way that the possibility of deadlock is excluded. We can view deadlock prevention
     methods as falling into two classes. An indirect method of deadlock prevention
     is to prevent the occurrence of one of the three necessary conditions listed previ-
     ously (items 1 through 3). A direct method of deadlock prevention is to prevent the
     occurrence of a circular wait (item 4). We now examine techniques related to each
     of the four conditions.
     1Virtually all textbooks simply list these four conditions as the conditions needed for deadlock, but such
     a presentation obscures some of the subtler issues. Item 4, the circular wait condition, is fundamentally
     different from the other three conditions. Items 1 through 3 are policy decisions, while item 4 is a circum-
     stance that might occur depending on the sequencing of requests and releases by the involved processes.
     Linking circular wait with the three necessary conditions leads to inadequate distinction between preven-
     tion and avoidance. See [SHUB90] and [SHUB03] for a discussion.

Mutual Exclusion
In general, the first of the four listed conditions cannot be disallowed. If access to
a resource requires mutual exclusion, then mutual exclusion must be supported by
the OS. Some resources, such as files, may allow multiple accesses for reads but
only exclusive access for writes. Even in this case, deadlock can occur if more than
one process requires write permission.
Hold and Wait
The hold-and-wait condition can be prevented by requiring that a process request
all of its required resources at one time and blocking the process until all requests
can be granted simultaneously. This approach is inefficient in two ways. First, a
process may be held up for a long time waiting for all of its resource requests to be
filled, when in fact it could have proceeded with only some of the resources. Second,
resources allocated to a process may remain unused for a considerable period,
during which time they are denied to other processes. Another problem is that a
process may not know in advance all of the resources that it will require.
There is also the practical problem created by the use of modular program-
ming or a multithreaded structure for an application. An application would need
to be aware of all resources that will be requested at all levels or in all modules to
make the simultaneous request.
No Preemption
This condition can be prevented in several ways. First, if a process holding certain
resources is denied a further request, that process must release its original resources
and, if necessary, request them again together with the additional resource.
Alternatively, if a process requests a resource that is currently held by another pro-
cess, the OS may preempt the second process and require it to release its resources.
This latter scheme would prevent deadlock only if no two processes possessed the
same priority.
This approach is practical only when applied to resources whose state can be
easily saved and restored later, as is the case with a processor.
Circular Wait
The circular-wait condition can be prevented by defining a linear ordering of
resource types. If a process has been allocated resources of type R, then it may
subsequently request only those resources of types following R in the ordering.
To see that this strategy works, let us associate an index with each resource
type. Then resource Ri precedes Rj in the ordering if i < j. Now suppose that two
processes, A and B, are deadlocked because A has acquired Ri and requested Rj,
and B has acquired Rj and requested Ri. This condition is impossible because it
implies i < j and j < i.
As with hold-and-wait prevention, circular-wait prevention may be inefficient,
slowing down processes and denying resource access unnecessarily.

