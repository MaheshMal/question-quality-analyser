 a thread is a basic unit of cpu utilization it comprises a thread id a program counter a register set and a stack. it shares with other threads belonging to the same process its code section data section and other operating system resources such as open files and signals. a traditional or heavyweight process has a single thread of control. tf a process has multiple threads of control it can perform more than one task at a time. figure . illustrates the difference between a traditional single threaded process and a multithreaded process. . . motivation many software packages that run on modern desktop pcs are multithreaded. an application typically is implemented as a separate process with several threads of control. a web browser might have one thread display images or text while another thread retrieves data from the network for example. a word processor may have a thread for displaying graphics another thread chapter threads code data files code data files registers stack thread thread single threaded process multithreaded process figure . single threaded and multithreaded processes. for responding to keystrokes from the user and a third thread for performing spelling and grammar checking in the background. in certain situations a single application may be required to perform several similar tasks. for example a web server accepts client requests for web pages images sound and so forth. a busy web server may have several perhaps thousands of clients concurrently accessing it. if the web server ran as a traditional single threaded process it would be able to service only one client at a time. the amount of time that a client might have to wait for its request to be serviced could be enormous. one solution is to have the server run as a single process that accepts requests. when the server receives a request it creates a separate process to service that request. in fact this process creation method was in common use before threads became popular. process creation is time consuming and resource intensive as was shown in the previous chapter. if the new process will perform the same tasks as the existing process why incur all that overhead? it is generally more efficient to use one process that contains multiple threads. this approach would multithread the web server process. the server would create a separate thread that would listen for client requests when a request was made rather than creating another process the server would create another thread to service the request. threads also play a vital role in remote procedure call rpc systems. recall from chapter that rpcs allow interprocess communication by providing a communication mechanism similar to ordinary function or procedure calls. typically rpc servers are multithreaded. when a server receives a message it services the message using a separate thread. this allows the server to service several concurrent requests. java's rmi systems work similarly. finally many operating system kernels are now multithreaded several threads operate in the kernel and each thread performs a specific task such as managing devices or interrupt handling. for example solaris creates a set