Key Terms, Review Questions, and Problems

Key Terms
access method                        file allocation                     inode
bit table                            file allocation table               key field
block                                file directory                      pathname
chained file allocation              file management system              pile
contiguous file allocation           file name                           record
database                             hashed file                         sequential file
disk allocation table                indexed file                        working directory
field                                indexed file allocation
file                                 indexed sequential file
       Review Questions
           12.1  What is the difference between a field and a record?
           12.2  What is the difference between a file and a database?
           12.3  What is a file management system?
           12.4  What criteria are important in choosing a file organization?
           12.5  List and briefly define five file organizations.
           12.6  Why is the average search time to find a record in a file less for an indexed sequential
                 file than for a sequential file?
           12.7  What are typical operations that may be performed on a directory?
           12.8  What is the relationship between a pathname and a working directory?
           12.9  What are typical access rights that may be granted or denied to a particular user for
                 a particular file?
       12.10     List and briefly define three blocking methods.
       12.11     List and briefly define three file allocation methods.
       Problems
           12.1  Define:
                     B  block size
                     R  record size
                     P  size of block pointer
                     F  blocking factor; expected number of records within a block
                 Give a formula for F for the three blocking methods depicted in Figure 12.8.
           12.2  One scheme to avoid the problem of preallocation versus waste or lack of contiguity
                 is to allocate portions of increasing size as the file grows. For example, begin with a
                 portion size of one block, and double the portion size for each allocation. Consider a
                 file of n records with a blocking factor of F, and suppose that a simple one-level index
                 is used as a file allocation table.
                 a.  Give an upper limit on the number of entries in the file allocation table as a func-
                     tion of F and n.
                 b.  What is the maximum amount of the allocated file space that is unused at
                     any time?

     12.3   What file organization would you choose to maximize efficiency in terms of speed of
            access, use of storage space, and ease of updating (adding/deleting/modifying) when
            the data are
            a.  updated infrequently and accessed frequently in random order?
            b.  updated frequently and accessed in its entirety relatively frequently?
            c.  updated frequently and accessed frequently in random order?
     12.4   For the B-tree in Figure 12.4c, show the result of inserting the key 97.
     12.5   An alternative algorithm for insertion into a B-tree is the following: As the insertion
            algorithm travels down the tree, each full node that is encountered is immediately
            split, even though it may turn out that the split was unnecessary.
            a.  What is the advantage of this technique?
            b.  What are the disadvantages?
     12.6   Both the search and the insertion time for a B-tree are a function of the height of the
            tree. We would like to develop a measure of the worst-case search or insertion time.
            Consider a B-tree of degree d that contains a total of n keys. Develop an inequality
            that shows an upper bound on the height h of the tree as a function of d and n.
     12.7   Ignoring overhead for directories and file descriptors, consider a file system in which
            files are stored in blocks of 16K bytes. For each of the following file sizes, calculate
            the percentage of wasted file space due to incomplete filling of the last block: 41,600
            bytes; 640,000 bytes; 4.064,000 bytes.
     12.8   What are the advantages of using directories?
     12.9   Directories can be implemented either as "special files" that can only be accessed in
            limited ways or as ordinary data files. What are the advantages and disadvantages of
            each approach?
     12.10  Some operating systems have a treeÂ­structured file system but limit the depth of the
            tree to some small number of levels. What effect does this limit have on users? How
            does this simplify file system design (if it does)?
     12.11  Consider a hierarchical file system in which free disk space is kept in a free space list.
            a.  Suppose the pointer to free space is lost. Can the system reconstruct the free
                space list?
            b.  Suggest a scheme to ensure that the pointer is never lost as a result of a single
                memory failure.
     12.12  In UNIX System V, the length of a block is 1 Kbyte, and each block can hold a total of
            256 block addresses. Using the inode scheme, what is the maximum size of a file?
     12.13  Consider the organization of a UNIX file as represented by the inode (Figure 12.16).
            Assume that there are 12 direct block pointers, and a singly, doubly, and triply indirect
            pointer in each inode. Further, assume that the system block size and the disk sector
            size are both 8K. If the disk block pointer is 32 bits, with 8 bits to identify the physical
            disk and 24 bits to identify the physical block, then
            a.  What is the maximum file size supported by this system?
            b.  What is the maximum file system partition supported by this system?
            c.  Assuming no information other than that the file inode is already in main memory,
                how many disk accesses are required to access the byte in position 13,423,956?

                                       CHAPTER
