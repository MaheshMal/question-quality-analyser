eCos

      The Embedded Configurable Operating System (eCos) is an open source, royalty-
      free, real-time OS intended for embedded applications. The system is targeted at
      high-performance small embedded systems. For such systems, an embedded form
      of Linux or other commercial OS would not provide the streamlined software
      required. The eCos software has been implemented on a wide variety of proces-
      sor platforms, including Intel IA32, PowerPC, SPARC, ARM, CalmRISC, MIPS,
      and NEC V8xx. It is one of the most widely used embedded operating systems. It is
      implemented in C/C++.
      Configurability
      An embedded OS that is flexible enough to be used in a wide variety of embed-
      ded applications and on a wide variety of embedded platforms must provide more
      functionality than will be needed for any particular application and platform. For
      example, many real-time operating systems support task switching, concurrency
      controls, and a variety of priority scheduling mechanisms. A relatively simple
      embedded system would not need all these features.
         The challenge is to provide an efficient, user-friendly mechanism for configur-
      ing selected components and for enabling and disabling particular features within
      components. The eCos configuration tool, which runs on Windows or Linux, is used
      to configure an eCos package to run on a target embedded system. The complete
      eCos package is structured hierarchically, making it easy, using the configuration
      tool, to assemble a target configuration. At a top level, eCos consists of a number of
      components, and the configuration user may select only those components needed
      for the target application. For example, a system might have a particular serial I/O
      device. The configuration user would select serial I/O for this configuration, then
      select one or more specific I/O devices to be supported. The configuration tool
      would include the minimum necessary software for that support. The configuration
      user can also select specific parameters, such as default data rate and the size of I/O
      buffers to be used.
         This configuration process can be extended down to finer levels of detail, even
      to the level of individual lines of code. For example, the configuration tool provides
      the option of including or omitting a priority inheritance protocol.

             Figure 13.2 shows the top level of the eCos configuration tool as seen by
     the tool user. Each of the items on the list in the left-hand window can be
     selected or deselected. When an item is highlighted, the lower right-hand window
     provides a description and the upper right-hand window provides a link to further
     documentation plus additional information about the highlighted item. Items on
     the list can be expanded to provide a finer-grained menu of options. Figure 13.3
     illustrates an expansion of the eCos kernel option. In this figure, note that excep-
     tion handling has been selected for inclusion, but SMP (symmetric multiprocessing)
     has been omitted. In general, components and individual options can be selected
     or omitted. In some cases, individual values can be set; for example, a minimum
     acceptable stack size is an integer value that can be set or left to a default value.
             Figure 13.4 shows a typical example of the overall process of creating the
     binary image to execute in the embedded system. This process is run on a source
     system, such as a Windows or Linux platform, and the executable image is des-
     tined to execute on a target embedded system, such as a sensor in an industrial
     environment. At the highest software level is the application source code for the
     particular embedded application. This code is independent of eCos but makes use
     of application programming interfaces (API) to sit on top of the eCos software.
     There may be only one version of the application source code, or there may be
     variations for different versions of the target embedded platform. In this example,
     the GNU make utility is used to selectively determine which pieces of a program
Figure 13.2  eCos Configuration Tool--Top Level

Figure 13.3  eCos Configuration Tool--Kernel Details
             GNU make utility                         Application
                                                      source code
                                                      GNU cross compiler
             ­ eCos kernel libraries
             ­Target architecture                     GNU linker
             libraries
                                                      Executable
                                                      file
             Figure 13.4  Loading     an              eCos Configuration

     need to be compiled or recompiled (in the case of a modified version of the source
     code) and issues the commands to recompile them. The GNU cross compiler,
     executing on the source platform, then generates the binary executable code for
     the target embedded platform. The GNU linker links the application object code
     with the code generated by the eCos configuration tool. This latter set of software
     includes selected portions of the eCos kernel plus selected software for the target
     embedded system. The result can then be loaded into the target system.
     eCos Components
     A key design requirement for eCos is portability to different architectures and plat-
     forms with minimal effort. To meet this requirement, eCos consists of a layered set
     of components (Figure 13.5).
     HARDWARE ABSTRACTION LAYER    At the bottom is the hardware abstraction layer
     (HAL). The HAL is software that presents a consistent API to the upper layers and
     maps upper-layer operations onto a specific hardware platform. Thus, the HAL is
     different for each hardware platform. Figure 13.6 is an example that demonstrates
     how the HAL abstracts hardware-specific implementations for the same API call
     on two different platforms. As this example shows, the call from an upper layer to
     enable interrupts is the same on both platforms, but the C code implementation of
     the function is specific to each platform.
        The HAL is implemented as three separate modules:
     ·  Architecture: Defines the processor family type. This module contains the code
        necessary for processor startup, interrupt delivery, context switching, and other
        functionality specific to the instruction set architecture of that processor family.
     ·  Variant: Supports the features of the specific processor in the family. An
        example of a supported feature is an on-chip module such as a memory man-
        agement unit (MMU).
     ·  Platform: Extends the HAL support to tightly coupled peripherals like
        interrupt controllers and timer devices. This module defines the platform
        or board that includes the selected processor architecture and variant. It
        includes code for startup, chip selection configuration, interrupt controllers,
        and timer devices.
        User application code
        Standard C library
        I/O system (device drivers)
        Kernel
        Hardware abstraction layer
        Figure 13.5                eCos Layered  Structure

             1    #define    HAL_ENABLE_INTERRUPTS()         \
             2     asm     volatile    (                     \
             3         "mrs  r3,  cpsr;"                     \
             4         "bic  r3,  r3,     #0xC0;"            \
             5         "mrs  cpsr,     r3;"                  \
             6         :                                     \
             7         :                                     \
             8         :   "r3"                              \
             9         );                                    \
             (a)  ARM     architecture
             1    #define    HAL_ENABLE_INTERRUPTS()         \
             2     CYG_MACRO_START                           \
             3     cyg_uint32     tmp1,      tmp2            \
             4     asm     volatile    (                     \
             5         "mfmsr    %0;"                        \
             6         "ori  %1,%1,0x800;"                   \
             7         "r1wimi    %0,%1,0,16,16;"            \
             8         "mtmsr    %0;"                        \
             9         :   "=r"  (tmp1),     "=r"  (tmp2));  \
             10       CYG_MACRO_END                          \
             (b)  PowerPC    architecture
             Figure 13.6     Two Implementations of
             Hal_Enable_Interrupts() Macro
    Note that the HAL interface can be directly used by any of the upper layers,
promoting efficient code.
