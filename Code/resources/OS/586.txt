Windows File System

     The developers of Windows NT designed a new file system, the New Technology
     File System (NTFS), which is intended to meet high-end requirements for worksta-
     tions and servers. Examples of high-end applications include the following:
       ·  Client/server applications such as file servers, compute servers, and database
          servers
       ·  Resource-intensive engineering and scientific applications
       ·  Network applications for large corporate systems
          This section provides an overview of NTFS.
     Key Features of NTFS
     NTFS is a flexible and powerful file system built, as we shall see, on an elegantly sim-
     ple file system model. The most noteworthy features of NTFS include the following:
       ·  Recoverability: High on the list of requirements for the new Windows file
          system was the ability to recover from system crashes and disk failures. In the
          event of such failures, NTFS is able to reconstruct disk volumes and return
          them to a consistent state. It does this by using a transaction-processing model

   for changes to the file system; each significant change is treated as an atomic
   action that is either entirely performed or not performed at all. Each transac-
   tion that was in process at the time of a failure is subsequently backed out or
   brought to completion. In addition, NTFS uses redundant storage for critical
   file system data, so that failure of a disk sector does not cause the loss of data
   describing the structure and status of the file system.
·  Security: NTFS uses the Windows object model to enforce security. An open
   file is implemented as a file object with a security descriptor that defines its
   security attributes. The security descriptor is persisted as an attribute of each
   file on disk.
·  Large disks and large files: NTFS supports very large disks and very large files
   more efficiently than other file systems, such as FAT.
·  Multiple data streams: The actual contents of a file are treated as a stream of
   bytes. In NTFS, it is possible to define multiple data streams for a single file.
   An example of the utility of this feature is that it allows Windows to be used
   by remote Macintosh systems to store and retrieve files. On Macintosh, each
   file has two components: the file data and a resource fork that contains infor-
   mation about the file. NTFS treats these two components as two data streams
   within a single file.
·  Journaling: NTFS keeps a log of all changes made to files on the volumes.
   Programs, such as desktop search, can read the journal to identify what files
   have changed.
·  Compression and encryption: Entire directories and individual files can be
   transparently compressed and/or encrypted.
·  Hard and symbolic links: In order to support POSIX, Windows has always sup-
   ported "hard links," which allow a single file to be accessible by multiple path
   names on the same volume. Starting with Windows Vista, "symbolic links"
   are supported which allow a file or directory to be accessible by multiple path
   names, even if the names are on different volumes. Windows also supports
   "mount points" which allow volumes to appear at junction points on other
   volumes, rather than be named by driver letters, such as "D:".
NTFS Volume and File Structure
NTFS makes use of the following disk storage concepts:
·  Sector: The smallest physical storage unit on the disk. The data size in bytes is
   a power of 2 and is almost always 512 bytes.
·  Cluster: One or more contiguous (next to each other on the disk) sectors. The
   cluster size in sectors is a power of 2.
·  Volume: A logical partition on a disk, consisting of one or more clusters and
   used by a file system to allocate space. At any time, a volume consists of file
   system information, a collection of files, and any additional unallocated space
   remaining on the volume that can be allocated to files. A volume can be all or
   a portion of a single disk or it can extend across multiple disks. If hardware or

Table 12.5  Windows       NTFS  Partition  and     Cluster Sizes
Volume Size                                        Sectors per Cluster             Cluster Size
512 Mbyte                                          1                               512 bytes
512 Mbyte­1 Gbyte                                  2                               1K
1 Gbyte­2 Gbyte                                    4                               2K
2 Gbyte­4 Gbyte                                    8                               4K
4 Gbyte­8 Gbyte                                    16                              8K
8 Gbyte­16 Gbyte                                   32                              16K
16 Gbyte­32 Gbyte                                  64                              32K
>32 Gbyte                                          128                             64K
             software RAID 5 is employed, a volume consists of stripes spanning multiple
             disks. The maximum volume size for NTFS is 264 bytes.
             The cluster is the fundamental unit of allocation in NTFS, which does not
     recognize sectors. For example, suppose each sector is 512 bytes and the system is
     configured with two sectors per cluster (one cluster  1K bytes). If a user creates
     a file of 1,600 bytes, two clusters are allocated to the file. Later, if the user updates
     the file to 3,200 bytes, another two clusters are allocated. The clusters allocated to a
     file need not be contiguous; it is permissible to fragment a file on the disk. Currently,
     the maximum file size supported by NTFS is 232 clusters, which is equivalent to a
     maximum of 248 bytes. A cluster can have at most 216 bytes.
             The use of clusters for allocation makes NTFS independent of physical sec-
     tor size. This enables NTFS to support easily nonstandard disks that do not have a
     512-byte sector size and to support efficiently very large disks and very large files
     by using a larger cluster size. The efficiency comes from the fact that the file system
     must keep track of each cluster allocated to each file; with larger clusters, there are
     fewer items to manage.
             Table 12.5 shows the default cluster sizes for NTFS. The defaults depend on
     the size of the volume. The cluster size that is used for a particular volume is estab-
     lished by NTFS when the user requests that a volume be formatted.
     NTFS VOLUME LAYOUT                    NTFS uses a remarkably simple but powerful approach
     to organizing information on a disk volume. Every element on a volume is a file,
     and every file consists of a collection of attributes. Even the data contents of a file is
     treated as an attribute. With this simple structure, a few general-purpose functions
     suffice to organize and manage a file system.
             Figure 12.21 shows the layout of an NTFS volume, which consists of four
     regions. The first few sectors on any volume are occupied by the partition boot
            Partition                              System
             boot               Master file table  files                File area
             sector
            Figure 12.21  NTFS Volume Layout

        sector (although it is called a sector, it can be up to 16 sectors long), which contains
        information about the volume layout and the file system structures as well as boot
        startup information and code. This is followed by the master file table (MFT), which
        contains information about all of the files and folders (directories) on this NTFS
        volume. In essence, the MFT is a list of all files and their attributes on this NTFS
        volume, organized as a set of rows in a table structure.
                   Following the MFT is a region containing system files. Among the files in this
        region are the following:
                ·  MFT2: A mirror of the first few rows of the MFT, used to guarantee access to
                   the volume in the case of a single-sector failure in the sectors storing the MFT.
                ·  Log file: A list of transaction steps used for NTFS recoverability.
                ·  Cluster bit map: A representation of the space on the volume, showing which
                   clusters are in use.
                ·  Attribute definition table: Defines the attribute types supported on this
                   volume and indicates whether they can be indexed and whether they can be
                   recovered during a system recovery operation.
        MASTER FILE TABLE                The heart of the Windows file system is the MFT. The MFT
        is organized as a table of 1,024-byte rows, called records. Each row describes a file
        on this volume, including the MFT itself, which is treated as a file. If the contents of
        a file are small enough, then the entire file is located in a row of the MFT. Otherwise,
        the row for that file contains partial information and the remainder of the file spills
        over into other available clusters on the volume, with pointers to those clusters in
        the MFT row of that file.
                   Each record in the MFT consists of a set of attributes that serve to define the
        file (or folder) characteristics and the file contents. Table 12.6 lists the attributes
        that may be found in a row, with the required attributes indicated by shading.
Table 12.6      Windows NTFS File and Directory Attribute Types
Attribute Type                                            Description
Standard information  Includes access attributes (read-only, read/write, etc.); time stamps, including when the
                      file was created or last modified; and how many directories point to the file (link count)
Attribute list        A list of attributes that make up the file and the file reference of the MFT file record
                      in which each attribute is located. Used when all attributes do not fit into a single
                      MFT file record
File name             A file or directory must have one or more names.
Security descriptor   Specifies who owns the file and who can access it
Data                  The contents of the file. A file has one default unnamed data attribute and may have
                      one or more named data attributes.
Index root            Used to implement folders
Index allocation      Used to implement folders
Volume information    Includes volume-related information, such as the version and name of the volume
Bitmap                Provides a map representing records in use on the MFT or folder
Note: Green-colored rows refer to required file attributes; the other attributes are optional.

     Recoverability
     NTFS makes it possible to recover the file system to a consistent state following a
     system crash or disk failure. The key elements that support recoverability are as
     follows (Figure 12.22):
     ·  I/O manager: Includes the NTFS driver, which handles the basic open, close,
        read, and write functions of NTFS. In addition, the software RAID module
        FTDISK can be configured for use.
     ·  Log file service: Maintains a log of file system metadata changes on disk. The
        log file is used to recover an NTFS-formatted volume in the case of a system
        failure (i.e., without having to run the file system check utility).
     ·  Cache manager: Responsible for caching file reads and writes to enhance
        performance. The cache manager optimizes disk I/O.
     ·  Virtual memory manager: The NTFS accesses cached files by mapping file refer-
        ences to virtual memory references and reading and writing virtual memory.
        It is important to note that the recovery procedures used by NTFS are designed
     to recover file system metadata, not file contents. Thus, the user should never lose a
     volume or the directory/file structure of an application because of a crash. However,
     user data are not guaranteed by the file system. Providing full recoverability, includ-
     ing user data, would make for a much more elaborate and resource-consuming
     recovery facility.
        The essence of the NTFS recovery capability is logging. Each operation that
     alters a file system is treated as a transaction. Each suboperation of a transaction
                                                                 I/O manager
                                            Log the transaction
                   Log file                                      NTFS driver     Read/write a
                   service      Read/write                                       mirrored or
                                  the file                       Fault-tolerant  striped volume
        Flush the  Write the                                     driver          Read/write
        log file   cache                                                         the disk
                                                                 Disk driver
                         Cache              Load data from
                         manager            disk into
                                            memory
                   Access the mapped
                   file or flush the cache
                   Virtual memory
                         manager
        Figure 12.22     Windows NTFS Components

that alters important file system data structures is recorded in a log file before being
recorded on the disk volume. Using the log, a partially completed transaction at the
time of a crash can later be redone or undone when the system recovers.
           In general terms, these are the steps taken to ensure recoverability, as
described in [RUSS11]:
       1.  NTFS first calls the log file system to record in the log file (in the cache) any
           transactions that will modify the volume structure.
       2.  NTFS modifies the volume (in the cache).
       3.  The cache manager calls the log file system to prompt it to flush the log file to
           disk.
       4.  Once the log file updates are safely on disk, the cache manager flushes the
           volume changes to disk.
