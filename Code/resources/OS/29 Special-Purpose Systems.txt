 systems communicate closely enough to provide the illusion that only a single operating system controls the network. we cover computer networks and distributed systems in chapters through . . special purpose systems the discussion thus far has focused on general purpose computer systems that we are all familiar with. there are however different classes of computer systems whose functions are more limited and whose objective is to deal with limited computation domains. . . real time embedded systems embedded computers are the most prevalent form of computers in existence. these devices are found everywhere from car engines and manufacturing robots to vcrs and microwave ovens. they tend to have very specific tasks. the systems they run on are usually primitive and so the operating systems provide limited features. usually they have little or no user interface preferring to spend their time monitoring and managing hardware devices such as automobile engines and robotic arms. these embedded systems vary considerably. some are general purpose computers running standard operating systems such as unix with special purpose applications to implement the functionality. others are hardware devices with a special purpose embedded operating system providing just the functionality desired. yet others are hardware devices with application specific integrated circuits asics that perform their tasks without an operating system. the use of embedded systems continues to expand. the power of these devices both as standalone units and as members of networks and the web is sure to increase as well. even now entire houses can be computerized so that a central computer either a general purpose computer or an embedded system can control heating and lighting alarm systems and even coffee makers. web access can enable a home owner to tell the house to heat up before she arrives home. someday the refrigerator may call the grocery store when it notices the milk is gone. embedded systems almost always run real time operating systems. a real time system is used when rigid time requirements have been placed on the operation of a processor or the flow of data thus it is often used as a control device in a dedicated application. sensors bring data to the computer. the computer must analyze the data and possibly adjust controls to modify the sensor inputs. systems that control scientific experiments medical imaging systems industrial control systems and certain display systems are realtime systems. some automobile engine fuel injection systems home appliance controllers and weapon systems are also real time systems. a real time system has well defined fixed time constraints. processing mustbe done within the defined constraints or the system will fail. for instance it would not do for a robot arm to be instructed to halt after it had smashed into the car it was building. a real time system functions correctly only if it chapter introduction returns the correct result within its time constraints. contrast this system with a time sharing system where it is desirable but not mandatory to respond quickly or a batch system which may have no time constraints at all. in chapter we cover real time embedded systems in great detail. in chapter we consider the scheduling facility needed to implement real time functionality in an operating system. in chapter we describe the design of memory management for real time computing. finally in chapter we describe the real time components of the windows xp operating system. . . multimedia systems most operating systems are designed to handle conventional data such as text files programs word processing documents and spreadsheets. however a recent trend in technology is the incorporation of multimedia data into computer systems. multimedia data consist of audio and video files as well as conventional files. these data differ from conventional data in that multimedia data such as frames of video must be delivered streamed according to certain time restrictions for example frames per second . multimedia describes a wide range of applications that are in popular use today. these include audio files such as mp dvd movies video conferencing and short video clips of movie previews or news stories downloaded over the internet. multimedia applications may also include live webcasts broadcasting over the world wide web of speeches or sporting events and even live webcams that allow a viewer in manhattan to observe customers at a cafe in paris. multimedia applications need not be either audio or video rather a multimedia application often includes a combination of both. for example a movie may consist of separate audio and video tracks. nor must multimedia applications be delivered only to desktop personal computers. increasingly they are being directed toward smaller devices including pdas and cellular telephones. for example a stock trader may have stock quotes delivered wirelessly and in real time to his pda. in chapter we explore the demands of multimedia applications how multimedia data differ from conventional data and how the nature of these data affects the desigii of operating systems that support the requirements of multimedia systems. . . handheld systems handheld systems include personal digital assistants pdas such as palm and pocket pcs and cellular telephones many of which use special purpose embedded operating systems. developers of handheld systems and applications face many challenges most of which are due to the limited size of such devices. for example a pda is typically about inches in height and inches in width and it weighs less than one half pound. because of their size most handheld devices have a small amount of memory slow processors and small display screens. we will take a look now at each of these limitations. the amount of physical memory in a handheld depends upon the device but typically is is somewhere between kb and mb. contrast this with a typical pc or workstation which may have several gigabytes of memory! as a result the operating system and applications must manage memory efficiently. this includes returning all allocated memory back to the memory