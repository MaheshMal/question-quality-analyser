 in chapter we developed a model of a system consisting of cooperating sequential processes or threads all running asynchronously and possibly sharing data. we illustrated this model with the producer consumer problem which is representative of operating systems. specifically in section . . we described how a bounded buffer could be used to enable processes to share memory. let us return to our consideration of the bounded buffer. as we pointed out our solution allows at most buffer.size items in the buffer at the same time. suppose we want to modify the algorithm to remedy this deficiency. one possibility is to add an integer variable counter initialized to . counter is incremented every time we add a new item to the buffer and is decremented chapter process synchronization every time we remove one item from the buffer. the code for the producer process can be modified as follows while true produce an item in nextproduced while counter buffer.size do nothing buffer in nextproduced in in buffer size counter the code for the consumer process can be modified as follows while true while counter do nothing nextconsumed buffer out out out buffer size counter consume the item in nextconsumed although both the producer and consumer routines are correct separately they may not function correctly when executed concurrently. as an illustration suppose that the value of the variable counter is currently and that the producer and consumer processes execute the statements counter and counter concurrently. following the execution of these two statements the value of the variable counter may be or ! the only correct result though is counter which is generated correctly if the producer and consumer execute separately. we can show that the value of counter may be incorrect as follows. note that the statement counter may be implemented in machine language on a typical machine as register counter registeri registeri counter registeri where register is a local cpu register. similarly the statement counter is implemented as follows register counter register register counter registeri where again register is a local cpu register. even though register and register may be the same physical register an accumulator say remember