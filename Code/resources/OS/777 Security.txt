 after a timeout and of incoming out of order packets to be presented to the socket when the missing data have arrived. . security linux's security model is closely related to typical unix security mechanisms. the security concerns can be classified in two groups . authentication. making sure that nobody can access the system without first proving that she has entry rights . access control. providing a mechanism for checking whether a user has the right to access a certain object and preventing access to objects as required . . authentication authentication in unix has typically been performed through the use of a publicly readable password file. a user's password is combined with a random salt value and the result is encoded with a one way transformation function and stored in the password file. the use of the one way function means that the original password cannot be deduced from the password file except by trial and error. when a user presents a password to the system the password is recombined with the salt value stored in the password file and passed through the same one way transformation. if the result matches the contents of the password file then the password is accepted. historically unix implementations of this mechanism have had several problems. passwords were often limited to eight characters and the number of possible salt values was so low that an attacker could easily combine a dictionary of commonly used passwords with every possible salt value and have a good chance of matching one or more passwords in the password file gaining unauthorized access to any accounts compromised as a result. extensions to the password mechanism have been introduced that keep the encrypted password secret in a file that is not publicly readable that allow longer passwords or that use more secure methods of encoding the password. other authentication mechanisms have been introduced that limit the times during which a user is permitted to connect to the system or to distribute authentication information to all the related systems in a network. a new security mechanism has been developed by unix vendors to address authentication problems. the pluggable authentication modules pam system is based on a shared library that can be used by any system component that needs to authenticate users. an implementation of this system is available under linux. pam allows authentication modules to be loaded on demand as specified in a system wide configuration file. if a new authentication mechanism is added at a later date it can be added to the configuration file and all system components will immediately be able to take advantage of it. pam modules can specify authentication methods account restrictions sessionsetup functions and password changing functions so that when users change their passwords all the necessary authentication mechanisms can be updated at once . chapter the linux system . . access control access control under unix systems including linux is performed through the use of unique numeric identifiers. a user identifier uid identifies a single user or a single set of access rights. a group identifier gid is an extra identifier that can be used to identify rights belonging to more than one user. access control is applied to various objects in the system. every file available in the system is protected by the standard access control mechanism. in addition other shared objects such as shared memory sections and semaphores employ the same access system. every object in a unix system under user and group access control has a single uid and a single gid associated with it. user processes also have a single uid but they may have more than one gid. if a process's uid matches the uid of an object then the process has user rights or owner rights to that object. if the uids do not match but any of the process's gids match the object's gid then group rights are conferred otherwise the process has world rights to the object. linux performs access control by assigning objects a protection mask that specifies which access modes read write or execute are to be granted to processes with owner group or world access. thus the owner of an object might have full read write and execute access to a file other users in a certain group might be given read access but denied write access and everybody else might be given no access at all. the only exception is the privileged root uid. a process with this special uid is granted automatic access to any object in the system bypassing normal access checks. such processes are also granted permission to perform privileged operations such as reading any physical memory or opening reserved network sockets. this mechanism allows the kernel to prevent normal users from accessing these resources most of the kernel's key internal resources are implicitly owned by the root uid. linux implements the standard unix setuid mechanism described in section a. . . this mechanism allows a program to run with privileges different from those of the user running the program. for example the l p r program which submits a job onto a print queue has access to the system's print queues even if the user running that program does not. the unix implementation of s e t u i d distinguishes between a process's real and effective uid the real uid is that of the user running the program the effective uid is that of the file's owner. under linux this mechanism is augmented in two ways. first linux implements the posix specification's saved user id mechanism which allows a process to drop and reacquire its effective uid repeatedly. for security reasons a program may want to perform most of its operations in a safe mode waiving the privileges granted by its setuid status but may wish to perform selected operations with all its privileges. standard unix implementations achieve this capacity only by swapping the real and effective uids the previous effective uid is remembered but the program's real uid does not always correspond to the uid of the user running the program. saved uids allow a process to set its effective uid to its real uid and then back to the previous value of its effective uid without having to modify the real uid at any time. the second enhancement provided by linux is the addition of a process characteristic that grants just a subset of the rights of the effective uid. the