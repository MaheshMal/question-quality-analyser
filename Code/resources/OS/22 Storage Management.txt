 to make the computer system convenient for users the operating system provides a uniform logical view of information storage. the operating system abstracts from the physical properties of its storage devices to define a logical storage unit the file. the operating system maps files onto physical media and accesses these files via the storage devices. . . file system management file management is one of the most visible components of an operating system. computers can store information on several different types of physical media. magnetic disk optical disk and magnetic tape are the most common. each of these media has its own characteristics and physical organization. each medium is controlled by a device such as a disk drive or tape drive that . storage management also has its own unique characteristics. these properties include accessspeed capacity' data transfer rate and access method sequential or random . a file is a collection of related information defined by its creator. commonly files represent programs both source and object forms and data. data files may be numeric alphabetic alphanumeric or binary. files may be free form for example text files or they may be formatted rigidly for example fixed fields . clearly the concept of a file is an extremely general one. the operating system implements the abstract concept of a file by managing mass storage media such as tapes and disks and the devices that control them. also files are normally organized into directories to make them easier to usefinally when multiple users have access to files it may be desirable to control by whom and in what ways for example read write append files may be accessed. the operating system is responsible for the following activities in connection with file management creating and deleting files creating and deleting directories to organize files supporting primitives for manipulating files and directories mapping files onto secondary storage backing up files on stable nonvolatile storage media file management techniques will be discussed in chapters and . . . mass storage management as we have already seen because main memory is too small to accommodate all data and programs and because the data that it holds are lost when power is lost the computer system must provide secondary storage to back up main memory. most modern computer systems use disks as the principal on line storage medium for both programs and data. most programs including compilers assemblers word processors editors and formatters are stored on a disk until loaded into memory and then use the disk as both the source and destination of their processing. hence the proper management of disk storage is of central importance to a computer system. the operating system is responsible for the following activities in connection with disk management free space management storage allocation disk scheduling because secondary storage is used frequently it must be used efficiently. the entire speed of operation of a computer may hinge on the speeds of the disk subsystem and of the algorithms that manipulate that subsystem. there are however many uses for storage that is slower and lower in cost and sometimes of higher capacity than secondary storage. backups of disk data seldom used data and long term archival storage are some examples. chapter introduction magnetic tape drives and their tapes and cd and dvd drives and platters are typical tertiary storage devices. the media tapes and optical platters vary between worm write once read many times and rw read write formats. tertiary storage is not crucial to system performance but it still must be managed. some operating systems take on this task while others leave tertiary storage management to application programs. some of the functions that operating systems can provide include mounting and unmounting media in devices allocating and freeing the devices for exclusive use by processes and migrating data from secondary to tertiary storage. techniques for secondary and tertiary storage management will be discussed in chapter . . . caching caching is an important principle of computer systems. information is normally kept in some storage system such as main memory . as it is used it is copied into a faster storage system the cache on a temporary basis. when we need a particular piece of information we first check whether it is in the cache. if it is we use the information directly from the cache if it is not we use the information from the source putting a copy in the cache under the assumption that we will need it again soon. in addition internal programmable registers such as index registers provide a high speed cache for main memory. the programmer or compiler implements the register allocation and register replacement algorithms to decide which information to keep in registers and which to keep in main memory. there are also caches that are implemented totally in hardware. for instance most systems have an instruction cache to hold the next instructions expected to be executed. without this cache the cpu would have to wait several cycles while an instruction was fetched from main memory. for similar reasons most systems have one or more high speed data caches in the memory hierarchy. we are not concerned with these hardware only caches in this text since they are outside the control of the operating system. because caches have limited size cache management is an important design problem. careful selection of the cache size and of a replacement policy can result in greatly increased performance. see figure . for a storage performance comparison in large workstations and small servers that shows the need for caching. various replacement algorithms for software controlled caches are discussed in chapter . main memory can be viewed as a fast cache for secondary storage since data in secondary storage must be copied into main memory for use and data must be in main memory before being moved to secondary storage for safekeeping. the file system data which resides permanently on secondary storage may appear on several levels in the storage hierarchy. at the highest level the operating system may maintain a cache of file system data in main memory also electronic ram disks also known as solid state disks may be used for high speed storage that is accessed through the file system interface. the bulk of secondary storage is on magnetic disks. the magnetic disk storage in turn is often backed up onto magnetic tapes or removable disks to protect against data loss in case of a hard disk failure. some systems automatically . storage management level i z ' ' ' isgistprs. . . eacn. um u j raajft njenwjy j cfisk sti fgge i i ! r f 'll ifflfflif s. gl. ' mul ll pm ttfejis riaihltiebsi cqess time insji j s s s . q i ! m sk m lanaielf i cfoffipifer iriafpari f i i otjemini sysfew opep!ti sii?si etti saekeiflisy sflher i ' ' ' rilaiji memory disl ! dpi fia e j f figure . performance of various levels of storage. archive old file data from secondary storage to tertiary storage such as tape jukeboxes to lower the storage cost see chapter . the movement of information between levels of a storage hierarchy may be either explicit or implicit depending on the hardware design and the controlling operating system software. for instance data transfer from cache to cpu and registers is usually a hardware function with no operating system intervention. in contrast transfer of data from disk to memory is usually controlled by the operating system. in a hierarchical storage structure the same data may appear in different levels of the storage system. for example suppose that an integer a that is to be incremented by is located in file b and file b resides on magnetic disk. the increment operation proceeds by first issuing an i o operation to copy the disk block on which a resides to main memory. this operation is followed by copying a to the cache and to an internal register. thus the copy of a appears in several places on the magnetic disk in main memory in the cache and in an internal register see figure . . once the increment takes place in the internal register the value of a differs in the various storage systems. the value of a becomes the same only after the new value of a is written from the internal register back to the magnetic disk. in a computing environment where only one process executes at a time this arrangement poses no difficulties since an access to integer a will always be to the copy at the highest level of the hierarchy. however in a multitasking environment where the cpu is switched back and forth among various processes extreme care must be taken to ensure that if several processes wish to access a then each of these processes will obtain the most recently updated value of a. magnetic main hardware disk memory register figure . migration of integer a from disk to register. chapter introduction the situation becomes more complicated in a multiprocessor environment where in addition to maintaining internal registers each of the cpus also contains a local cache. in such an environment a copy of a may exist simultaneously in several caches. since the various cpus can all execute concurrently we must make sure that an update to the value of a in one cache is immediately reflected in all other caches where a resides. this situation is called cache coherency and it is usually a hardware problem handled below the operating system level . in a distributed environment the situation becomes even more complex. in this environment several copies or replicas of the same file can be kept on different computers that are distributed in space. since the various replicas may be accessed and updated concurrently some distributed systems ensure that when a replica is updated in one place all other replicas are brought up to date as soon as possible. there are various ways to achieve this guarantee as we discuss in chapter . . . i o systems one of the purposes of an operating system is to hide the peculiarities of specific hardware devices from the user. for example in unix the peculiarities of i o devices are hidden from the bulk of the operating system itself by the i o subsystem. the i o subsystem consists of several components a memory management component that includes buffering caching and spooling a general device driver interface drivers for specific hardware devices only the device driver knows the peculiarities of the specific device to which it is assigned. we discussed in section . . how interrupt handlers and device drivers are used in the construction of efficient i o subsystems. in chapter we discuss how the i o subsystem interfaces to the other system components manages devices transfers data and detects i o completion