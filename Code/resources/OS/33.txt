Instruction Execution

     A program to be executed by a processor consists of a set of instructions stored
     in memory. In its simplest form, instruction processing consists of two steps: The
     processor reads (fetches) instructions from memory one at a time and executes each
     instruction. Program execution consists of repeating the process of instruction fetch
     and instruction execution. Instruction execution may involve several operations and
     depends on the nature of the instruction.
        The processing required for a single instruction is called an instruction cycle.
     Using a simplified two-step description, the instruction cycle is depicted in Figure 1.2.
     The two steps are referred to as the fetch stage and the execute stage. Program execu-
     tion halts only if the processor is turned off, some sort of unrecoverable error occurs,
     or a program instruction that halts the processor is encountered.
        At the beginning of each instruction cycle, the processor fetches an instruc-
     tion from memory. Typically, the program counter (PC) holds the address of the
     next instruction to be fetched. Unless instructed otherwise, the processor always
     increments the PC after each instruction fetch so that it will fetch the next instruc-
     tion in sequence (i.e., the instruction located at the next higher memory address).
     For example, consider a simplified computer in which each instruction occupies one
     16-bit word of memory. Assume that the program counter is set to location 300.
     The processor will next fetch the instruction at location 300. On succeeding instruc-
     tion cycles, it will fetch instructions from locations 301, 302, 303, and so on. This
     sequence may be altered, as explained subsequently.
        The fetched instruction is loaded into the instruction register (IR). The
     instruction contains bits that specify the action the processor is to take. The proces-
     sor interprets the instruction and performs the required action. In general, these
     actions fall into four categories:
     路  Processor-memory: Data may be transferred from processor to memory or
        from memory to processor.
     路  Processor-I/O: Data may be transferred to or from a peripheral device by
        transferring between the processor and an I/O module.
     路  Data processing: The processor may perform some arithmetic or logic opera-
        tion on data.
     路  Control: An instruction may specify that the sequence of execution be altered.
        For example, the processor may fetch an instruction from location 149, which
                       Fetch stage              Execute stage
        START          Fetch next                         Execute       HALT
                       instruction              instruction
     Figure 1.2  Basic Instruction Cycle

        0                3  4                                               15
           Opcode                                         Address
                                      (a) Instruction format
        0  1                                                                15
        S                                Magnitude
                                      (b) Integer format
           Program counter (PC) = Address of instruction
           Instruction register (IR) = Instruction being executed
           Accumulator (AC) = Temporary storage
                               (c) Internal CPU registers
           0001 = Load AC from memory
           0010 = Store AC to memory
           0101 = Add to AC from memory
                               (d) Partial list of opcodes
        Figure 1.3       Characteristics of a Hypothetical Machine
        specifies that the next instruction will be from location 182. The processor sets
        the program counter to 182. Thus, on the next fetch stage, the instruction will
        be fetched from location 182 rather than 150.
    An instruction's execution may involve a combination of these actions.
        Consider a simple example using a hypothetical processor that includes
    the characteristics listed in Figure 1.3. The processor contains a single data reg-
    ister, called the accumulator (AC). Both instructions and data are 16 bits long,
    and memory is organized as a sequence of 16-bit words. The instruction format
    provides 4 bits for the opcode, allowing as many as 24  16 different opcodes (rep-
    resented by a single hexadecimal1 digit). The opcode defines the operation the
    processor is to perform. With the remaining 12 bits of the instruction format, up to
    212  4,096 (4K) words of memory (denoted by three hexadecimal digits) can be
    directly addressed.
        Figure 1.4 illustrates a partial program execution, showing the relevant
    portions of memory and processor registers. The program fragment shown adds the
    contents of the memory word at address 940 to the contents of the memory word at
    address 941 and stores the result in the latter location. Three instructions, which can
    be described as three fetch and three execute stages, are required:
    1.  The PC contains 300, the address of the first instruction. This instruction (the
        value 1940 in hexadecimal) is loaded into the IR and the PC is incremented.
        Note that this process involves the use of a memory address register (MAR)
    1A basic refresher on number systems (decimal, binary, hexadecimal) can be found at the Computer
    Science Student Resource Site at ComputerScienceStudent.com.

                     Fetch stage                            Execute stage
    Memory                    CPU registers      Memory           CPU registers
    300  1        9  4     0     3  0  0  PC     300  1  9  4  0    3  0   1  PC
    301  5        9  4     1                 AC  301  5  9  4  1    0  0   0  3  AC
    302  2        9  4     1     1  9  4  0  IR  302  2  9  4  1    1  9   4  0  IR
    940  0        0  0     3                     940  0  0  0  3
    941  0        0  0     2                     941  0  0  0  2
    Step 1                                       Step 2
    Memory                    CPU registers      Memory           CPU registers
    300  1        9  4     0     3  0  1  PC     300  1  9  4  0    3  0   2  PC
    301  5        9  4     1     0  0  0  3  AC  301  5  9  4  1    0  0   0  5  AC
    302  2        9  4     1     5  9  4  1  IR  302  2  9  4  1    5  9   4  1   IR
    940  0        0  0     3                     940  0  0  0  3  3+2=5
    941  0        0  0     2                     941  0  0  0  2
    Step 3                                       Step 4
    Memory                    CPU registers      Memory           CPU registers
    300  1        9  4     0     3  0  2  PC     300  1  9  4  0    3  0   3  PC
    301  5        9  4     1     0  0  0  5  AC  301  5  9  4  1    0  0   0  5  AC
    302  2        9  4     1     2  9  4  1  IR  302  2  9  4  1    2  9   4  1  IR
    940  0        0  0     3                     940  0  0  0  3
    941  0        0  0     2                     941  0  0  0  5
    Step 5                                       Step 6
    Figure 1.4             Example of Program Execution (contents
                           of memory and registers in hexadecimal)
    and a memory buffer register (MBR). For simplicity, these intermediate regis-
    ters are not shown.
2.  The first 4 bits (first hexadecimal digit) in the IR indicate that the AC is to be
    loaded from memory. The remaining 12 bits (three hexadecimal digits) specify
    the address, which is 940.
3.  The next instruction (5941) is fetched from location 301 and the PC is
    incremented.
4.  The old contents of the AC and the contents of location 941 are added and the
    result is stored in the AC.
5.  The next instruction (2941) is fetched from location 302 and the PC is
    incremented.
6.  The contents of the AC are stored in location 941.
    In this example, three instruction cycles, each consisting of a fetch stage and
an execute stage, are needed to add the contents of location 940 to the contents
of 941. With a more complex set of instructions, fewer instruction cycles would be
needed. Most modern processors include instructions that contain more than one
address. Thus the execution stage for a particular instruction may involve more than
one reference to memory. Also, instead of memory references, an instruction may
specify an I/O operation.

