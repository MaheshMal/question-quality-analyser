Direct Memory Access

     Three techniques are possible for I/O operations: programmed I/O, interrupt-driven
     I/O, and direct memory access (DMA). Before discussing DMA, we briefly define
     the other two techniques; see Appendix C for more detail.
     When the processor is executing a program and encounters an instruction
     relating to I/O, it executes that instruction by issuing a command to the appro-
     priate I/O module. In the case of programmed I/O, the I/O module performs the
     requested action and then sets the appropriate bits in the I/O status register but
     takes no further action to alert the processor. In particular, it does not interrupt the
     processor. Thus, after the I/O instruction is invoked, the processor must take some
     active role in determining when the I/O instruction is completed. For this purpose,

    the processor periodically checks the status of the I/O module until it finds that the
    operation is complete.
        With programmed I/O, the processor has to wait a long time for the I/O mod-
    ule of concern to be ready for either reception or transmission of more data. The
    processor, while waiting, must repeatedly interrogate the status of the I/O module.
    As a result, the performance level of the entire system is severely degraded.
        An alternative, known as interrupt-driven I/O, is for the processor to issue
    an I/O command to a module and then go on to do some other useful work. The
    I/O module will then interrupt the processor to request service when it is ready to
    exchange data with the processor. The processor then executes the data transfer, as
    before, and then resumes its former processing.
        Interrupt-driven I/O, though more efficient than simple programmed I/O, still
    requires the active intervention of the processor to transfer data between memory
    and an I/O module, and any data transfer must traverse a path through the proces-
    sor. Thus, both of these forms of I/O suffer from two inherent drawbacks:
    1.  The I/O transfer rate is limited by the speed with which the processor can test
        and service a device.
    2.  The processor is tied up in managing an I/O transfer; a number of instructions
        must be executed for each I/O transfer.
        When large volumes of data are to be moved, a more efficient technique is
    required: direct memory access (DMA). The DMA function can be performed by
    a separate module on the system bus or it can be incorporated into an I/O module.
    In either case, the technique works as follows. When the processor wishes to read
    or write a block of data, it issues a command to the DMA module, by sending to the
    DMA module the following information:
    路   Whether a read or write is requested
    路   The address of the I/O device involved
    路   The starting location in memory to read data from or write data to
    路   The number of words to be read or written
        The processor then continues with other work. It has delegated this I/O opera-
    tion to the DMA module, and that module will take care of it. The DMA module
    transfers the entire block of data, one word at a time, directly to or from memory
    without going through the processor. When the transfer is complete, the DMA
    module sends an interrupt signal to the processor. Thus, the processor is involved
    only at the beginning and end of the transfer.
        The DMA module needs to take control of the bus to transfer data to and from
    memory. Because of this competition for bus usage, there may be times when the
    processor needs the bus and must wait for the DMA module. Note that this is not
    an interrupt; the processor does not save a context and do something else. Rather,
    the processor pauses for one bus cycle (the time it takes to transfer one word across
    the bus). The overall effect is to cause the processor to execute more slowly during
    a DMA transfer when processor access to the bus is required. Nevertheless, for a
    multiple-word I/O transfer, DMA is far more efficient than interrupt-driven or
    programmed I/O.

