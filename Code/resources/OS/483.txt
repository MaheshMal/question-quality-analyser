UNIX SVR4 Scheduling

      The scheduling algorithm used in UNIX SVR4 is a complete overhaul of the sched-
      uling algorithm used in earlier UNIX systems (described in Section 9.3). The new
      algorithm is designed to give highest preference to real-time processes, next-highest
      preference to kernel-mode processes, and lowest preference to other user-mode
      processes, referred to as time-shared processes.6
          The two major modifications implemented in SVR4 are as follows:
      1.  The addition of a preemptable static priority scheduler and the introduction of
          a set of 160 priority levels divided into three priority classes.
      2.  The insertion of preemption points. Because the basic kernel is not preemp-
          tive, it can only be split into processing steps that must run to completion
          without interruption. In between the processing steps, safe places known as
          preemption points have been identified where the kernel can safely interrupt
          processing and schedule a new process. A safe place is defined as a region
          of code where all kernel data structures are either updated and consistent or
          locked via a semaphore.
          Figure 10.12 illustrates the 160 priority levels defined in SVR4. Each process
      is defined to belong to one of three priority classes and is assigned a priority level
      within that class. The classes are as follows:
      · Real time (159-100): Processes at these priority levels are guaranteed to be
          selected to run before any kernel or time-sharing process. In addition, real-time
      6Time-shared processes are the processes that correspond to users in a traditional time-sharing system.

                                Priority      Global     Scheduling
                                class         value      sequence
                                              159        First
                                Real time
                                              100
                                              99
                                Kernel
                                              60
                                              59
                                Time shared
                                              0          Last
                                Figure 10.12  SVR4 Priority Classses
               processes can make use of preemption points to preempt kernel processes and
               user processes.
            ·  Kernel (99-60): Processes at these priority levels are guaranteed to be selected
               to run before any time-sharing process but must defer to real-time processes.
            ·  Time-shared (59-0): The lowest-priority processes, intended for user applica-
               tions other than real-time applications.
               Figure 10.13 indicates how scheduling is implemented in SVR4. A dispatch
     queue is associated with each priority level, and processes at a given priority level
     are executed in round-robin fashion. A bit-map vector, dqactmap, contains one bit
     for each priority level; the bit is set to one for any priority level with a nonempty
     queue. Whenever a running process leaves the Running state, due to a block, times-
     lice expiration, or preemption, the dispatcher checks dqactmap and dispatches a
     ready process from the highest-priority nonempty queue. In addition, whenever a
     defined preemption point is reached, the kernel checks a flag called kprunrun. If
     set, this indicates that at least one real-time process is in the Ready state, and the
     kernel preempts the current process if it is of lower priority than the highest-priority
     real-time ready process.
               Within the time-sharing class, the priority of a process is variable. The scheduler
     reduces the priority of a process each time it uses up a time quantum, and it raises its
dqactmap       0         1                                            1  1  0
     dispq  159          n                                            2  1  0
                         P                                            P  P
                         P                                            P
                         P                                            P
                         P
Figure 10.13      SVR4 Dispatch Queues

      priority if it blocks on an event or resource. The time quantum allocated to a time-
      sharing process depends on its priority, ranging from 100 ms for priority 0 to 10 ms
      for priority 59. Each real-time process has a fixed priority and a fixed time quantum.
