 the major differences among these approaches are the size and generality of the generated system and the ease of modification as the hardware configuration changes. consider the cost of modifying the system to support a newly acquired graphics terminal or another disk drive. balanced against that cost of course is the frequency or infrequency of such changes. . system boot after an operating system is generated it must be made available for use by the hardware. but how does the hardware know where the kernel is or how to load that kernel? the procedure of starting a computer by loading the kernel is known as booting the system. on most computer systems a small piece of code known as the bootstrap program or bootstrap loader locates the kernel loads it into main memory and starts its execution. some computer systems such as pcs use a two step process in which a simple bootstrap loader fetches a more complex boot program from disk which in turn loads the kernel. when a cpu receives a reset event for instance when it is powered up or rebooted the instruction register is loaded with a predefined memory location and execution starts there. at that location is the initial bootstrap program. this program is in the form of read only memory rom because the ram is in an unknown state at system startup. rom is convenient because it needs no initialization and cannot be infected by a computer virus. the bootstrap program can perform a variety of tasks. usually one task is to run diagnostics to determine the state of the machine. if the diagnostics pass the program can continue with the booting steps. it can also initialize all aspects of the system from cpu registers to device controllers and the contents of main memory. sooner or later it starts the operating system. some systems such as cellular phones pdas and game consoles store the entire operating system in rom. storing the operating system in rom is suitable for small operating systems simple supporting hardware and rugged operation. a problem with this approach is that changing the bootstrap code requires changing the rom hardware chips. some systems resolve this problem by using erasable programmable read only memory eprom which is readonly except when explicitly given a command to become writable. all forms of rom are also known as firmware since their characteristics fall somewhere between those of hardware and those of software. a problem with firmware in general is that executing code there is slower than executing code in ram. some systems store the operating system in firmware and copy it to ram for fast execution. a final issue with firmware is that it is relatively expensive so usually only small amounts are available. for large operating systems including most general purpose operating systems like windows mac os x and unix or for systems that change frequently the bootstrap loader is stored in firmware and the operating system is on disk. in this case the bootstrap runs diagnostics and has a bit of code that can read a single block at a fixed location say block zero from disk into memory and execute the code from that boot block. the program stored in the boot block may be sophisticated enough to load the entire operating system into memory and begin its execution. more typically it is simple code as it fits in a single disk block and only knows the address on disk and length of the chapter operating system structures remainder of the bootstrap program. all of the disk bound bootstrap artd the operating system itself can be easily changed by writing new versions to disk. a disk that has a boot partition more on that in section . . is called a boot disk or system disk. now that the full bootstrap program has been loaded it can traverse the file system to find the operating system kernel load it into memory and start its execution. it is only at this point that the system is said to be running