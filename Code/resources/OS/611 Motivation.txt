 a distributed system is a collection of loosely coupled processors interconnected by a communication network. from the point of view of a specific processor in a distributed system the rest of the processors and their respective resources are remote whereas its own resources are local. the processors in a distributed system may vary in size and function. they may include small microprocessors workstations minicomputers and large general purpose computer systems. these processors are referred to by a number of names such as sites nodes computers machines and hosts depending on the context in which they are mentioned. we mainly use site to indicate the location of a machine and host to refer to a specific system at a site. generally one host at one site the server has a resource that another host at another site the client or user would like to use. a general structure of a distributed system is shown in figure . . chapter distributed system structures site a site c communication client site b figure . a distributed system. there are four major reasons for building distributed systems resource sharing computation speedup reliability and communication. in this section we briefly discuss each of them. . . resource sharing if a number of different sites with different capabilities are connected to one another then a user at one site may be able to use the resources available at another. for example a user at site a may be using a laser printer located at site b. meanwhile a user at b may access a file that resides at a. in general resource sharing in a distributed system provides mechanisms for sharing files at remote sites processing information in a distributed database printing files at remote sites using remote specialized hardware devices such as a high speed array processor and performing other operations. . . computation speedup if a particular computation can be partitioned into subcomputations that can run concurrently then a distributed system allows us to distribute the subcomputations among the various sites the subcomputations can be run concurrently and thus provide computation speedup. in addition if a particular site is currently overloaded with jobs some of them may be moved to other lightly loaded sites. this movement of jobs is called load sharing. automated load sharing in which the distributed operating system automatically moves jobs is not yet common in commercial systems. . . reliability if one site fails in a distributed system the remaining sites can continue operating giving the system better reliability if the system is composed of multiple large autonomous installations that is general purpose computers the failure of one of them should not affect the rest. if however the system . types of distributed operating systems is composed of small machines each of which is responsible for some crucial system function such as terminal character i o or the file system then a single failure may halt the operation of the whole system. in general with enough redundancy in both hardware and data the system can continue operation even if some of its sites have failed. the failure of a site must be detected by the system and appropriate action may be needed to recover from the failure. the system must no longer use the services of that site. in addition if the function of the failed site can be taken over by another site the system must ensure that the transfer of function occurs correctly. finally when the failed site recovers or is repaired mechanisms must be available to integrate it back into the system smoothly. as we shall see in chapters and these actions present difficult problems that have many possible solutions. . . communication when several sites are connected to one another by a communication network the users at different sites have the opportunity to exchange information. at a low level messages are passed between systems much as messages are passed between processes in the single computer message system discussed in section . . given message passing all the higher level functionality found in standalone systems can be expanded to encompass the distributed system. such functions include file transfer login mail and remote procedure calls rpcs . the advantage of a distributed system is that these functions can be carried out over great distances. two people at geographically distant sites can collaborate on a project for example. by transferring the files of the project logging in to each other's remote systems to run programs and exchanging mail to coordinate the work users minimize the limitations inherent in longdistance work. we wrote this book by collaborating in such a manner. the advantages of distributed systems have resulted in an industry wide trend toward downsizing. many companies are replacing their mainframes with networks of workstations or personal computers. companies get a bigger bang for the buck that is better functionality for the cost more flexibility in locating resources and expanding facilities better user interfaces and easier maintenance. . types of distributed operating systems in this section we describe the two general categories of network oriented operating systems network operating systems and distributed operating systems. network operating systems are simpler to implement but generally more difficult for users to access and utilize than are distributed operating systems which provide more features. . . network operating systems a network operating system provides an environment in which users who are aware of the multiplicity of machines can access remote resources by either chapter distributed system structures logging in to the appropriate remote machine or transferring data from the remote machine to their own machines. . . . remote login an important function of a network operating system is to allow users to log in remotely. the internet provides the telnet facility for this purpose. to illustrate this facility lets suppose that a user at westminster college wishes to compute on cs.yale.edu a computer that is located at yale university. to do so the user must have a valid account on that machine. to log in remotely the user issues the command telnet cs.yale.edu this command results in the formation of a socket connection between the local machine at westminster college and the cs.yale.edu computer. after this connection has been established the networking software creates a transparent bidirectional link so that all characters entered by the user are sent to a process on cs.yale.edu and all the output from that process is sent back to the user. the process on the remote machine asks the user for a login name and a password. once the correct information has been received the process acts as a proxy for the user who can compute on the remote machine just as any local user can. . . . remote file transfer another major function of a network operating system is to provide a mechanism for remote file transfer from one machine to another. in such an environment each computer maintains its own local file system. if a user at one site say cs.uvm.edu wants to access a file located on another computer say cs.yale.edu then the file must be copied explicitly from the computer at yale to the computer at the university of vermont. the internet provides a mechanism for such a transfer with the file transfer protocol ftp program. suppose that a user on cs.uvm.edu wants to copy a java program server. j ava that resides on cs.yale.edu. the user must first invoke the ftp program by executing ftp cs.yale.edu the program then asks the user for a login name and a password. once the correct information has been received the user must connect to the subdirectory where the file server. j ava resides and then copy the file by executing get server.java in this scheme the file location is not transparent to the user users must knowexactly where each file is. moreover there is no real file sharing because a user can only copy a file from one site to another. thus several copies of the same file may exist resulting in a waste of space. in addition if these copies are modified the various copies will be inconsistent. notice that in our example the user at the university of vermont must have login permission on cs.yale.edu. ftp also provides a way to allow a user . types of distributed operating systems who does not have an account on the yale computer to copy files remotely. this remote copying is accomplished through the anonymous ftp method which works as follows. the file to be copied that is server .java rmist be placed in a special subdirectory say ftp with the protection set to allow the public to read the file. a user who wishes to copy the file uses the f t p command as before. when the user is asked for the login name the user supplies the name anonymous and an arbitrary password. once anonymous login is accomplished care must be taken by the system to ensure that this partially authorized user does not access inappropriate files. generally the user is allowed to access only those files that are in the directory tree of user anonymous. any files placed here are accessible to any anonymous users subject to the usual file protection scheme used on that machine. anonymous users however cannot access files outside of this directory tree. the ftp mechanism is implemented in a manner similar to telnet implementation. there is a daemon on the remote site that watches for connection requests to the system's ftp port. login authentication is accomplished and the user is allowed to execute commands remotely. unlike the telnet daemon which executes any command for the user the ftp daemon responds only to a predefined set of file related commands. these include the following get transfer a file from the remote machine to the local machine. put transfer from the local machine to the remote machine. i s or d i r list files in the current directory on the remote machine. cd change the current directory on the remote machine. there are also various commands to change transfer modes for binary or ascii files and to determine connection status. an important point about telnet and ftp is that they require the user to change paradigms. ftp requires the user to know a command set entirely different from the normal operating system commands. telnet requires a smaller shift the user must know appropriate commands on the remote system. for instance a viser on a windows machine who telnets to a unix machine must switch to unix commands for the duration of the telnet session. facilities are more convenient for users if they do not require the use of a different set of commands. distributed operating systems are designed to address this problem. . . distributed operating systems in a distributed operating system the users access remote resources in the same way they access local resources. data and process migration from one site to another is under the control of the distributed operating system. . . . data migration suppose a user on site a wants to access data such as a file that reside at site b. the system can transfer the data by one of two basic methods. one approach to data migration is to transfer the entire file to site a. from that point on all chapter distributed system structures access to the file is local. when the user no longer needs access to the file a copy of the file if it has been modified is sent back to site b. even if only a modest change has been made to a large file all the data must be transferred. this mechanism can be thought of as an automated ftp system. this approach was used in the andrew file system as we discuss in chapter but it was found to be too inefficient. the other approach is to transfer to site a only those portions of the file that are actually necessary for the immediate task. if another portion is required later another transfer will take place. when the user no longer wants to access the file any part of it that has been modified must be sent back to site b. note the similarity to demand paging. the sun microsystems network file system nfs protocol uses this method chapter as do newer versions of andrew. the microsoft smb protocol running on top of either tcp ip or the microsoft netbeui protocol also allows file sharing over a network. smb is described in appendix c. . . clearly if only a small part of a large file is being accessed the latter approach is preferable. if significant portions of the file are being accessed however it is more efficient to copy the entire file. in both methods data migration includes more than the mere transfer of data from one site to another. the system must also perform various data translations if the two sites involved are not directly compatible for instance if they use different character code representations or represent integers with a different number or order of bits . . . . computation migration in some circumstances we may want to transfer the computation rather than the data across the system this approach is called computation migration. for example consider a job that needs to access various large files that reside at different sites to obtain a summary of those files. it would be more efficient to access the files at the sites where they reside and return the desired results to the site that initiated the computation. generally if the time to transfer the data is longer than the time to execute the remote command the remote command should be used. such a computation can be carried out in different ways. suppose that process p wants to access a file at site a. access to the file is carried out at site a and could be initiated by an rpc. an rpc uses a datagram protocol udp on the internet to execute a routine on a remote system section . . . process p invokes a predefined procedure at site a. the procedure executes appropriately and then returns the results to p. alternatively process p can send a message to site a. the operating system at site a then creates a new process q whose function is to carry out the designated task. when process q completes its execution it sends the needed result back to p via the message system. in this scheme process p may execute concurrently with process q and in fact may have several processes running concurrently on several sites. both methods could be used to access several files residing at various sites. one rpc might result in the invocation of another rpc or even in the transfer of messages to another site. similarly process q could during the course of its execution send a message to another site which in turn would create another process. this process might either send a message back to q or repeat the cycle