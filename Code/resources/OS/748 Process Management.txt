 a process is the basic context within which all user requested activity is serviced within the operating system. to be compatible with other unix systems linux must use a process model similar to those of other versions of unix. linux operates differently from unix in a few key places however. in this section we review the traditional unix process model from section a. . and introduce linux's own threading model. . . the fork and exec process model the basic principle of unix process management is to separate two operations the creation of a process and the running of a new program. a new process is created by the f ork system call and a new program is run after a call to exec . these are two distinctly separate functions. a new process may be created with forko without a new program being run the new subprocess simply continues to execute exactly the same program that the first parent process was running. equally running a new program does not require that a new process be created first any process may call exec at any time. the currently running program is immediately terminated and the new program starts executing in the context of the existing process. this model has the advantage of great simplicity. rather than having to specify every detail of the environment of a new program in the system call that runs that program new programs simply run in their existing environment. if a parent process wishes to modify the environment in which a new program is to be run it can fork and then still running the original program in a child process make any system calls it requires to modify that child process before finally executing the new program. under unix then a process encompasses all the information that the operating system must maintain to track the context of a single execution of a single program. under linux we can break down this context into a number of specific sections. broadly process properties fall into three groups the process identity environment and context. . . . process identity a process identity consists mainly of the following items process id pid . each process has a unique identifier. pids are used to specify processes to the operating system when an application makes a system call to signal modify or wait for another process. additional identifiers associate the process with a process group typically a tree of processes forked by a single user command and login session. credentials. each process must have an associated user id and one or more group ids user groups are discussed in section . . that determine the rights of a process to access system resources and files. . process management personality. process personalities are not traditionally found on unix systems but under linux each process has an associated personality identifier that can modify slightly the semantics of certain system calls. personalities are primarily used by emulation libraries to request that system calls be compatible with certain flavors of unix. most of these identifiers are under limited control of the process itself. the process group and session identifiers can be changed if the process wants to start a new group or session. its credentials can be changed subject to appropriate security checks. however the primary pid of a process is unchangeable and uniquely identifies that process until termination. . . . process environment a process's environment is inherited from its parent and is composed of two null terminated vectors the argument vector and the environment vector. the argument vector simply lists the command line arguments used to invoke the running program it conventionally starts with the name of the program itself. the environment vector is a list of name value pairs that associates named environment variables with arbitrary textual values. the environment is not held in kernel memory but is stored in the process's own user mode address space as the first datum at the top of the process's stack. the argument and environment vectors are not altered when a new process is created the new child process will inherit the environment that its parent possesses. however a completely new environment is set up when a new program is invoked. on calling exec a process must supply the environment for the new program. the kernel passes these environment variables to the next program replacing the process's current environment. the kernel otherwise leaves the environment and command line vectors alone their interpretation is left entirely to the user mode libraries and applications. the passing of environment variables from one process to the next and the inheriting of these variables by the children of a process provide flexible ways to pass information to components of the user mode system software. various important environment variables have conventional meanings to related parts of the system software. for example the term variable is set up to name the type of terminal connected to a user's login session many programs use this variable to determine how to perform operations on the user's display such as moving the cursor and scrolling a region of text. programs with multilingual support use the lang variable to determine in which language to display system messages for programs that include multilingual support. the environment variable mechanism custom tailors the operating system on a per process basis rather than for the system as a whole. users can choose their own languages or select their own editors independently of one another. . . . process context the process identity and environment properties are usually set up when a process is created and not changed until that process exits. a process may choose to change some aspects of its identity if it needs to do so or it may alter its environment. in contrast process context is the state of the running program at any one time it changes constantly. process context includes the following parts. chapter the linux system 