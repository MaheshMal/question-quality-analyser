""
Derive an asymptotic running time complexity of the adjacent algorithm in terms of θ. Assume n is a power of 2.
"For the adjacent algorithm, considering “Moving a disk” as a basic operation, derive the asymptotic running time complexity of the algorithm."
"Define “Big Oh” O(g(n)) and “Big Theta” Θ(g(n)), and show that n(n-1)/2 ∈ O(n3) and n(n-1)/2 ∈ Θ(n2)."
Design a brute-force string matching algorithm to match a pattern of length m in a text of length n characters. Derive worst-time asymptotic running time efficiency of the algorithm.
"Let us define a binary tree is weight-balanced if the difference of number of nodes in the left and the right sub-trees is not more than one. Design an O(n) algorithm to validate if the given binary tree is weight-balanced, where n is the number of nodes in the tree."
"Two matrices of order n x n can be added by splitting each input matrix into four n/2 x n/2 matrices and adding them recursively. Using this concept, design a divide-and-conquer algorithm to add two matrices of order n x n. Derive worst-time asymptotic running time efficiency of the algorithm."
Derive θ(n) as the worst- case time efficiency of the adjacent algorithm with “k ← j” as the basic operation.
"Design a presorting-based algorithm to find the smallest possible mean of k elements in an array of n elements. Algorithm SmallestKMean(A[1..n], k)"
"Consider the problem of searching for genes in DNA sequences using Boyer-Moore string matching algorithm. A DNA sequence is represented by a text on the alphabet {A, C, G, T}, and the gene or gene segment is the pattern. Construct the bad-symbol shift table and good-suffix shift table for the following gene segment: TAATAA. Apply Boyer-Moore algorithm to locate first occurrence of the above pattern in the following DNA sequence: TAATCAGGAAAGCGTAATAATAATA."
"Binomial Coefficient C(n, k) can be defined by the recurrence: C(n, k) = C(n – 1, k – 1) + C(n – 1, k) for n > k > 0, and C(n, 0) = C(n, n) = 1 for n ≥ 0. The recurrence is implemented in the following algorithm: Algorithm BinomialCoeff (n, k) if (k = 0) or (k = n) return 1 else return BinomialCoeff(n–1, k–1) + BinomialCoeff(n-1, k) What is the glaring issue the above algorithm has, which can be solved by dynamic programming? Design an algorithm using dynamic programming to find the binomial coefficient defined in the above recurrence, which has significantly lower running-time efficiency than the above algorithm."
Construct a Huffman tree for the following data and obtain its Huffman code. Character: A B C D E F Frequency: 0.5 0.35 0.5 0.1 0.4 0.2
"Above algorithm is the well-known Floyd’s algorithm to find shortest distance between every pair of vertices in a graph. Enhance the algorithm to find shortest paths themselves. (Hint: Along with D, you may want to generate another data structure, which holds some kind of information about the shortest paths. You may want to write another procedure, which takes i, j and the data structure, and prints shortest path from vertex i to vertex j.)"
When do we call a Lower Bound of a problem is “tight”? Mention four known methods for establishing lower bounds.
"Define P, NP and NP-Complete Problems."
Explain Backtracking method for solving n-Queens problem (using state-space trees).
Algorithm Foo(a[0 .. n-1]) for i <- 0 to n - 1 if a[i] != a[n - 1 - i] return false return true i) What does the algorithm do? ii) What is the basic operation? iii) What are the counts of basic operations in the best case and the worst case? iv) Make the algorithm efficient by decreasing the number of operations in the worst case
"Algorithm GE(a[0..n-1][0 .. n-1]) // A is a 2D array of real numbers for i <- 0 to n - 2 for j <- i + 1 to n - 1 for k <- i to n a[j,k] <- a[j, k] - a[i, k] * a[j, i] / a[i, i] i) Find the time efficiency class of this algorithm ii) Point out the glaring inefficiency in this algorithm."
Solve the recurrence relation. x(n) = x(n/3) + 1 for n > 1 ; x(1) = 0
Find the number of comparisons that will be made by straight forward (brute-force) string matching for the pattern ABABC in the following text BAABABABCCA
What do these terms mean in the context of sorting i) stable ii) in-place Give example of sorting algorithms supporting and not supporting the above two
"A sequence has # of S and # of A not in any particular order. The following algorithm claims to bring all S to the left and all A to the right. Algorithm Arrange(s[0 .. n-1] of 'A' or 'S') // t1, t2 shall be local stores indexed by i1 i2 respectively i1 <- 0; i2 <- 0 for i <- 0 to n - 1 if s[i] = 'S' t1[i1] <- s[i] i1 <- i1 + 1 if s[i] = 'A' t2[i2] <- s[i] i2 <- i2 + 1 for i <- 0 to i1 // i1 - 1 s[i] <- t1[i] for i <- 0 to i2 // i2 - 1 s[i] <- t2[i] // s[i + i1] ← t2[i] i) What should be the sizes of t1 and t2 to make the algorithm safe? ii) Correct the bugs iii) What is the space efficiency of this algorithm?"
"Consider the brute-force algorithms for knapsack and traveling salesman problems. To which mathematical models, do they match? What are the complexities of these algorithms? Which grows faster?"
Set up the recurrence relationship for Mergesort and solve it. State the assumptions made.
"Given that a graph is represented as an adjacency matrix, develop an algorithm to check whether it has an Eulerian circuit. Existence of an edge between node i and node j is indicated by a value 1 in the matrix, otherwise 0."
"Algorithm Partition(a[l .. r]) p ← a[l] i ← l; j ← r + 1 repeat repeat i <- i + 1 until a[i] >= p repeat j <- j - 1 until a[j] <= p swap(a[i], a[j]) until i >= j swap(a[i], a[j]) swap(a[l], a[j]) return j Does i cross the right boundary? If yes, how to avoid it? Does j cross the left boundary? If yes, how to avoid it? Do not add another condition to the inner loops."
What are the best case inputs for i) Bubble sort ii) Quick sort iii) Selection sort? What is the time complexity in each case?
Derive the best case and worst case time efficiencies of the Insertion Sort algorithm.
"Write the Johnson­Trotter algorithm for generating all the permutations of {1, ..., n}. Walk through the algorithm for generating all the permutations of {1, 2, 3, 4}."
"Consider the sequence of ten numbers: 3, 7, 1, 2, 10, 8, 9, 6, 5, 4. a. Walk through the Insertion sort algorithm on the array having the above sequence of numbers and show the intermediate stages of the array while sorting. b. Create a heap (max­heap to be precise) for the array having the above sequence of numbers. c. Construct an AVL tree for the above sequence of numbers. d. Construct a 2­3 tree for the above sequence of numbers."
Design an algorithm to delete an arbitrary element in a heap given the index i (1 ≤ i ≤ n) in its array representation. Assume the heap elements are stored from index 1 to n in the array representation of the heap.
"Design a presorting­based algorithm for finding the number different integers present in an array of n integers. For example, there are three different integers in the array {5, 2, 5, 10, 2}. Derive the time efficiency of the algorithm."
Compare DFS and BFS graph traversal algorithms.
Design a O(n) sorting algorithm to sort n single­digit­nonnegative­integers. Derive the O(n) time complexity for the algorithm designed.
"A DNA sequence is represented by a text on the alphabet {A, C, G, T}, and the gene segment is the pattern. Consider the gene segment (pattern) AGCACA and the DNA sequence (text) AGCATATTACGACAGCACACGTAGCAC. Construct the shift table to be used in the Horspool’s string matching algorithm for the above gene segment and walk us through the Horspool’s algorithm to search the gene segment in the DNA sequence. How many character comparisons will be made by the algorithm in searching for the gene segment in the DNA sequence?"
"A DNA sequence is represented by a text on the alphabet {A, C, G, T}, and the gene segment is the pattern. Consider the gene segment (pattern) AGCACA and the DNA sequence (text) AGCATATTACGACAGCACACGTAGCAC. Construct the bad­symbol­shift table and good­suffix­shift table to be used in the Boyer­Moore string matching algorithm for the above gene segment and walk us through the Boyer­Moore algorithm to search the gene segment in the DNA sequence. How many character comparisons will be made by the algorithm in searching for the gene segment in the DNA sequence?"
A sequence of values in a row of the dynamic programming table for solving Knapsack problem is (a) decreasing (b) always same (c) non-decreasing (d) None of the above
"In Warshall’s algorithm, if the element rij is 1 in R(k−1), then (a) it remains as 1 in R(k) (b) it could become 0 in R(k) (c) it could become -1 in R(k) (d) None of the above"
State which of the following is true. (a) Dynamic Programming involves changing the computer program dynamically (b) Dynamic programming does not use divide and conquer strategy (c) Dynamic programming solves overlapping sub-problems only once (d) None of the above
"We have coins of denominations 25, 10 and 1. Minimum number of coins to make an amount of 30 using Greedy method is: (a) 30 (b) 3 (c) 6 (d) None of the above"
"In Kruskal's algorithm, adding an edge may form a cycle. That would violate (a) Feasibility (b) Local optimality (c) Irrecoverable (d) None of the above"
"If weights of edges are all identical, then minimum cost spanning tree obtained (a) using Prim's algorithm will give the less total weight compared to Kruskal's algorithm (b) using Kruskal's algorithm will give the less total weight compared to Prim's algorithm (c) minimum cost spanning tree is uniquely defined (d) None of the above"
"In a connected undirected graph, which of the following relation is true? (a) |V | − 1 ≤ |E| (b) |E | - 1 ≤ |V| (c) |V | + 1 ≤ |E| (d) None of the above"
"Dijkstra's algorithm can be used to find single-destination shortest-paths (shortest paths from all vertices to a common destination) in an undirected graph by (a) Making all the weights negative (b) Change the destination to source, find the solution for minimum weight, and reverse the direction of paths in the solution (c) change the destination to source, find the solution for maximum weight, and reverse the direction of paths in the solution (d) None of the above"
"If Huffman codes for e, a, t are respectively 01, 011, 1 then the text code 010111 represents (a) eat (b) eett (c) Huffman codes are wrong (d) Text code is invalid"
Let X be a subgraph constructed by Dijkstra’s algorithm in the process of solving the single-source shortest-paths problem for a weighted connected graph G. (a) X is a spanning tree (b) X is a minimum cost spanning tree (c) X may not be a tree (d) None of the above
Identify the sorting algorithm in ALGORITHM 1: a. Bubble Sort sorting ascendingly b. Bubble Sort sorting descendingly c. Selection Sort sorting ascendingly d. Selection Sort sorting descendingly
"In ALGORITHM 1, if the statement “i ← 1” is replaced with “i ← 0”, then a. Rest of the operations in the algorithms runs same number times as before b. It still sorts the elements as before but does a little more unnecessary steps c. Algorithms runs successfully but fails to sort the list d. Algorithm does not run because it compares an element which is not defined"
"In ALGORITHM 1, treating “Aj < Ak” as the basic operation, how many times it is executed in the worst case? a. 0 b. n c. n(n­1)/2 d. n2"
"In ALGORITHM 1, treating “Swap Aj with Ak” as the basic operation, how many times it is executed in the worst case? a. 0 b. n c. n(n­1)/2 d. n2"
"What is the purpose of using the truth value of “flag” in ALGORITHM 1? a. It is just a good coding practice, it has no performance benefits b. Bubble sorting does not work without it c. For a better worst­case performance d. For a better best­case performance"
Which of the following asymptotic notation best describes ALGORITHM 1 by treating “Aj < Ak” as the basic operation? a. O(n) b. O(n​2​) c. O(n3) c. Ω(n2)
"In ALGORITHM 1, if the operation “for j ← n­1 downto i” is replaced with “for j ← i to n­1”, then a. it sorts in the reverse direction b. it sorts in the same order as before c. it does not sort properly d. one or more comparisons becomes invalid"
"Suppose an algorithm’s basic operation executes “n(n 2+1)” times for input size n. By increasing the input size 10 times, how much longer the algorithm would run? a. (log2 10) times b. 10 times c. 100 times d. 1000 times"
"Given that the key element is present in the unordered list of n elements, in worst case how many comparisons made in the sequential search algorithm? a. 0 b. 1 c. (n+1)/2 d. n"
"For a n­characters long text and m­characters long pattern where m ≤ n, in the best case, how many single­character comparisons are made by the brute­force string matching algorithm to search for the first occurrence of the pattern in the text. a. 0 b. 1 c. m d. n"
Write Warshall‟s algorithm to find the transitive closure of a directed graph.
Find transitive closure of the graph given in the form of an adjacency matrix using Warshall‟s algorithm. 0 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0
Compare Warshall‟s algorithm and Floyd‟s algorithm with similarities and differences.
Apply bottom-up dynamic programming algorithm to the instance of the knapsack problem given in the adjacent figure. Item Weight Value 1 1 kg $ 1 2 1 kg $ 2 3 4 kg $ 10 4 2 kg $ 2 Knapsack capacity: 5 kg
Write Kruskal‟s algorithm to find a minimum spanning tree of an undirected graph.
Apply Kruskal‟s algorithm to find a minimum spanning tree of the graph shown in Figure 1
Apply Prim‟s algorithm to find a minimum spanning tree of the graph shown in Figure 1
Find shortest path from the vertex „a‟ to all other vertices in the graph shown in Figure 1 using Dijkstra‟s single-source shortest-paths algorithm.
"Construct Huffman tree and Huffman code for the following data, which has four symbols with their frequency of occurrences in the text. symbol A B C D frequency 0.4 0.3 0.2 0.1"
"With respect to limitations of algorithms, what is a “lower bound” of a problem? When is it called a “tight lower bound”? List some of the methods of establishing lower bounds."
